{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Data Understanding"
      ],
      "metadata": {
        "id": "eMLT3dT6lhdh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Instalasi opendatasets untuk proses import data dari Kaggle\n"
      ],
      "metadata": {
        "id": "lMASdinFloYw"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Luue7IY-knxc",
        "outputId": "4afad4f9-8f00-4479-accc-a5b6a86434f4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting opendatasets\n",
            "  Downloading opendatasets-0.1.22-py3-none-any.whl (15 kB)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from opendatasets) (4.65.0)\n",
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.10/dist-packages (from opendatasets) (1.5.16)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from opendatasets) (8.1.6)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.10/dist-packages (from kaggle->opendatasets) (1.16.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from kaggle->opendatasets) (2023.5.7)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from kaggle->opendatasets) (2.8.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from kaggle->opendatasets) (2.27.1)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.10/dist-packages (from kaggle->opendatasets) (8.0.1)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from kaggle->opendatasets) (1.26.16)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from kaggle->opendatasets) (6.0.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->kaggle->opendatasets) (0.5.1)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.10/dist-packages (from python-slugify->kaggle->opendatasets) (1.3)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle->opendatasets) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle->opendatasets) (3.4)\n",
            "Installing collected packages: opendatasets\n",
            "Successfully installed opendatasets-0.1.22\n"
          ]
        }
      ],
      "source": [
        "!pip install opendatasets"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Import dataset dari Kaggle (diperlukan username dan key dari akun Kaggle selama proses import dataset)"
      ],
      "metadata": {
        "id": "_kSw386EmLn2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import opendatasets as od\n",
        "\n",
        "# import dataset\n",
        "od.download('https://www.kaggle.com/datasets/arashnic/book-recommendation-dataset')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4PTt-faHlw56",
        "outputId": "1e0b1671-5c34-4347-a407-c63cefdf7618"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please provide your Kaggle credentials to download this dataset. Learn more: http://bit.ly/kaggle-creds\n",
            "Your Kaggle username: zulfianrahma\n",
            "Your Kaggle Key: ··········\n",
            "Downloading book-recommendation-dataset.zip to ./book-recommendation-dataset\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 23.8M/23.8M [00:01<00:00, 20.0MB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Membaca data-data dalam dataset dengan menggunakan fungsi pandas.read_csv"
      ],
      "metadata": {
        "id": "FbWE13fDnP5I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "books = pd.read_csv('/content/book-recommendation-dataset/Books.csv')\n",
        "ratings = pd.read_csv('/content/book-recommendation-dataset/Ratings.csv')\n",
        "users = pd.read_csv('/content/book-recommendation-dataset/Users.csv')\n",
        "\n",
        "print('Jumlah data buku: ', len(books.ISBN.unique()))\n",
        "print('Jumlah penulis buku: ', len(books['Book-Author'].unique()))\n",
        "print('Jumlah penerbit buku: ', len(books['Publisher'].unique()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mlbBac-HmpMv",
        "outputId": "648e5fbc-c037-4b9e-b0e5-ba7abdfad96d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-3-66fab7f0fe71>:3: DtypeWarning: Columns (3) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  books = pd.read_csv('/content/book-recommendation-dataset/Books.csv')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah data buku:  271360\n",
            "Jumlah penulis buku:  102024\n",
            "Jumlah penerbit buku:  16808\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Univariate Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "KDu4xH1zuf5N"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Variabel - variabel yang ada pada Book Recommendation Dataset adalah:\n",
        "\n",
        "* Users : Memuat data pengguna. Perlu diketahui bahwa id pengguna (User-ID) sudah dianonimkan dan dipetakan ke dalam integer. Data demografi disediakan (Location, Age) jika data tersebut tersedia. Jika tidak, informasi tersebut akan mempunyai nilai NULL.\n",
        "* Books : Buku diidentifikasi dengan nomor ISBN. Nomor ISBN yang tidak sesuai telah dihilangkan dari dataset. Selain itu, beberapa informasi berkaitan dengan buku telah disediakan (Book-Title, Book-Author, Year-Of-Publication, Publisher) dan diperoleh dari Amazon Web Services. Dalam kasus banyak penulis, hanya penulis pertama yang ditampilkan. Tautan URL untuk gambar cover buku juga disediakan dan memiliki tiga jenis kategori (Image-URL-S, Image-URL-M, Image-URL-L) yaitu small, medium, dan large. Tautan tersebut diarahkan pada halaman Amazon Web.\n",
        "* Rating: Memuat informasi terkait penilaian buku. Nilai (Book-Rating) yang diberikan bisa secara eksplisit, diekspresikan dalam skala 1-10, atau secara implisit, diekspresikan sebagai nilai 0."
      ],
      "metadata": {
        "id": "NUVvNFzjulNN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat informasi pada variabel books"
      ],
      "metadata": {
        "id": "VFGjWAsetFtn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "books.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jr9xr_Tspv2u",
        "outputId": "e7ecd7d1-09bf-439c-8414-adc478eed91e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 271360 entries, 0 to 271359\n",
            "Data columns (total 8 columns):\n",
            " #   Column               Non-Null Count   Dtype \n",
            "---  ------               --------------   ----- \n",
            " 0   ISBN                 271360 non-null  object\n",
            " 1   Book-Title           271360 non-null  object\n",
            " 2   Book-Author          271359 non-null  object\n",
            " 3   Year-Of-Publication  271360 non-null  object\n",
            " 4   Publisher            271358 non-null  object\n",
            " 5   Image-URL-S          271360 non-null  object\n",
            " 6   Image-URL-M          271360 non-null  object\n",
            " 7   Image-URL-L          271357 non-null  object\n",
            "dtypes: object(8)\n",
            "memory usage: 16.6+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat ada berapa banyak entri buku yang unik berdasarkan ISBN"
      ],
      "metadata": {
        "id": "-GrDvCCstQLl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Jumlah data buku: ', len(books.ISBN.unique()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_hltwru2qFi_",
        "outputId": "d5dd51bd-1802-41c3-8de5-976b2b2bd128"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah data buku:  271360\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mengecek missing value pada variabel books dengan fungsi isnull()"
      ],
      "metadata": {
        "id": "vt7_tGDU2MsN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "books.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dtb7VGWh2Q5u",
        "outputId": "88070854-cfc6-4a12-9e48-f284ddd8ee2b"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ISBN                   0\n",
              "Book-Title             0\n",
              "Book-Author            1\n",
              "Year-Of-Publication    0\n",
              "Publisher              2\n",
              "Image-URL-S            0\n",
              "Image-URL-M            0\n",
              "Image-URL-L            3\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat dataframe pada variabel books menggunakan fungsi head()\n"
      ],
      "metadata": {
        "id": "LcOsAeDM1lx6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "books.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "aIQeEJQW1oIU",
        "outputId": "b8903e5d-380a-464c-d6e2-2094a52f23bb"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         ISBN                                         Book-Title  \\\n",
              "0  0195153448                                Classical Mythology   \n",
              "1  0002005018                                       Clara Callan   \n",
              "2  0060973129                               Decision in Normandy   \n",
              "3  0374157065  Flu: The Story of the Great Influenza Pandemic...   \n",
              "4  0393045218                             The Mummies of Urumchi   \n",
              "\n",
              "            Book-Author Year-Of-Publication                   Publisher  \\\n",
              "0    Mark P. O. Morford                2002     Oxford University Press   \n",
              "1  Richard Bruce Wright                2001       HarperFlamingo Canada   \n",
              "2          Carlo D'Este                1991             HarperPerennial   \n",
              "3      Gina Bari Kolata                1999        Farrar Straus Giroux   \n",
              "4       E. J. W. Barber                1999  W. W. Norton &amp; Company   \n",
              "\n",
              "                                         Image-URL-S  \\\n",
              "0  http://images.amazon.com/images/P/0195153448.0...   \n",
              "1  http://images.amazon.com/images/P/0002005018.0...   \n",
              "2  http://images.amazon.com/images/P/0060973129.0...   \n",
              "3  http://images.amazon.com/images/P/0374157065.0...   \n",
              "4  http://images.amazon.com/images/P/0393045218.0...   \n",
              "\n",
              "                                         Image-URL-M  \\\n",
              "0  http://images.amazon.com/images/P/0195153448.0...   \n",
              "1  http://images.amazon.com/images/P/0002005018.0...   \n",
              "2  http://images.amazon.com/images/P/0060973129.0...   \n",
              "3  http://images.amazon.com/images/P/0374157065.0...   \n",
              "4  http://images.amazon.com/images/P/0393045218.0...   \n",
              "\n",
              "                                         Image-URL-L  \n",
              "0  http://images.amazon.com/images/P/0195153448.0...  \n",
              "1  http://images.amazon.com/images/P/0002005018.0...  \n",
              "2  http://images.amazon.com/images/P/0060973129.0...  \n",
              "3  http://images.amazon.com/images/P/0374157065.0...  \n",
              "4  http://images.amazon.com/images/P/0393045218.0...  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-c27dd500-0cee-4dd5-8215-d8fb326c0209\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ISBN</th>\n",
              "      <th>Book-Title</th>\n",
              "      <th>Book-Author</th>\n",
              "      <th>Year-Of-Publication</th>\n",
              "      <th>Publisher</th>\n",
              "      <th>Image-URL-S</th>\n",
              "      <th>Image-URL-M</th>\n",
              "      <th>Image-URL-L</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0195153448</td>\n",
              "      <td>Classical Mythology</td>\n",
              "      <td>Mark P. O. Morford</td>\n",
              "      <td>2002</td>\n",
              "      <td>Oxford University Press</td>\n",
              "      <td>http://images.amazon.com/images/P/0195153448.0...</td>\n",
              "      <td>http://images.amazon.com/images/P/0195153448.0...</td>\n",
              "      <td>http://images.amazon.com/images/P/0195153448.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0002005018</td>\n",
              "      <td>Clara Callan</td>\n",
              "      <td>Richard Bruce Wright</td>\n",
              "      <td>2001</td>\n",
              "      <td>HarperFlamingo Canada</td>\n",
              "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
              "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
              "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0060973129</td>\n",
              "      <td>Decision in Normandy</td>\n",
              "      <td>Carlo D'Este</td>\n",
              "      <td>1991</td>\n",
              "      <td>HarperPerennial</td>\n",
              "      <td>http://images.amazon.com/images/P/0060973129.0...</td>\n",
              "      <td>http://images.amazon.com/images/P/0060973129.0...</td>\n",
              "      <td>http://images.amazon.com/images/P/0060973129.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0374157065</td>\n",
              "      <td>Flu: The Story of the Great Influenza Pandemic...</td>\n",
              "      <td>Gina Bari Kolata</td>\n",
              "      <td>1999</td>\n",
              "      <td>Farrar Straus Giroux</td>\n",
              "      <td>http://images.amazon.com/images/P/0374157065.0...</td>\n",
              "      <td>http://images.amazon.com/images/P/0374157065.0...</td>\n",
              "      <td>http://images.amazon.com/images/P/0374157065.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0393045218</td>\n",
              "      <td>The Mummies of Urumchi</td>\n",
              "      <td>E. J. W. Barber</td>\n",
              "      <td>1999</td>\n",
              "      <td>W. W. Norton &amp;amp; Company</td>\n",
              "      <td>http://images.amazon.com/images/P/0393045218.0...</td>\n",
              "      <td>http://images.amazon.com/images/P/0393045218.0...</td>\n",
              "      <td>http://images.amazon.com/images/P/0393045218.0...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c27dd500-0cee-4dd5-8215-d8fb326c0209')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-29492f76-d25d-468a-a877-e640324974b5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29492f76-d25d-468a-a877-e640324974b5')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-29492f76-d25d-468a-a877-e640324974b5 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c27dd500-0cee-4dd5-8215-d8fb326c0209 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c27dd500-0cee-4dd5-8215-d8fb326c0209');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat informasi terkait entri penulis buku yang unik"
      ],
      "metadata": {
        "id": "iFVtCP9KycPu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Jumlah penulis buku: ', len(books['Book-Author'].unique()))\n",
        "print('Nama - nama penulis buku: ', books['Book-Author'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aqPjbQ8Zy8zu",
        "outputId": "aa674d65-d30a-4306-bc66-bd1e140c4a10"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah penulis buku:  102024\n",
            "Nama - nama penulis buku:  ['Mark P. O. Morford' 'Richard Bruce Wright' \"Carlo D'Este\" ...\n",
            " 'David Biggs' 'Teri Sloat' 'Christopher  Biffle']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat informasi terkait entri penerbit buku yang unik"
      ],
      "metadata": {
        "id": "2pzkvn-szKMl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Jumlah penerbit buku: ', len(books['Publisher'].unique()))\n",
        "print('Nama - nama penerbit buku: ', books['Publisher'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5UpJfJ0nzNlt",
        "outputId": "bb7ffce8-5b22-40fd-a5bd-2cd67e6fb458"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah penerbit buku:  16808\n",
            "Nama - nama penerbit buku:  ['Oxford University Press' 'HarperFlamingo Canada' 'HarperPerennial' ...\n",
            " 'Tempo' 'Life Works Books' 'Connaught']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat informasi pada variabel ratings\n"
      ],
      "metadata": {
        "id": "pzZ1Mbw7tmc9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ratings.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MnQhd-CVp3Cm",
        "outputId": "d1f912ce-7493-4c1a-aef6-19cfec34f18f"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1149780 entries, 0 to 1149779\n",
            "Data columns (total 3 columns):\n",
            " #   Column       Non-Null Count    Dtype \n",
            "---  ------       --------------    ----- \n",
            " 0   User-ID      1149780 non-null  int64 \n",
            " 1   ISBN         1149780 non-null  object\n",
            " 2   Book-Rating  1149780 non-null  int64 \n",
            "dtypes: int64(2), object(1)\n",
            "memory usage: 26.3+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat ada berapa banyak entri penilaian buku yang unik berdasarkan User-ID"
      ],
      "metadata": {
        "id": "MYr7BenYtsJ8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Jumlah data penilaian buku: ', len(ratings['User-ID'].unique()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AFX0Fi-tpwhm",
        "outputId": "28cbfd80-ab51-436c-f5a1-e0d059eea6a2"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah data penilaian buku:  105283\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mengecek missing value pada variabel ratings dengan fungsi isnull()"
      ],
      "metadata": {
        "id": "9FlwF3nS2Z0_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ratings.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A5XIGIcJ2Zb2",
        "outputId": "95947542-7a64-4073-823a-0f09883a9438"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User-ID        0\n",
              "ISBN           0\n",
              "Book-Rating    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat dataframe pada variabel ratings menggunakan fungsi head()"
      ],
      "metadata": {
        "id": "e_sKBqaG0k6F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ratings.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "u1eyJAY00tfF",
        "outputId": "3d23c3a6-6caa-49c3-83d3-5959d9c498a4"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   User-ID        ISBN  Book-Rating\n",
              "0   276725  034545104X            0\n",
              "1   276726  0155061224            5\n",
              "2   276727  0446520802            0\n",
              "3   276729  052165615X            3\n",
              "4   276729  0521795028            6"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-d8d01a1f-701e-4355-b22b-7e397d59faf9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>Book-Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>276725</td>\n",
              "      <td>034545104X</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>276726</td>\n",
              "      <td>0155061224</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>276727</td>\n",
              "      <td>0446520802</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>276729</td>\n",
              "      <td>052165615X</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>276729</td>\n",
              "      <td>0521795028</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d8d01a1f-701e-4355-b22b-7e397d59faf9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-27efee23-c970-46a8-a6b3-7682d7e4c3ec\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-27efee23-c970-46a8-a6b3-7682d7e4c3ec')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-27efee23-c970-46a8-a6b3-7682d7e4c3ec button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d8d01a1f-701e-4355-b22b-7e397d59faf9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d8d01a1f-701e-4355-b22b-7e397d59faf9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Menghitung jumlah rating, menggabungkannya berdasarkan ISBN, dan kemudian diurutkan mulai dari rating maksimal\n"
      ],
      "metadata": {
        "id": "uDHtoHoS4YEG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ratings.groupby('ISBN').sum().sort_values(by='Book-Rating', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "HG8HeGH84hm_",
        "outputId": "5ad25f68-83a4-4371-e79d-d7cc13d3fad3"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              User-ID  Book-Rating\n",
              "ISBN                              \n",
              "0316666343  182243428         5787\n",
              "0385504209  120940891         4108\n",
              "0312195516   99657290         3134\n",
              "0679781587   90867127         2800\n",
              "059035342X   79852541         2798\n",
              "...               ...          ...\n",
              "082176690      101209            0\n",
              "0394724844      63394            0\n",
              "0821766937     907448            0\n",
              "0821766945     213152            0\n",
              "0930330668     198711            0\n",
              "\n",
              "[340556 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-759a46f2-437a-4fb8-8ab2-e24e83bb286e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>Book-Rating</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ISBN</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0316666343</th>\n",
              "      <td>182243428</td>\n",
              "      <td>5787</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0385504209</th>\n",
              "      <td>120940891</td>\n",
              "      <td>4108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0312195516</th>\n",
              "      <td>99657290</td>\n",
              "      <td>3134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0679781587</th>\n",
              "      <td>90867127</td>\n",
              "      <td>2800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>059035342X</th>\n",
              "      <td>79852541</td>\n",
              "      <td>2798</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>082176690</th>\n",
              "      <td>101209</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0394724844</th>\n",
              "      <td>63394</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0821766937</th>\n",
              "      <td>907448</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0821766945</th>\n",
              "      <td>213152</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0930330668</th>\n",
              "      <td>198711</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>340556 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-759a46f2-437a-4fb8-8ab2-e24e83bb286e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-8bf4c8c3-f09a-46e9-ac5b-9ea1ff3c8c2d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8bf4c8c3-f09a-46e9-ac5b-9ea1ff3c8c2d')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-8bf4c8c3-f09a-46e9-ac5b-9ea1ff3c8c2d button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-759a46f2-437a-4fb8-8ab2-e24e83bb286e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-759a46f2-437a-4fb8-8ab2-e24e83bb286e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat distribusi statistik pada variabel ratings"
      ],
      "metadata": {
        "id": "XcR6CJpz03wF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ratings.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "hkhwt74P07a9",
        "outputId": "e9a0331f-a9b9-4763-9f32-57224b989f7d"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            User-ID   Book-Rating\n",
              "count  1.149780e+06  1.149780e+06\n",
              "mean   1.403864e+05  2.866950e+00\n",
              "std    8.056228e+04  3.854184e+00\n",
              "min    2.000000e+00  0.000000e+00\n",
              "25%    7.034500e+04  0.000000e+00\n",
              "50%    1.410100e+05  0.000000e+00\n",
              "75%    2.110280e+05  7.000000e+00\n",
              "max    2.788540e+05  1.000000e+01"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-11e42b39-608e-408a-be1f-72c19eb3df35\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>Book-Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.149780e+06</td>\n",
              "      <td>1.149780e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.403864e+05</td>\n",
              "      <td>2.866950e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>8.056228e+04</td>\n",
              "      <td>3.854184e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.034500e+04</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.410100e+05</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2.110280e+05</td>\n",
              "      <td>7.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2.788540e+05</td>\n",
              "      <td>1.000000e+01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-11e42b39-608e-408a-be1f-72c19eb3df35')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-fa710c60-12ed-446c-b1ad-1357bd392752\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fa710c60-12ed-446c-b1ad-1357bd392752')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-fa710c60-12ed-446c-b1ad-1357bd392752 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-11e42b39-608e-408a-be1f-72c19eb3df35 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-11e42b39-608e-408a-be1f-72c19eb3df35');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat informasi pada variabel users\n"
      ],
      "metadata": {
        "id": "DWaLF3vHuAJV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "users.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0xuWE2UFp8E2",
        "outputId": "39eef492-bc26-4308-b311-263e638a00c0"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 278858 entries, 0 to 278857\n",
            "Data columns (total 3 columns):\n",
            " #   Column    Non-Null Count   Dtype  \n",
            "---  ------    --------------   -----  \n",
            " 0   User-ID   278858 non-null  int64  \n",
            " 1   Location  278858 non-null  object \n",
            " 2   Age       168096 non-null  float64\n",
            "dtypes: float64(1), int64(1), object(1)\n",
            "memory usage: 6.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat ada berapa banyak entri pengguna yang unik berdasarkan User-ID"
      ],
      "metadata": {
        "id": "gt0M5P1-uFW1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Jumlah data profil pengguna: ', len(users['User-ID'].unique()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YZy_Lo05qHyu",
        "outputId": "9e06ba38-079e-4dc6-f8b3-df7575d06927"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah data profil pengguna:  278858\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mengecek missing value pada variabel users dengan fungsi isnull()"
      ],
      "metadata": {
        "id": "aSeEz7m-2iG2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "users.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9BbVMXsO2nee",
        "outputId": "932f90d9-b9bf-42da-a551-4ff18f43cc9f"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User-ID          0\n",
              "Location         0\n",
              "Age         110762\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat dataframe pada variabel users menggunakan fungsi head()"
      ],
      "metadata": {
        "id": "ejSYinC81fx-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "users.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "aVuPMluQ1iY9",
        "outputId": "9a492e8d-3d0e-4aa0-e55c-3702f58f918b"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   User-ID                            Location   Age\n",
              "0        1                  nyc, new york, usa   NaN\n",
              "1        2           stockton, california, usa  18.0\n",
              "2        3     moscow, yukon territory, russia   NaN\n",
              "3        4           porto, v.n.gaia, portugal  17.0\n",
              "4        5  farnborough, hants, united kingdom   NaN"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-a344f344-3c9e-4f92-90fb-d745e4d2f840\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>Location</th>\n",
              "      <th>Age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>nyc, new york, usa</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>stockton, california, usa</td>\n",
              "      <td>18.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>moscow, yukon territory, russia</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>porto, v.n.gaia, portugal</td>\n",
              "      <td>17.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>farnborough, hants, united kingdom</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a344f344-3c9e-4f92-90fb-d745e4d2f840')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-ea573efc-7c0a-437f-82f9-69e239da0c42\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea573efc-7c0a-437f-82f9-69e239da0c42')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-ea573efc-7c0a-437f-82f9-69e239da0c42 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a344f344-3c9e-4f92-90fb-d745e4d2f840 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a344f344-3c9e-4f92-90fb-d745e4d2f840');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Preprocessing"
      ],
      "metadata": {
        "id": "NfT3JxHJ4bw5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Menggabungkan Data"
      ],
      "metadata": {
        "id": "cSBbBCDX5Cxg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mendefinisikan variabel all_book_rate dengan variabel rating yang telah kita ketahui sebelumnya."
      ],
      "metadata": {
        "id": "hTY1sHTt5SG4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "all_book_rate = ratings\n",
        "all_book_rate"
      ],
      "metadata": {
        "id": "VurD9wLlqZOI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "336fde6a-aca2-4cfb-80ca-440cca681e4d"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         User-ID         ISBN  Book-Rating\n",
              "0         276725   034545104X            0\n",
              "1         276726   0155061224            5\n",
              "2         276727   0446520802            0\n",
              "3         276729   052165615X            3\n",
              "4         276729   0521795028            6\n",
              "...          ...          ...          ...\n",
              "1149775   276704   1563526298            9\n",
              "1149776   276706   0679447156            0\n",
              "1149777   276709   0515107662           10\n",
              "1149778   276721   0590442449           10\n",
              "1149779   276723  05162443314            8\n",
              "\n",
              "[1149780 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-c62c612f-a634-497d-b60f-58306062fa57\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>Book-Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>276725</td>\n",
              "      <td>034545104X</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>276726</td>\n",
              "      <td>0155061224</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>276727</td>\n",
              "      <td>0446520802</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>276729</td>\n",
              "      <td>052165615X</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>276729</td>\n",
              "      <td>0521795028</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149775</th>\n",
              "      <td>276704</td>\n",
              "      <td>1563526298</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149776</th>\n",
              "      <td>276706</td>\n",
              "      <td>0679447156</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149777</th>\n",
              "      <td>276709</td>\n",
              "      <td>0515107662</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149778</th>\n",
              "      <td>276721</td>\n",
              "      <td>0590442449</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149779</th>\n",
              "      <td>276723</td>\n",
              "      <td>05162443314</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1149780 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c62c612f-a634-497d-b60f-58306062fa57')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-09cfdfb0-afc4-48f5-823b-cc0dc6a5ec22\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09cfdfb0-afc4-48f5-823b-cc0dc6a5ec22')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-09cfdfb0-afc4-48f5-823b-cc0dc6a5ec22 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c62c612f-a634-497d-b60f-58306062fa57 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c62c612f-a634-497d-b60f-58306062fa57');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Menggabungkan all_book_rate dengan dataframe books berdasarkan placeID"
      ],
      "metadata": {
        "id": "6R3eclxm5a-O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Menggabungkan all_book_rate dengan dataframe books berdasarkan placeID\n",
        "all_book = pd.merge(all_book_rate, books[['ISBN',\t'Book-Title', 'Book-Author']], on='ISBN', how='left')\n",
        "\n",
        "# Print dataframe all_book\n",
        "all_book"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "jjPczLET5L4N",
        "outputId": "d1f69786-8bfc-4055-950c-5fdd8b9a5253"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         User-ID         ISBN  Book-Rating  \\\n",
              "0         276725   034545104X            0   \n",
              "1         276726   0155061224            5   \n",
              "2         276727   0446520802            0   \n",
              "3         276729   052165615X            3   \n",
              "4         276729   0521795028            6   \n",
              "...          ...          ...          ...   \n",
              "1149775   276704   1563526298            9   \n",
              "1149776   276706   0679447156            0   \n",
              "1149777   276709   0515107662           10   \n",
              "1149778   276721   0590442449           10   \n",
              "1149779   276723  05162443314            8   \n",
              "\n",
              "                                                Book-Title        Book-Author  \n",
              "0                                     Flesh Tones: A Novel         M. J. Rose  \n",
              "1                                         Rites of Passage         Judith Rae  \n",
              "2                                             The Notebook    Nicholas Sparks  \n",
              "3                                           Help!: Level 1      Philip Prowse  \n",
              "4        The Amsterdam Connection : Level 4 (Cambridge ...        Sue Leather  \n",
              "...                                                    ...                ...  \n",
              "1149775  Get Clark Smart : The Ultimate Guide for the S...       Clark Howard  \n",
              "1149776  Eight Weeks to Optimum Health: A Proven Progra...        Andrew Weil  \n",
              "1149777   The Sherbrooke Bride (Bride Trilogy (Paperback))  Catherine Coulter  \n",
              "1149778                                  Fourth Grade Rats     Jerry Spinelli  \n",
              "1149779                                                NaN                NaN  \n",
              "\n",
              "[1149780 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-0162e00f-9aff-41b0-9b30-e753572be359\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>Book-Rating</th>\n",
              "      <th>Book-Title</th>\n",
              "      <th>Book-Author</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>276725</td>\n",
              "      <td>034545104X</td>\n",
              "      <td>0</td>\n",
              "      <td>Flesh Tones: A Novel</td>\n",
              "      <td>M. J. Rose</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>276726</td>\n",
              "      <td>0155061224</td>\n",
              "      <td>5</td>\n",
              "      <td>Rites of Passage</td>\n",
              "      <td>Judith Rae</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>276727</td>\n",
              "      <td>0446520802</td>\n",
              "      <td>0</td>\n",
              "      <td>The Notebook</td>\n",
              "      <td>Nicholas Sparks</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>276729</td>\n",
              "      <td>052165615X</td>\n",
              "      <td>3</td>\n",
              "      <td>Help!: Level 1</td>\n",
              "      <td>Philip Prowse</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>276729</td>\n",
              "      <td>0521795028</td>\n",
              "      <td>6</td>\n",
              "      <td>The Amsterdam Connection : Level 4 (Cambridge ...</td>\n",
              "      <td>Sue Leather</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149775</th>\n",
              "      <td>276704</td>\n",
              "      <td>1563526298</td>\n",
              "      <td>9</td>\n",
              "      <td>Get Clark Smart : The Ultimate Guide for the S...</td>\n",
              "      <td>Clark Howard</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149776</th>\n",
              "      <td>276706</td>\n",
              "      <td>0679447156</td>\n",
              "      <td>0</td>\n",
              "      <td>Eight Weeks to Optimum Health: A Proven Progra...</td>\n",
              "      <td>Andrew Weil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149777</th>\n",
              "      <td>276709</td>\n",
              "      <td>0515107662</td>\n",
              "      <td>10</td>\n",
              "      <td>The Sherbrooke Bride (Bride Trilogy (Paperback))</td>\n",
              "      <td>Catherine Coulter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149778</th>\n",
              "      <td>276721</td>\n",
              "      <td>0590442449</td>\n",
              "      <td>10</td>\n",
              "      <td>Fourth Grade Rats</td>\n",
              "      <td>Jerry Spinelli</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149779</th>\n",
              "      <td>276723</td>\n",
              "      <td>05162443314</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1149780 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0162e00f-9aff-41b0-9b30-e753572be359')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-29c142e3-44ba-4391-9bf4-7cabf02128e6\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29c142e3-44ba-4391-9bf4-7cabf02128e6')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-29c142e3-44ba-4391-9bf4-7cabf02128e6 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0162e00f-9aff-41b0-9b30-e753572be359 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0162e00f-9aff-41b0-9b30-e753572be359');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Preparation"
      ],
      "metadata": {
        "id": "AIz4PQDZ8tEX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mengecek missing value pada dataframe all_book\n",
        "\n"
      ],
      "metadata": {
        "id": "_O0s7HsT-OPw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "all_book.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KRK1rMrS8A9p",
        "outputId": "c41e0f6c-840f-4220-8b14-703632d59c11"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User-ID             0\n",
              "ISBN                0\n",
              "Book-Rating         0\n",
              "Book-Title     118644\n",
              "Book-Author    118645\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Membersihkan missing value dengan fungsi dropna()\n"
      ],
      "metadata": {
        "id": "bl-PN9dc-saP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "all_book_clean = all_book.dropna()\n",
        "all_book_clean"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "UIzHqY7P-n-G",
        "outputId": "fa5e7e5b-de80-4625-c002-a5fd87c61481"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         User-ID        ISBN  Book-Rating  \\\n",
              "0         276725  034545104X            0   \n",
              "1         276726  0155061224            5   \n",
              "2         276727  0446520802            0   \n",
              "3         276729  052165615X            3   \n",
              "4         276729  0521795028            6   \n",
              "...          ...         ...          ...   \n",
              "1149774   276704  0876044011            0   \n",
              "1149775   276704  1563526298            9   \n",
              "1149776   276706  0679447156            0   \n",
              "1149777   276709  0515107662           10   \n",
              "1149778   276721  0590442449           10   \n",
              "\n",
              "                                                Book-Title        Book-Author  \n",
              "0                                     Flesh Tones: A Novel         M. J. Rose  \n",
              "1                                         Rites of Passage         Judith Rae  \n",
              "2                                             The Notebook    Nicholas Sparks  \n",
              "3                                           Help!: Level 1      Philip Prowse  \n",
              "4        The Amsterdam Connection : Level 4 (Cambridge ...        Sue Leather  \n",
              "...                                                    ...                ...  \n",
              "1149774  Edgar Cayce on the Akashic Records: The Book o...  Kevin J. Todeschi  \n",
              "1149775  Get Clark Smart : The Ultimate Guide for the S...       Clark Howard  \n",
              "1149776  Eight Weeks to Optimum Health: A Proven Progra...        Andrew Weil  \n",
              "1149777   The Sherbrooke Bride (Bride Trilogy (Paperback))  Catherine Coulter  \n",
              "1149778                                  Fourth Grade Rats     Jerry Spinelli  \n",
              "\n",
              "[1031135 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-6f69a78c-ba83-43b5-96e0-b6ad25dc983b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>Book-Rating</th>\n",
              "      <th>Book-Title</th>\n",
              "      <th>Book-Author</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>276725</td>\n",
              "      <td>034545104X</td>\n",
              "      <td>0</td>\n",
              "      <td>Flesh Tones: A Novel</td>\n",
              "      <td>M. J. Rose</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>276726</td>\n",
              "      <td>0155061224</td>\n",
              "      <td>5</td>\n",
              "      <td>Rites of Passage</td>\n",
              "      <td>Judith Rae</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>276727</td>\n",
              "      <td>0446520802</td>\n",
              "      <td>0</td>\n",
              "      <td>The Notebook</td>\n",
              "      <td>Nicholas Sparks</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>276729</td>\n",
              "      <td>052165615X</td>\n",
              "      <td>3</td>\n",
              "      <td>Help!: Level 1</td>\n",
              "      <td>Philip Prowse</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>276729</td>\n",
              "      <td>0521795028</td>\n",
              "      <td>6</td>\n",
              "      <td>The Amsterdam Connection : Level 4 (Cambridge ...</td>\n",
              "      <td>Sue Leather</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149774</th>\n",
              "      <td>276704</td>\n",
              "      <td>0876044011</td>\n",
              "      <td>0</td>\n",
              "      <td>Edgar Cayce on the Akashic Records: The Book o...</td>\n",
              "      <td>Kevin J. Todeschi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149775</th>\n",
              "      <td>276704</td>\n",
              "      <td>1563526298</td>\n",
              "      <td>9</td>\n",
              "      <td>Get Clark Smart : The Ultimate Guide for the S...</td>\n",
              "      <td>Clark Howard</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149776</th>\n",
              "      <td>276706</td>\n",
              "      <td>0679447156</td>\n",
              "      <td>0</td>\n",
              "      <td>Eight Weeks to Optimum Health: A Proven Progra...</td>\n",
              "      <td>Andrew Weil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149777</th>\n",
              "      <td>276709</td>\n",
              "      <td>0515107662</td>\n",
              "      <td>10</td>\n",
              "      <td>The Sherbrooke Bride (Bride Trilogy (Paperback))</td>\n",
              "      <td>Catherine Coulter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149778</th>\n",
              "      <td>276721</td>\n",
              "      <td>0590442449</td>\n",
              "      <td>10</td>\n",
              "      <td>Fourth Grade Rats</td>\n",
              "      <td>Jerry Spinelli</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1031135 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f69a78c-ba83-43b5-96e0-b6ad25dc983b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-e0fc6648-c6cc-4737-a19b-a713443340fd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e0fc6648-c6cc-4737-a19b-a713443340fd')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-e0fc6648-c6cc-4737-a19b-a713443340fd button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6f69a78c-ba83-43b5-96e0-b6ad25dc983b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6f69a78c-ba83-43b5-96e0-b6ad25dc983b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mengecek kembali missing value pada variabel all_book_clean"
      ],
      "metadata": {
        "id": "o2PIEI_O-3uA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "all_book_clean.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xfS0da-E-yFV",
        "outputId": "0e084356-8fc1-4406-ce1e-da6540c056bd"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User-ID        0\n",
              "ISBN           0\n",
              "Book-Rating    0\n",
              "Book-Title     0\n",
              "Book-Author    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mengurutkan buku berdasarkan ISBN kemudian memasukkannya ke dalam variabel preparation"
      ],
      "metadata": {
        "id": "jcP_YAnM_TtI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "preparation = all_book_clean.sort_values('ISBN', ascending=True)\n",
        "preparation"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "m3EFjKFD-9Hj",
        "outputId": "5c7e55e9-6f6e-41d3-9fdf-65e99ebaed74"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         User-ID        ISBN  Book-Rating  \\\n",
              "703628    171118  0000913154            8   \n",
              "866078    209516  0001010565            0   \n",
              "357256     86123  0001010565            0   \n",
              "103677     23902  0001046438            9   \n",
              "807953    196149  0001046713            0   \n",
              "...          ...         ...          ...   \n",
              "1100731   264317  B000234N76            0   \n",
              "423108    100906  B000234NC6            0   \n",
              "419279    100088  B00029DGGO            0   \n",
              "743545    179791  B0002JV9PY            0   \n",
              "743546    179791  B0002K6K8O            0   \n",
              "\n",
              "                                                Book-Title  \\\n",
              "703628   The Way Things Work: An Illustrated Encycloped...   \n",
              "866078                                     Mog's Christmas   \n",
              "357256                                     Mog's Christmas   \n",
              "103677                                                Liar   \n",
              "807953                        Twopence to Cross the Mersey   \n",
              "...                                                    ...   \n",
              "1100731                                     Falling Angels   \n",
              "423108   It Must've Been Something I Ate: The Return of...   \n",
              "419279                         Good Wife Strikes Back, The   \n",
              "743545                                The Blockade Runners   \n",
              "743546                                The Underground City   \n",
              "\n",
              "                           Book-Author  \n",
              "703628   C. van Amerongen (translator)  \n",
              "866078                     Judith Kerr  \n",
              "357256                     Judith Kerr  \n",
              "103677                     Stephen Fry  \n",
              "807953                 Helen Forrester  \n",
              "...                                ...  \n",
              "1100731                Tracy Chevalier  \n",
              "423108             Jeffrey Steingarten  \n",
              "419279                Elizabeth Buchan  \n",
              "743545                     Jules Verne  \n",
              "743546                     Jules Verne  \n",
              "\n",
              "[1031135 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-937c0616-7260-4bc5-b5d5-13c001f50e32\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>Book-Rating</th>\n",
              "      <th>Book-Title</th>\n",
              "      <th>Book-Author</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>703628</th>\n",
              "      <td>171118</td>\n",
              "      <td>0000913154</td>\n",
              "      <td>8</td>\n",
              "      <td>The Way Things Work: An Illustrated Encycloped...</td>\n",
              "      <td>C. van Amerongen (translator)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>866078</th>\n",
              "      <td>209516</td>\n",
              "      <td>0001010565</td>\n",
              "      <td>0</td>\n",
              "      <td>Mog's Christmas</td>\n",
              "      <td>Judith Kerr</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>357256</th>\n",
              "      <td>86123</td>\n",
              "      <td>0001010565</td>\n",
              "      <td>0</td>\n",
              "      <td>Mog's Christmas</td>\n",
              "      <td>Judith Kerr</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103677</th>\n",
              "      <td>23902</td>\n",
              "      <td>0001046438</td>\n",
              "      <td>9</td>\n",
              "      <td>Liar</td>\n",
              "      <td>Stephen Fry</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>807953</th>\n",
              "      <td>196149</td>\n",
              "      <td>0001046713</td>\n",
              "      <td>0</td>\n",
              "      <td>Twopence to Cross the Mersey</td>\n",
              "      <td>Helen Forrester</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1100731</th>\n",
              "      <td>264317</td>\n",
              "      <td>B000234N76</td>\n",
              "      <td>0</td>\n",
              "      <td>Falling Angels</td>\n",
              "      <td>Tracy Chevalier</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>423108</th>\n",
              "      <td>100906</td>\n",
              "      <td>B000234NC6</td>\n",
              "      <td>0</td>\n",
              "      <td>It Must've Been Something I Ate: The Return of...</td>\n",
              "      <td>Jeffrey Steingarten</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>419279</th>\n",
              "      <td>100088</td>\n",
              "      <td>B00029DGGO</td>\n",
              "      <td>0</td>\n",
              "      <td>Good Wife Strikes Back, The</td>\n",
              "      <td>Elizabeth Buchan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>743545</th>\n",
              "      <td>179791</td>\n",
              "      <td>B0002JV9PY</td>\n",
              "      <td>0</td>\n",
              "      <td>The Blockade Runners</td>\n",
              "      <td>Jules Verne</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>743546</th>\n",
              "      <td>179791</td>\n",
              "      <td>B0002K6K8O</td>\n",
              "      <td>0</td>\n",
              "      <td>The Underground City</td>\n",
              "      <td>Jules Verne</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1031135 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-937c0616-7260-4bc5-b5d5-13c001f50e32')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-1f30403f-8075-4b3f-8670-6621c2b847ee\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f30403f-8075-4b3f-8670-6621c2b847ee')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-1f30403f-8075-4b3f-8670-6621c2b847ee button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-937c0616-7260-4bc5-b5d5-13c001f50e32 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-937c0616-7260-4bc5-b5d5-13c001f50e32');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Kita hanya akan menggunakan data unik untuk dimasukkan ke dalam proses pemodelan. Oleh karena itu, kita perlu menghapus data yang duplikat dengan fungsi drop_duplicates().\n",
        "* Membuang data duplikat berdasarkan ISBN.\n"
      ],
      "metadata": {
        "id": "TM_5qGp_AXHB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Membuang data duplikat pada variabel preparation\n",
        "preparation = preparation.drop_duplicates('ISBN')\n",
        "preparation"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "Lm5Ex4Zy_dbp",
        "outputId": "8c0c8b15-97bc-4dec-a8a3-d193a5e0101a"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         User-ID        ISBN  Book-Rating  \\\n",
              "703628    171118  0000913154            8   \n",
              "866078    209516  0001010565            0   \n",
              "103677     23902  0001046438            9   \n",
              "807953    196149  0001046713            0   \n",
              "103678     23902  000104687X            6   \n",
              "...          ...         ...          ...   \n",
              "1100731   264317  B000234N76            0   \n",
              "423108    100906  B000234NC6            0   \n",
              "419279    100088  B00029DGGO            0   \n",
              "743545    179791  B0002JV9PY            0   \n",
              "743546    179791  B0002K6K8O            0   \n",
              "\n",
              "                                                Book-Title  \\\n",
              "703628   The Way Things Work: An Illustrated Encycloped...   \n",
              "866078                                     Mog's Christmas   \n",
              "103677                                                Liar   \n",
              "807953                        Twopence to Cross the Mersey   \n",
              "103678   T.S. Eliot Reading \\The Wasteland\\\" and Other ...   \n",
              "...                                                    ...   \n",
              "1100731                                     Falling Angels   \n",
              "423108   It Must've Been Something I Ate: The Return of...   \n",
              "419279                         Good Wife Strikes Back, The   \n",
              "743545                                The Blockade Runners   \n",
              "743546                                The Underground City   \n",
              "\n",
              "                           Book-Author  \n",
              "703628   C. van Amerongen (translator)  \n",
              "866078                     Judith Kerr  \n",
              "103677                     Stephen Fry  \n",
              "807953                 Helen Forrester  \n",
              "103678                      T.S. Eliot  \n",
              "...                                ...  \n",
              "1100731                Tracy Chevalier  \n",
              "423108             Jeffrey Steingarten  \n",
              "419279                Elizabeth Buchan  \n",
              "743545                     Jules Verne  \n",
              "743546                     Jules Verne  \n",
              "\n",
              "[270150 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-093ae64c-683f-4c2a-929b-2936ae3936e5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>Book-Rating</th>\n",
              "      <th>Book-Title</th>\n",
              "      <th>Book-Author</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>703628</th>\n",
              "      <td>171118</td>\n",
              "      <td>0000913154</td>\n",
              "      <td>8</td>\n",
              "      <td>The Way Things Work: An Illustrated Encycloped...</td>\n",
              "      <td>C. van Amerongen (translator)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>866078</th>\n",
              "      <td>209516</td>\n",
              "      <td>0001010565</td>\n",
              "      <td>0</td>\n",
              "      <td>Mog's Christmas</td>\n",
              "      <td>Judith Kerr</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103677</th>\n",
              "      <td>23902</td>\n",
              "      <td>0001046438</td>\n",
              "      <td>9</td>\n",
              "      <td>Liar</td>\n",
              "      <td>Stephen Fry</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>807953</th>\n",
              "      <td>196149</td>\n",
              "      <td>0001046713</td>\n",
              "      <td>0</td>\n",
              "      <td>Twopence to Cross the Mersey</td>\n",
              "      <td>Helen Forrester</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103678</th>\n",
              "      <td>23902</td>\n",
              "      <td>000104687X</td>\n",
              "      <td>6</td>\n",
              "      <td>T.S. Eliot Reading \\The Wasteland\\\" and Other ...</td>\n",
              "      <td>T.S. Eliot</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1100731</th>\n",
              "      <td>264317</td>\n",
              "      <td>B000234N76</td>\n",
              "      <td>0</td>\n",
              "      <td>Falling Angels</td>\n",
              "      <td>Tracy Chevalier</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>423108</th>\n",
              "      <td>100906</td>\n",
              "      <td>B000234NC6</td>\n",
              "      <td>0</td>\n",
              "      <td>It Must've Been Something I Ate: The Return of...</td>\n",
              "      <td>Jeffrey Steingarten</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>419279</th>\n",
              "      <td>100088</td>\n",
              "      <td>B00029DGGO</td>\n",
              "      <td>0</td>\n",
              "      <td>Good Wife Strikes Back, The</td>\n",
              "      <td>Elizabeth Buchan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>743545</th>\n",
              "      <td>179791</td>\n",
              "      <td>B0002JV9PY</td>\n",
              "      <td>0</td>\n",
              "      <td>The Blockade Runners</td>\n",
              "      <td>Jules Verne</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>743546</th>\n",
              "      <td>179791</td>\n",
              "      <td>B0002K6K8O</td>\n",
              "      <td>0</td>\n",
              "      <td>The Underground City</td>\n",
              "      <td>Jules Verne</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>270150 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-093ae64c-683f-4c2a-929b-2936ae3936e5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-21ee844f-e388-40e6-b56b-e42aa4f60704\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-21ee844f-e388-40e6-b56b-e42aa4f60704')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-21ee844f-e388-40e6-b56b-e42aa4f60704 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-093ae64c-683f-4c2a-929b-2936ae3936e5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-093ae64c-683f-4c2a-929b-2936ae3936e5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melakukan konversi data series menjadi list menggunakan fungsi tolist() dari library numpy."
      ],
      "metadata": {
        "id": "ygqKhrmbA1IY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengonversi data series ‘ISBN’ menjadi dalam bentuk list\n",
        "book_id = preparation['ISBN'].tolist()\n",
        "\n",
        "# Mengonversi data series ‘Book-Title’ menjadi dalam bentuk list\n",
        "book_title = preparation['Book-Title'].tolist()\n",
        "\n",
        "# Mengonversi data series ‘Book-Author’ menjadi dalam bentuk list\n",
        "book_author = preparation['Book-Author'].tolist()\n",
        "\n",
        "print(len(book_id))\n",
        "print(len(book_title))\n",
        "print(len(book_author))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BVVs3dfEA3w3",
        "outputId": "eb927ba0-c9b6-41dc-ccf0-fa9ac62e2590"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "270150\n",
            "270150\n",
            "270150\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   membuat dictionary untuk menentukan pasangan key-value pada data book_id, book_name, dan book_author"
      ],
      "metadata": {
        "id": "JlsZ_D3qBpdB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "book_new = pd.DataFrame({\n",
        "    'id': book_id,\n",
        "    'book_title': book_title,\n",
        "    'book_author': book_author\n",
        "})\n",
        "\n",
        "book_new"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "3db8eBFTBj_c",
        "outputId": "4109a891-a624-46c4-d7c7-d1d0e65062d8"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                id                                         book_title  \\\n",
              "0       0000913154  The Way Things Work: An Illustrated Encycloped...   \n",
              "1       0001010565                                    Mog's Christmas   \n",
              "2       0001046438                                               Liar   \n",
              "3       0001046713                       Twopence to Cross the Mersey   \n",
              "4       000104687X  T.S. Eliot Reading \\The Wasteland\\\" and Other ...   \n",
              "...            ...                                                ...   \n",
              "270145  B000234N76                                     Falling Angels   \n",
              "270146  B000234NC6  It Must've Been Something I Ate: The Return of...   \n",
              "270147  B00029DGGO                        Good Wife Strikes Back, The   \n",
              "270148  B0002JV9PY                               The Blockade Runners   \n",
              "270149  B0002K6K8O                               The Underground City   \n",
              "\n",
              "                          book_author  \n",
              "0       C. van Amerongen (translator)  \n",
              "1                         Judith Kerr  \n",
              "2                         Stephen Fry  \n",
              "3                     Helen Forrester  \n",
              "4                          T.S. Eliot  \n",
              "...                               ...  \n",
              "270145                Tracy Chevalier  \n",
              "270146            Jeffrey Steingarten  \n",
              "270147               Elizabeth Buchan  \n",
              "270148                    Jules Verne  \n",
              "270149                    Jules Verne  \n",
              "\n",
              "[270150 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-5ba13eaf-3419-4770-a842-11e783901a5c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>book_title</th>\n",
              "      <th>book_author</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0000913154</td>\n",
              "      <td>The Way Things Work: An Illustrated Encycloped...</td>\n",
              "      <td>C. van Amerongen (translator)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0001010565</td>\n",
              "      <td>Mog's Christmas</td>\n",
              "      <td>Judith Kerr</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0001046438</td>\n",
              "      <td>Liar</td>\n",
              "      <td>Stephen Fry</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0001046713</td>\n",
              "      <td>Twopence to Cross the Mersey</td>\n",
              "      <td>Helen Forrester</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>000104687X</td>\n",
              "      <td>T.S. Eliot Reading \\The Wasteland\\\" and Other ...</td>\n",
              "      <td>T.S. Eliot</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270145</th>\n",
              "      <td>B000234N76</td>\n",
              "      <td>Falling Angels</td>\n",
              "      <td>Tracy Chevalier</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270146</th>\n",
              "      <td>B000234NC6</td>\n",
              "      <td>It Must've Been Something I Ate: The Return of...</td>\n",
              "      <td>Jeffrey Steingarten</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270147</th>\n",
              "      <td>B00029DGGO</td>\n",
              "      <td>Good Wife Strikes Back, The</td>\n",
              "      <td>Elizabeth Buchan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270148</th>\n",
              "      <td>B0002JV9PY</td>\n",
              "      <td>The Blockade Runners</td>\n",
              "      <td>Jules Verne</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270149</th>\n",
              "      <td>B0002K6K8O</td>\n",
              "      <td>The Underground City</td>\n",
              "      <td>Jules Verne</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>270150 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ba13eaf-3419-4770-a842-11e783901a5c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-b8bd23ae-bfde-41df-86ef-4c88c45170d4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b8bd23ae-bfde-41df-86ef-4c88c45170d4')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-b8bd23ae-bfde-41df-86ef-4c88c45170d4 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5ba13eaf-3419-4770-a842-11e783901a5c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5ba13eaf-3419-4770-a842-11e783901a5c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Development dengan Content Based Filtering"
      ],
      "metadata": {
        "id": "YU_xi5KGCNg4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## TF-IDF Vectorizer"
      ],
      "metadata": {
        "id": "qYk8lvVTFYuf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Untuk meringankan beban komputasi, hanya diambil sejumlah data sampel (n) dari total dataset yang dimiliki\n"
      ],
      "metadata": {
        "id": "zO0-dq_nHQPB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# menentukan jumlah sampel data yang ingin diambil\n",
        "sample = 5000\n",
        "\n",
        "book_new_sample = book_new.sample(n=sample)"
      ],
      "metadata": {
        "id": "GvQ8TfwuHTsy"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mengecek lagi data yang kita miliki dan assign dataframe dari tahap sebelumnya ke dalam variabel data"
      ],
      "metadata": {
        "id": "K5iL3xiBDAkW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = book_new_sample\n",
        "data.sample(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "HidNy8OsCD76",
        "outputId": "b14c939e-2aa3-4df0-ac68-7da06d1ab5bf"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                id                                         book_title  \\\n",
              "144516  0679737898  Parliament of Whores: A Lone Humorist Attempts...   \n",
              "176775  0806902728                Guinness Book of World Records 1986   \n",
              "37342   0312989873        Deadly Promise (A Francesca Cahill Romance)   \n",
              "74286   0394729382                                Mickelsson's Ghosts   \n",
              "30176   031023493X                             Man in the Mirror, The   \n",
              "\n",
              "             book_author  \n",
              "144516    P. J. O'Rourke  \n",
              "176775  Norris McWhirter  \n",
              "37342       Brenda Joyce  \n",
              "74286       John Gardner  \n",
              "30176     Patrick Morley  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-0466f5ce-9015-4750-bbe3-a7a95aa715dc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>book_title</th>\n",
              "      <th>book_author</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>144516</th>\n",
              "      <td>0679737898</td>\n",
              "      <td>Parliament of Whores: A Lone Humorist Attempts...</td>\n",
              "      <td>P. J. O'Rourke</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176775</th>\n",
              "      <td>0806902728</td>\n",
              "      <td>Guinness Book of World Records 1986</td>\n",
              "      <td>Norris McWhirter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37342</th>\n",
              "      <td>0312989873</td>\n",
              "      <td>Deadly Promise (A Francesca Cahill Romance)</td>\n",
              "      <td>Brenda Joyce</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74286</th>\n",
              "      <td>0394729382</td>\n",
              "      <td>Mickelsson's Ghosts</td>\n",
              "      <td>John Gardner</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30176</th>\n",
              "      <td>031023493X</td>\n",
              "      <td>Man in the Mirror, The</td>\n",
              "      <td>Patrick Morley</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0466f5ce-9015-4750-bbe3-a7a95aa715dc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-fc137c00-46d0-486a-8348-7955841885b8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc137c00-46d0-486a-8348-7955841885b8')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-fc137c00-46d0-486a-8348-7955841885b8 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0466f5ce-9015-4750-bbe3-a7a95aa715dc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0466f5ce-9015-4750-bbe3-a7a95aa715dc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Menggunakan fungsi tfidfvectorizer() dari library sklearn."
      ],
      "metadata": {
        "id": "n9GTdhC_DMrG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "# Inisialisasi TfidfVectorizer\n",
        "tf = TfidfVectorizer()\n",
        "\n",
        "# Melakukan perhitungan idf pada data book_author\n",
        "tf.fit(data['book_author'])\n",
        "\n",
        "# Mapping array dari fitur index integer ke fitur nama\n",
        "tf.get_feature_names_out()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qkrGIYdDDFGT",
        "outputId": "2fb189fb-c148-4968-e7f5-3ae400a2fd7a"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['aaron', 'abbie', 'abbot', ..., 'â¼nther', 'â¼ter', 'â¼tz'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melakukan fit dan transformasi ke dalam bentuk matriks."
      ],
      "metadata": {
        "id": "v8Ehmy9AEQJk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Melakukan fit lalu ditransformasikan ke bentuk matrix\n",
        "tfidf_matrix = tf.fit_transform(data['book_author'])\n",
        "\n",
        "# Melihat ukuran matrix tfidf\n",
        "tfidf_matrix.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X62l1GGrEJtH",
        "outputId": "9cf65b2e-7171-4a10-ebf5-af4975bee653"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5000, 4707)"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Menghasilkan vektor tf-idf dalam bentuk matriks menggunakan fungsi todense()."
      ],
      "metadata": {
        "id": "HUfHdJucEx9I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()\n",
        "tfidf_matrix.todense()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-d-8I6wgEUk_",
        "outputId": "594c1296-248b-4b73-f0c8-ff28bfd3df1c"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "matrix([[0., 0., 0., ..., 0., 0., 0.],\n",
              "        [0., 0., 0., ..., 0., 0., 0.],\n",
              "        [0., 0., 0., ..., 0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0., ..., 0., 0., 0.],\n",
              "        [0., 0., 0., ..., 0., 0., 0.],\n",
              "        [0., 0., 0., ..., 0., 0., 0.]])"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Membuat dataframe untuk melihat tf-idf matrix\n"
      ],
      "metadata": {
        "id": "N-vwzEpVFBp4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Membuat dataframe untuk melihat tf-idf matrix\n",
        "# Kolom diisi dengan jenis masakan\n",
        "# Baris diisi dengan nama resto\n",
        "\n",
        "pd.DataFrame(\n",
        "    tfidf_matrix.todense(),\n",
        "    columns=tf.get_feature_names_out(),\n",
        "    index=data.book_title\n",
        ").sample(22, axis=1).sample(10, axis=0)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 817
        },
        "id": "9PxiPNGUE6Rl",
        "outputId": "1d40bb2f-790e-498d-cce2-f0da75ac89ec"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                    schinharl  cindy  dyer  \\\n",
              "book_title                                                                   \n",
              "White Hotel                                               0.0    0.0   0.0   \n",
              "Horsefeathers and other curious words                     0.0    0.0   0.0   \n",
              "Musicians and Watchmakers (Discoveries)                   0.0    0.0   0.0   \n",
              "My Life as a Fake                                         0.0    0.0   0.0   \n",
              "The Myth of the Great War : A New Military Hist...        0.0    0.0   0.0   \n",
              "Kittens on Vacation                                       0.0    0.0   0.0   \n",
              "The Complete Planning Guide for Microsoft Proje...        0.0    0.0   0.0   \n",
              "Streets of Fire                                           0.0    0.0   0.0   \n",
              "To Love Again                                             0.0    0.0   0.0   \n",
              "Hellion                                                   0.0    0.0   0.0   \n",
              "\n",
              "                                                    mashima  catling  reese  \\\n",
              "book_title                                                                    \n",
              "White Hotel                                             0.0      0.0    0.0   \n",
              "Horsefeathers and other curious words                   0.0      0.0    0.0   \n",
              "Musicians and Watchmakers (Discoveries)                 0.0      0.0    0.0   \n",
              "My Life as a Fake                                       0.0      0.0    0.0   \n",
              "The Myth of the Great War : A New Military Hist...      0.0      0.0    0.0   \n",
              "Kittens on Vacation                                     0.0      0.0    0.0   \n",
              "The Complete Planning Guide for Microsoft Proje...      0.0      0.0    0.0   \n",
              "Streets of Fire                                         0.0      0.0    0.0   \n",
              "To Love Again                                           0.0      0.0    0.0   \n",
              "Hellion                                                 0.0      0.0    0.0   \n",
              "\n",
              "                                                    glassman  shiva  margo  \\\n",
              "book_title                                                                   \n",
              "White Hotel                                              0.0    0.0    0.0   \n",
              "Horsefeathers and other curious words                    0.0    0.0    0.0   \n",
              "Musicians and Watchmakers (Discoveries)                  0.0    0.0    0.0   \n",
              "My Life as a Fake                                        0.0    0.0    0.0   \n",
              "The Myth of the Great War : A New Military Hist...       0.0    0.0    0.0   \n",
              "Kittens on Vacation                                      0.0    0.0    0.0   \n",
              "The Complete Planning Guide for Microsoft Proje...       0.0    0.0    0.0   \n",
              "Streets of Fire                                          0.0    0.0    0.0   \n",
              "To Love Again                                            0.0    0.0    0.0   \n",
              "Hellion                                                  0.0    0.0    0.0   \n",
              "\n",
              "                                                    ustinov  ...  andrea  \\\n",
              "book_title                                                   ...           \n",
              "White Hotel                                             0.0  ...     0.0   \n",
              "Horsefeathers and other curious words                   0.0  ...     0.0   \n",
              "Musicians and Watchmakers (Discoveries)                 0.0  ...     0.0   \n",
              "My Life as a Fake                                       0.0  ...     0.0   \n",
              "The Myth of the Great War : A New Military Hist...      0.0  ...     0.0   \n",
              "Kittens on Vacation                                     0.0  ...     0.0   \n",
              "The Complete Planning Guide for Microsoft Proje...      0.0  ...     0.0   \n",
              "Streets of Fire                                         0.0  ...     0.0   \n",
              "To Love Again                                           0.0  ...     0.0   \n",
              "Hellion                                                 0.0  ...     0.0   \n",
              "\n",
              "                                                    rajneesh  riboud  fagan  \\\n",
              "book_title                                                                    \n",
              "White Hotel                                              0.0     0.0    0.0   \n",
              "Horsefeathers and other curious words                    0.0     0.0    0.0   \n",
              "Musicians and Watchmakers (Discoveries)                  0.0     0.0    0.0   \n",
              "My Life as a Fake                                        0.0     0.0    0.0   \n",
              "The Myth of the Great War : A New Military Hist...       0.0     0.0    0.0   \n",
              "Kittens on Vacation                                      0.0     0.0    0.0   \n",
              "The Complete Planning Guide for Microsoft Proje...       0.0     0.0    0.0   \n",
              "Streets of Fire                                          0.0     0.0    0.0   \n",
              "To Love Again                                            0.0     0.0    0.0   \n",
              "Hellion                                                  0.0     0.0    0.0   \n",
              "\n",
              "                                                    slyke  putney  wilburn  \\\n",
              "book_title                                                                   \n",
              "White Hotel                                           0.0     0.0      0.0   \n",
              "Horsefeathers and other curious words                 0.0     0.0      0.0   \n",
              "Musicians and Watchmakers (Discoveries)               0.0     0.0      0.0   \n",
              "My Life as a Fake                                     0.0     0.0      0.0   \n",
              "The Myth of the Great War : A New Military Hist...    0.0     0.0      0.0   \n",
              "Kittens on Vacation                                   0.0     0.0      0.0   \n",
              "The Complete Planning Guide for Microsoft Proje...    0.0     0.0      0.0   \n",
              "Streets of Fire                                       0.0     0.0      0.0   \n",
              "To Love Again                                         0.0     0.0      0.0   \n",
              "Hellion                                               0.0     0.0      0.0   \n",
              "\n",
              "                                                    cristina  chaucer  \\\n",
              "book_title                                                              \n",
              "White Hotel                                              0.0      0.0   \n",
              "Horsefeathers and other curious words                    0.0      0.0   \n",
              "Musicians and Watchmakers (Discoveries)                  0.0      0.0   \n",
              "My Life as a Fake                                        0.0      0.0   \n",
              "The Myth of the Great War : A New Military Hist...       0.0      0.0   \n",
              "Kittens on Vacation                                      0.0      0.0   \n",
              "The Complete Planning Guide for Microsoft Proje...       0.0      0.0   \n",
              "Streets of Fire                                          0.0      0.0   \n",
              "To Love Again                                            0.0      0.0   \n",
              "Hellion                                                  0.0      0.0   \n",
              "\n",
              "                                                    mcmaster  \n",
              "book_title                                                    \n",
              "White Hotel                                              0.0  \n",
              "Horsefeathers and other curious words                    0.0  \n",
              "Musicians and Watchmakers (Discoveries)                  0.0  \n",
              "My Life as a Fake                                        0.0  \n",
              "The Myth of the Great War : A New Military Hist...       0.0  \n",
              "Kittens on Vacation                                      0.0  \n",
              "The Complete Planning Guide for Microsoft Proje...       0.0  \n",
              "Streets of Fire                                          0.0  \n",
              "To Love Again                                            0.0  \n",
              "Hellion                                                  0.0  \n",
              "\n",
              "[10 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-2a73629c-34f6-4f0d-9e83-d735593f1640\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>schinharl</th>\n",
              "      <th>cindy</th>\n",
              "      <th>dyer</th>\n",
              "      <th>mashima</th>\n",
              "      <th>catling</th>\n",
              "      <th>reese</th>\n",
              "      <th>glassman</th>\n",
              "      <th>shiva</th>\n",
              "      <th>margo</th>\n",
              "      <th>ustinov</th>\n",
              "      <th>...</th>\n",
              "      <th>andrea</th>\n",
              "      <th>rajneesh</th>\n",
              "      <th>riboud</th>\n",
              "      <th>fagan</th>\n",
              "      <th>slyke</th>\n",
              "      <th>putney</th>\n",
              "      <th>wilburn</th>\n",
              "      <th>cristina</th>\n",
              "      <th>chaucer</th>\n",
              "      <th>mcmaster</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>book_title</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>White Hotel</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horsefeathers and other curious words</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Musicians and Watchmakers (Discoveries)</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>My Life as a Fake</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Myth of the Great War : A New Military History of World War I</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Kittens on Vacation</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Complete Planning Guide for Microsoft Project, For Windows 95 and Windows 3.1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Streets of Fire</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>To Love Again</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Hellion</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 22 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a73629c-34f6-4f0d-9e83-d735593f1640')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-488a6bf2-65d5-4a18-8791-95149729c337\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-488a6bf2-65d5-4a18-8791-95149729c337')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-488a6bf2-65d5-4a18-8791-95149729c337 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2a73629c-34f6-4f0d-9e83-d735593f1640 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2a73629c-34f6-4f0d-9e83-d735593f1640');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Cosine Similarity\n"
      ],
      "metadata": {
        "id": "uN2muWAOFch_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Menghitung derajat kesamaan (similarity degree) antar restoran dengan teknik cosine similarity\n"
      ],
      "metadata": {
        "id": "-3B3Sht4FkkH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "\n",
        "# Menghitung cosine similarity pada matrix tf-idf\n",
        "cosine_sim = cosine_similarity(tfidf_matrix)\n",
        "cosine_sim"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_kgsvhv5FHtx",
        "outputId": "3d1caa92-2e61-4376-cef5-ef5644066019"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 1., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 1., ..., 0., 0., 0.],\n",
              "       ...,\n",
              "       [0., 0., 0., ..., 1., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 1., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 1.]])"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat matriks kesamaan setiap buku dengan menampilkan judul buku dalam 5 sampel kolom (axis = 1) dan 10 sampel baris (axis=0)."
      ],
      "metadata": {
        "id": "UI02aIvkHw2X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa judul buku\n",
        "cosine_sim_df = pd.DataFrame(cosine_sim, index=data['book_title'], columns=data['book_title'])\n",
        "print('Shape:', cosine_sim_df.shape)\n",
        "\n",
        "# Melihat similarity matrix pada setiap buku\n",
        "cosine_sim_df.sample(5, axis=1).sample(10, axis=0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "UmNoIV-UFrGf",
        "outputId": "751b54dd-65a7-403c-83bd-4a603b61690b"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape: (5000, 5000)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "book_title                                          Let's Study Japanese (Tuttle Language Library)  \\\n",
              "book_title                                                                                           \n",
              "Come Death and High Water (George and Molly Pal...                                             0.0   \n",
              "The Cabin Faced West                                                                           0.0   \n",
              "The Carnivorous Lamb                                                                           0.0   \n",
              "Where Two Ways Met (Grace Livingston Hill #01)                                                 0.0   \n",
              "The Connoisseur's Guide to the Mind: How We Thi...                                             0.0   \n",
              "Cat Who Said Cheese (Cat Who... (Audio))                                                       0.0   \n",
              "Nice Â¿N Easy French Grammar                                                                   0.0   \n",
              "Clans &amp; Tartans   0004725018                                                               0.0   \n",
              "Before Night Falls                                                                             0.0   \n",
              "Amazing Animals (Golden Gatefold Books)                                                        0.0   \n",
              "\n",
              "book_title                                          Vertical Run  MOON DANCE  \\\n",
              "book_title                                                                     \n",
              "Come Death and High Water (George and Molly Pal...           0.0         0.0   \n",
              "The Cabin Faced West                                         0.0         0.0   \n",
              "The Carnivorous Lamb                                         0.0         0.0   \n",
              "Where Two Ways Met (Grace Livingston Hill #01)               0.0         0.0   \n",
              "The Connoisseur's Guide to the Mind: How We Thi...           0.0         0.0   \n",
              "Cat Who Said Cheese (Cat Who... (Audio))                     0.0         0.0   \n",
              "Nice Â¿N Easy French Grammar                                 0.0         0.0   \n",
              "Clans &amp; Tartans   0004725018                             0.0         0.0   \n",
              "Before Night Falls                                           0.0         0.0   \n",
              "Amazing Animals (Golden Gatefold Books)                      0.0         0.0   \n",
              "\n",
              "book_title                                          Party im Blitz. Die englischen Jahre.  \\\n",
              "book_title                                                                                  \n",
              "Come Death and High Water (George and Molly Pal...                                    0.0   \n",
              "The Cabin Faced West                                                                  0.0   \n",
              "The Carnivorous Lamb                                                                  0.0   \n",
              "Where Two Ways Met (Grace Livingston Hill #01)                                        0.0   \n",
              "The Connoisseur's Guide to the Mind: How We Thi...                                    0.0   \n",
              "Cat Who Said Cheese (Cat Who... (Audio))                                              0.0   \n",
              "Nice Â¿N Easy French Grammar                                                          0.0   \n",
              "Clans &amp; Tartans   0004725018                                                      0.0   \n",
              "Before Night Falls                                                                    0.0   \n",
              "Amazing Animals (Golden Gatefold Books)                                               0.0   \n",
              "\n",
              "book_title                                          The Mole People: Life in the Tunnels Beneath New York City  \n",
              "book_title                                                                                                      \n",
              "Come Death and High Water (George and Molly Pal...                                                0.0           \n",
              "The Cabin Faced West                                                                              0.0           \n",
              "The Carnivorous Lamb                                                                              0.0           \n",
              "Where Two Ways Met (Grace Livingston Hill #01)                                                    0.0           \n",
              "The Connoisseur's Guide to the Mind: How We Thi...                                                0.0           \n",
              "Cat Who Said Cheese (Cat Who... (Audio))                                                          0.0           \n",
              "Nice Â¿N Easy French Grammar                                                                      0.0           \n",
              "Clans &amp; Tartans   0004725018                                                                  0.0           \n",
              "Before Night Falls                                                                                0.0           \n",
              "Amazing Animals (Golden Gatefold Books)                                                           0.0           "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-028ad72a-8902-4adf-a8b0-6b7c30908f5e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>book_title</th>\n",
              "      <th>Let's Study Japanese (Tuttle Language Library)</th>\n",
              "      <th>Vertical Run</th>\n",
              "      <th>MOON DANCE</th>\n",
              "      <th>Party im Blitz. Die englischen Jahre.</th>\n",
              "      <th>The Mole People: Life in the Tunnels Beneath New York City</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>book_title</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Come Death and High Water (George and Molly Palmer-Jones Mysteries)</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Cabin Faced West</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Carnivorous Lamb</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Where Two Ways Met (Grace Livingston Hill #01)</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Connoisseur's Guide to the Mind: How We Think, How We Learn, and What It Means to Be Intelligent</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cat Who Said Cheese (Cat Who... (Audio))</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Nice Â¿N Easy French Grammar</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Clans &amp;amp; Tartans   0004725018</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Before Night Falls</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Amazing Animals (Golden Gatefold Books)</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-028ad72a-8902-4adf-a8b0-6b7c30908f5e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-a7f4f319-0bb1-4d20-8676-01bd574f6795\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7f4f319-0bb1-4d20-8676-01bd574f6795')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-a7f4f319-0bb1-4d20-8676-01bd574f6795 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-028ad72a-8902-4adf-a8b0-6b7c30908f5e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-028ad72a-8902-4adf-a8b0-6b7c30908f5e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Mendapatkan Rekomendasi"
      ],
      "metadata": {
        "id": "KrN9slNzIgr0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Membuat fungsi book_recommendations dengan beberapa parameter sebagai berikut:\n",
        "\n",
        "  * Judul_buku : Judul buku (index kemiripan dataframe).\n",
        "  * Similarity_data : Dataframe mengenai similarity yang telah kita definisikan sebelumnya.\n",
        "  * Items : Nama dan fitur yang digunakan untuk mendefinisikan kemiripan, dalam hal ini adalah ‘book_title’ dan ‘book_author’.\n",
        "  * k : Banyak rekomendasi yang ingin diberikan."
      ],
      "metadata": {
        "id": "wsLnfibjIvDH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def resto_recommendations(judul_buku, similarity_data=cosine_sim_df, items=data[['book_title', 'book_author']], k=5):\n",
        "    \"\"\"\n",
        "    Rekomendasi Resto berdasarkan kemiripan dataframe\n",
        "\n",
        "    Parameter:\n",
        "    ---\n",
        "    book_title : tipe data string (str)\n",
        "                Judul buku (index kemiripan dataframe)\n",
        "    similarity_data : tipe data pd.DataFrame (object)\n",
        "                      Kesamaan dataframe, simetrik, dengan buku sebagai\n",
        "                      indeks dan kolom\n",
        "    items : tipe data pd.DataFrame (object)\n",
        "            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan\n",
        "    k : tipe data integer (int)\n",
        "        Banyaknya jumlah rekomendasi yang diberikan\n",
        "    ---\n",
        "\n",
        "\n",
        "    Pada index ini, kita mengambil k dengan nilai similarity terbesar\n",
        "    pada index matrix yang diberikan (i).\n",
        "    \"\"\"\n",
        "\n",
        "\n",
        "    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan\n",
        "    # Dataframe diubah menjadi numpy\n",
        "    # Range(start, stop, step)\n",
        "    index = similarity_data.loc[:,judul_buku].to_numpy().argpartition(\n",
        "        range(-1, -k, -1))\n",
        "\n",
        "    # Mengambil data dengan similarity terbesar dari index yang ada\n",
        "    closest = similarity_data.columns[index[-1:-(k+2):-1]]\n",
        "\n",
        "    # Drop judul_buku agar nama resto yang dicari tidak muncul dalam daftar rekomendasi\n",
        "    closest = closest.drop(judul_buku, errors='ignore')\n",
        "\n",
        "    return pd.DataFrame(closest).merge(items).head(k)"
      ],
      "metadata": {
        "id": "drHGjNsVIAHm"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melihat informasi terkait buku \"Come Death and High Water (George and Molly Palmer-Jones Mysteries)\""
      ],
      "metadata": {
        "id": "08Nbiv74JxbB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data[data.book_title.eq('Come Death and High Water (George and Molly Palmer-Jones Mysteries)')]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "H0Yu2O3-JvUe",
        "outputId": "fd35c7ed-92f2-4f04-fe20-7b0f26384566"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               id                                         book_title  \\\n",
              "95420  0449133486  Come Death and High Water (George and Molly Pa...   \n",
              "\n",
              "       book_author  \n",
              "95420  Ann Cleeves  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-ead79457-aac8-43a1-aeb1-a01e3107dcac\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>book_title</th>\n",
              "      <th>book_author</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>95420</th>\n",
              "      <td>0449133486</td>\n",
              "      <td>Come Death and High Water (George and Molly Pa...</td>\n",
              "      <td>Ann Cleeves</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ead79457-aac8-43a1-aeb1-a01e3107dcac')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-573a6346-fc9c-4fde-aec4-34dac382b964\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-573a6346-fc9c-4fde-aec4-34dac382b964')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-573a6346-fc9c-4fde-aec4-34dac382b964 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ead79457-aac8-43a1-aeb1-a01e3107dcac button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ead79457-aac8-43a1-aeb1-a01e3107dcac');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Menemukan rekomendasi buku yang mirip dengan \"Come Death and High Water (George and Molly Palmer-Jones Mysteries)\""
      ],
      "metadata": {
        "id": "JPliR-CpJhkY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "resto_recommendations('Come Death and High Water (George and Molly Palmer-Jones Mysteries)')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "GT0LnOO8Jdse",
        "outputId": "22d109d7-540e-46d6-d261-12c8f93a5837"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                          book_title    book_author\n",
              "0  Karen's Mystery (Baby-Sitters Little Sister Su...  Ann M. Martin\n",
              "1      Author Day (Kids in Ms. Colman's Class, No 2)  Ann M. Martin\n",
              "2                                  Ma and Pa Dracula  Ann M. Martin\n",
              "3  Karen's Little Witch (Baby-Sitters Little Sist...  Ann M. Martin\n",
              "4                                    Virtual Warrior   Ann Lawrence"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-98656a26-a2f0-450d-a2eb-2bf7f96d4feb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>book_title</th>\n",
              "      <th>book_author</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Karen's Mystery (Baby-Sitters Little Sister Su...</td>\n",
              "      <td>Ann M. Martin</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Author Day (Kids in Ms. Colman's Class, No 2)</td>\n",
              "      <td>Ann M. Martin</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Ma and Pa Dracula</td>\n",
              "      <td>Ann M. Martin</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Karen's Little Witch (Baby-Sitters Little Sist...</td>\n",
              "      <td>Ann M. Martin</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Virtual Warrior</td>\n",
              "      <td>Ann Lawrence</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98656a26-a2f0-450d-a2eb-2bf7f96d4feb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-986c495b-db46-4563-91a2-9630c7fd12a5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-986c495b-db46-4563-91a2-9630c7fd12a5')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-986c495b-db46-4563-91a2-9630c7fd12a5 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-98656a26-a2f0-450d-a2eb-2bf7f96d4feb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-98656a26-a2f0-450d-a2eb-2bf7f96d4feb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Development dengan Collaborative Filtering"
      ],
      "metadata": {
        "id": "w7eXrkUwKEaS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Understanding"
      ],
      "metadata": {
        "id": "2vXavC3rKKzi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Import library yang diperlukan"
      ],
      "metadata": {
        "id": "PywM7_kDKNww"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import library\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from zipfile import ZipFile\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "from pathlib import Path\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "DMC6DkrGJ_Ch"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Untuk meringankan beban komputasi, hanya diambil sejumlah data sampel (n) dari total dataset yang dimiliki\n"
      ],
      "metadata": {
        "id": "oyvtu1wrLR2Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# menentukan jumlah sampel data yang ingin diambil\n",
        "sample = 5000\n",
        "\n",
        "ratings_sample = ratings.sample(n=sample)"
      ],
      "metadata": {
        "id": "Xisdr_UaLR2k"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mengecek apakah terdapat missing values"
      ],
      "metadata": {
        "id": "ybZfgtVOLlXV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ratings_sample.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0zOhV3ruLh3a",
        "outputId": "f9ca349c-4202-434c-f2c8-9b6911b3af79"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User-ID        0\n",
              "ISBN           0\n",
              "Book-Rating    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Membaca dataset"
      ],
      "metadata": {
        "id": "1rkSJgt8KbYm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = ratings_sample\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "dOpUUkSdKR9z",
        "outputId": "672f996d-a638-4eb9-9372-007db549e009"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         User-ID        ISBN  Book-Rating\n",
              "741469    179467  0886774012            0\n",
              "64432      13093  0441787541            0\n",
              "612540    148191  0312276885            6\n",
              "873800    211426  0886776686            0\n",
              "45005      11601  1851680659            0\n",
              "...          ...         ...          ...\n",
              "138826     31391  0345335082           10\n",
              "262154     60277  0486408930            0\n",
              "1054103   251613  156138450X            4\n",
              "935680    226879  0681100230            0\n",
              "876605    212467  0892839066            0\n",
              "\n",
              "[5000 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-5c6f9dcd-0516-40b1-b68c-b86bc7c29493\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>Book-Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>741469</th>\n",
              "      <td>179467</td>\n",
              "      <td>0886774012</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64432</th>\n",
              "      <td>13093</td>\n",
              "      <td>0441787541</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>612540</th>\n",
              "      <td>148191</td>\n",
              "      <td>0312276885</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>873800</th>\n",
              "      <td>211426</td>\n",
              "      <td>0886776686</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45005</th>\n",
              "      <td>11601</td>\n",
              "      <td>1851680659</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>138826</th>\n",
              "      <td>31391</td>\n",
              "      <td>0345335082</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>262154</th>\n",
              "      <td>60277</td>\n",
              "      <td>0486408930</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1054103</th>\n",
              "      <td>251613</td>\n",
              "      <td>156138450X</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>935680</th>\n",
              "      <td>226879</td>\n",
              "      <td>0681100230</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>876605</th>\n",
              "      <td>212467</td>\n",
              "      <td>0892839066</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5000 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c6f9dcd-0516-40b1-b68c-b86bc7c29493')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-5942dc3e-663b-43c4-869d-acd26918f06a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5942dc3e-663b-43c4-869d-acd26918f06a')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-5942dc3e-663b-43c4-869d-acd26918f06a button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5c6f9dcd-0516-40b1-b68c-b86bc7c29493 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5c6f9dcd-0516-40b1-b68c-b86bc7c29493');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Preparation"
      ],
      "metadata": {
        "id": "pZGxwAYXKk9u"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melakukan persiapan data untuk menyandikan (encode) fitur ‘User-ID’ ke dalam indeks integer."
      ],
      "metadata": {
        "id": "YQVKGDxCKop-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah User-ID menjadi list tanpa nilai yang sama\n",
        "user_ids = df['User-ID'].unique().tolist()\n",
        "print('list User-ID: ', user_ids)\n",
        "\n",
        "# Melakukan encoding User-ID\n",
        "user_to_user_encoded = {x: i for i, x in enumerate(user_ids)}\n",
        "print('encoded User-ID : ', user_to_user_encoded)\n",
        "\n",
        "# Melakukan proses encoding angka ke ke User-ID\n",
        "user_encoded_to_user = {i: x for i, x in enumerate(user_ids)}\n",
        "print('encoded angka ke User-ID: ', user_encoded_to_user)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3d_Urc0fKdor",
        "outputId": "3cb710a8-f42a-4fae-f1c0-e3ac92e0ff6b"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "list User-ID:  [179467, 13093, 148191, 211426, 11601, 200978, 71902, 31556, 94853, 35857, 164096, 269566, 136585, 203968, 187145, 202711, 3543, 30273, 167587, 174304, 222801, 182085, 249096, 40471, 102532, 89207, 11676, 193063, 227520, 25261, 229011, 22229, 270829, 164480, 275970, 8737, 268987, 170415, 141865, 217375, 29101, 20115, 174388, 240287, 145641, 204663, 123883, 153662, 59971, 2793, 163683, 64946, 259022, 55492, 16161, 27647, 98391, 209238, 146113, 162639, 138198, 128696, 254465, 159863, 63714, 151068, 240883, 126053, 78783, 226553, 217811, 26535, 27676, 141325, 130195, 62755, 177690, 213628, 130168, 9908, 168387, 137589, 222138, 28204, 172742, 38556, 222019, 43807, 173835, 35050, 259260, 242878, 266331, 147965, 49277, 128257, 77809, 171986, 77860, 248901, 105028, 128835, 79933, 148258, 50114, 50206, 13552, 42400, 259035, 77181, 11993, 238781, 171118, 173860, 234623, 158794, 56591, 189334, 258152, 62966, 257700, 84749, 156467, 31308, 98686, 58790, 233784, 201349, 102275, 185233, 190056, 180815, 212898, 154465, 131837, 31315, 178667, 157969, 116107, 121251, 131032, 76352, 37929, 216097, 229551, 102676, 1083, 127429, 242083, 170192, 161685, 7346, 96502, 225763, 115929, 223325, 173679, 263918, 221136, 138382, 204864, 88733, 193220, 151408, 131751, 97833, 265595, 164905, 198711, 58607, 179744, 100906, 145619, 266226, 21031, 39440, 129358, 111019, 152249, 85534, 205355, 25981, 236283, 163973, 255471, 127813, 69697, 241614, 126843, 2766, 103277, 252292, 13082, 207246, 177233, 129008, 246655, 165375, 206534, 63394, 24627, 101851, 127200, 232131, 102059, 264355, 183287, 201209, 159702, 76888, 76815, 231210, 246507, 226991, 243491, 207965, 239966, 197775, 106225, 81609, 244189, 81332, 99227, 163488, 43359, 9747, 136348, 92547, 95359, 102542, 146106, 119602, 241198, 129794, 88066, 102967, 193499, 47971, 87610, 12657, 31238, 115120, 122193, 129324, 187670, 128085, 128060, 265313, 44595, 31826, 16966, 85993, 110973, 98741, 129074, 177861, 111657, 94128, 146175, 116599, 126492, 148028, 11690, 69971, 264191, 120892, 83684, 157811, 276161, 150896, 262998, 75777, 174861, 107895, 149661, 69042, 197396, 202675, 245963, 278418, 169784, 107784, 57606, 164465, 13582, 263585, 69078, 135149, 119575, 104484, 196077, 150411, 209631, 264951, 16982, 124363, 49582, 26544, 73902, 196502, 260183, 235105, 113383, 195441, 68249, 270264, 75825, 205196, 256407, 172477, 241179, 268013, 181956, 60244, 17247, 41084, 156150, 271261, 114868, 189835, 62465, 158033, 207498, 205943, 71071, 93631, 14638, 69232, 39646, 111550, 37644, 48046, 85992, 89192, 16795, 270897, 1733, 152942, 251003, 259488, 25131, 47396, 79186, 214521, 36288, 124089, 225186, 244171, 261105, 164675, 268056, 178181, 264525, 231897, 16721, 261037, 127129, 1903, 126374, 98297, 266249, 166596, 79942, 153723, 177458, 110808, 242273, 9417, 113519, 141373, 152742, 241306, 122881, 180348, 106184, 268622, 85043, 247429, 216099, 236655, 225087, 175886, 188010, 8660, 72636, 111947, 214464, 138397, 131026, 70538, 43246, 30509, 177375, 70585, 168047, 264058, 247240, 53278, 210647, 170575, 76499, 100345, 131402, 121606, 11590, 101517, 81771, 248464, 265383, 3363, 192766, 189120, 3326, 35407, 98900, 262070, 150979, 107021, 87974, 93047, 246617, 226462, 85357, 169870, 27617, 30716, 177373, 110912, 269530, 100038, 27472, 148411, 230496, 229331, 69355, 242299, 147839, 265889, 14642, 156214, 181223, 233731, 107951, 424, 124705, 132924, 202865, 32670, 106280, 223034, 56271, 138380, 242361, 174848, 45208, 37546, 123039, 139070, 42299, 36836, 21356, 26598, 18401, 91478, 185771, 114919, 89891, 81207, 141600, 16488, 45904, 226338, 189666, 265115, 87787, 147847, 262469, 259380, 173879, 175000, 251844, 11629, 166123, 30385, 249791, 167243, 106816, 160803, 252071, 234964, 204489, 137336, 95991, 101209, 61004, 24748, 134118, 131798, 71728, 76626, 52614, 95932, 49144, 260897, 98699, 141426, 123485, 260865, 247752, 35532, 59727, 232048, 192211, 167240, 261829, 182311, 28255, 105187, 2033, 58062, 87746, 8316, 258534, 155136, 98322, 165319, 175536, 89314, 55066, 251140, 56447, 277157, 221115, 162465, 114414, 53392, 247447, 6312, 155219, 248669, 269719, 38273, 272052, 268865, 181687, 272155, 116210, 245128, 147451, 69684, 125203, 198408, 204822, 129255, 71616, 8971, 35124, 131046, 33133, 249386, 196466, 48268, 188483, 106954, 110029, 170518, 64038, 76942, 22023, 112188, 277170, 214573, 20201, 92398, 151806, 43397, 2363, 62895, 82998, 152787, 268932, 73394, 141444, 249128, 267409, 41432, 91832, 219260, 151643, 240859, 239070, 230997, 239092, 199333, 273651, 23902, 65817, 89602, 6251, 97160, 97428, 145449, 156269, 143535, 230708, 198213, 65663, 183196, 185296, 40647, 52676, 114368, 113334, 154469, 4838, 203698, 129389, 238557, 208755, 252695, 38202, 148744, 113983, 210035, 64310, 256226, 230668, 185123, 173291, 62381, 104636, 161037, 262279, 250342, 211919, 10030, 219209, 108827, 52853, 35836, 95193, 56554, 268156, 195057, 269321, 115488, 248259, 173481, 239423, 108155, 244056, 248003, 116428, 240144, 82182, 176190, 190708, 10949, 91203, 242219, 212122, 120908, 135831, 269728, 84024, 223501, 156527, 29204, 31140, 50849, 7286, 99441, 112001, 150364, 70594, 259234, 259363, 38781, 114798, 271836, 150124, 114699, 275210, 265834, 46398, 147141, 46351, 12945, 174596, 190650, 224203, 264903, 183758, 36135, 242646, 144131, 14521, 97607, 122793, 194934, 131855, 26731, 102702, 114920, 274308, 18082, 135277, 106273, 24838, 142062, 98078, 75028, 207349, 56399, 35859, 207148, 59172, 181176, 66591, 30711, 69600, 257204, 64053, 219200, 200674, 156726, 220564, 230522, 201768, 149908, 87141, 113479, 233911, 93629, 250962, 147166, 240700, 40798, 56049, 95492, 172023, 266867, 243913, 222488, 33974, 12824, 38476, 179730, 138441, 52968, 194600, 93565, 210959, 8639, 8870, 39467, 17789, 221445, 49972, 214984, 180495, 21576, 81597, 172192, 92861, 262208, 93485, 156735, 141901, 59150, 12538, 84866, 19429, 64241, 148199, 162155, 124888, 69709, 60277, 70931, 218568, 244790, 177157, 96679, 31609, 64655, 116032, 140253, 48078, 120548, 203240, 152548, 145543, 95316, 33129, 275111, 113315, 270820, 273979, 238779, 154675, 270713, 97434, 254355, 142524, 124079, 243651, 91347, 87742, 262248, 236164, 222207, 51589, 175154, 244688, 238545, 166399, 101546, 152016, 50371, 28537, 40943, 176214, 169563, 239688, 131027, 28004, 266056, 251606, 99341, 130474, 183046, 110475, 160819, 89374, 16916, 236399, 30555, 175003, 129716, 271284, 246678, 68555, 94680, 130847, 15408, 77480, 207494, 37745, 115003, 274838, 120496, 37431, 63287, 100822, 252383, 65054, 230699, 120134, 267282, 153950, 246036, 100644, 79795, 254899, 80810, 175100, 130554, 143253, 163570, 183532, 78394, 167558, 272573, 56959, 13167, 148265, 248477, 81298, 151608, 229501, 251808, 37691, 126487, 40222, 71232, 265918, 87067, 109774, 5443, 43842, 144318, 167813, 57620, 213638, 59784, 160405, 225078, 115161, 57898, 209373, 234614, 158295, 180859, 228998, 56039, 245373, 240543, 10118, 61086, 251422, 44925, 80776, 179739, 179978, 40553, 232959, 126726, 65008, 215006, 37310, 259305, 40664, 90423, 27144, 118228, 185308, 119505, 243899, 179772, 272347, 150316, 106460, 80859, 30035, 233778, 261501, 51094, 265194, 57713, 273190, 28177, 249250, 47329, 208829, 147803, 113817, 250760, 6746, 269157, 110373, 225305, 236948, 164533, 211098, 37950, 261603, 178079, 55858, 258352, 153367, 46197, 112026, 224138, 30810, 30667, 105745, 6577, 68984, 257514, 189345, 238120, 265508, 31611, 212923, 180586, 128693, 264082, 101731, 141062, 85905, 6575, 184118, 24180, 160078, 165452, 117543, 94639, 209516, 30781, 277427, 62659, 253629, 59189, 242445, 44361, 251843, 210485, 129281, 197828, 170869, 247176, 4385, 48313, 248308, 21660, 50073, 143909, 272077, 182459, 3743, 63074, 149084, 139183, 268691, 150968, 52584, 40435, 31983, 136010, 219949, 172030, 22423, 23768, 128622, 122141, 264152, 29743, 115572, 170229, 77940, 123973, 3508, 125411, 268751, 60178, 224118, 209875, 218068, 274004, 97418, 46909, 135367, 251394, 240403, 61147, 216328, 275996, 38664, 29259, 9454, 60488, 222050, 147385, 42093, 28135, 4049, 151107, 6124, 186764, 182987, 131686, 25010, 239850, 216495, 123981, 228764, 115678, 249628, 138301, 234399, 152651, 218836, 79016, 92652, 263791, 222054, 80234, 122045, 23694, 184299, 77270, 71986, 55419, 124942, 107179, 98758, 159440, 235935, 249862, 251504, 64440, 71600, 266807, 20922, 162738, 246513, 113380, 5348, 235684, 236058, 182088, 199359, 8234, 16168, 243077, 38995, 211607, 48217, 249894, 149373, 149043, 53236, 197659, 72992, 105795, 233738, 55927, 223814, 149934, 142973, 184661, 86641, 247010, 185384, 173881, 55065, 225659, 108527, 143175, 205448, 203033, 24132, 41469, 262040, 198412, 143327, 170184, 113939, 197464, 121119, 8681, 33999, 243065, 27606, 113270, 256417, 277195, 274061, 63938, 7841, 272462, 236340, 112412, 98026, 78834, 193168, 170742, 137688, 179718, 265932, 176293, 225996, 246671, 150561, 204474, 137397, 236172, 67690, 168064, 184672, 278188, 224307, 250510, 95923, 92142, 167471, 114988, 39536, 26084, 251730, 7253, 263877, 6703, 266229, 225986, 237376, 30105, 161041, 266872, 200226, 268110, 171765, 183103, 61643, 211944, 63644, 26813, 243585, 131337, 190925, 245623, 233188, 205735, 20445, 166244, 153865, 120515, 244139, 51449, 178780, 167892, 157273, 37712, 183142, 183, 149800, 124692, 45416, 230105, 6323, 24544, 83034, 213353, 34521, 263163, 6566, 57468, 25122, 65208, 15997, 252827, 215701, 107244, 246620, 257327, 143837, 79687, 227447, 210717, 79958, 245148, 229862, 241204, 116904, 184639, 241791, 222679, 194646, 248225, 49460, 230249, 42428, 230552, 189516, 59208, 189848, 10067, 62558, 40278, 61901, 115552, 123544, 104443, 266753, 193560, 4090, 149510, 68256, 59685, 81148, 92853, 123430, 250764, 272225, 201898, 24194, 105221, 135673, 217106, 262541, 243213, 101313, 28735, 123095, 172888, 52606, 222945, 234066, 74665, 196492, 225232, 92405, 55490, 239783, 178905, 193337, 38176, 107203, 212467, 62891, 36673, 76458, 129851, 12189, 129465, 277639, 130063, 194669, 184930, 8936, 55607, 211430, 195304, 101046, 90092, 120333, 193106, 122506, 110818, 213906, 238213, 179135, 165342, 77273, 28731, 163699, 112541, 230030, 37817, 254241, 20918, 144348, 173415, 41634, 168034, 89719, 144602, 250359, 71762, 239374, 124010, 224764, 110763, 156319, 63404, 259629, 26871, 262902, 241894, 31393, 152080, 255092, 238864, 45557, 53490, 243785, 85701, 206979, 132836, 135959, 79612, 81045, 87555, 75491, 257550, 159146, 21357, 269439, 199783, 55734, 264317, 235282, 58363, 205474, 275020, 233578, 130438, 243236, 255482, 60583, 110076, 253124, 260771, 95010, 92162, 243876, 30926, 126736, 255218, 135045, 38076, 151702, 38955, 78231, 258938, 198147, 52807, 253852, 112083, 268030, 173632, 269114, 21364, 94923, 254405, 202462, 30276, 79263, 276670, 128045, 232611, 241569, 107453, 55799, 8066, 125774, 76218, 64943, 22252, 130943, 51521, 138073, 32254, 275618, 12982, 78844, 88329, 225810, 39326, 251416, 277478, 173684, 224924, 161348, 200772, 254, 16634, 251691, 54258, 84666, 70222, 274325, 247141, 177091, 81977, 200233, 269273, 93377, 9492, 127233, 129780, 159884, 85367, 144531, 235392, 101305, 273770, 251122, 196052, 60140, 173018, 163059, 92693, 92399, 87143, 95025, 239584, 19592, 69389, 187922, 95525, 43061, 196149, 3915, 48753, 13605, 178950, 209464, 7326, 66680, 149178, 139126, 270715, 34676, 169663, 37573, 160062, 60098, 67547, 87712, 125587, 141771, 41889, 54655, 131070, 59180, 256167, 29806, 153621, 115792, 167722, 157247, 12811, 97874, 17667, 43404, 204167, 166694, 50560, 192135, 174791, 7962, 232106, 113364, 61759, 204359, 142121, 63494, 178130, 104736, 97198, 88283, 266522, 5350, 275673, 212142, 203964, 72214, 192093, 1248, 144899, 108815, 118579, 113467, 20852, 57412, 77291, 55187, 247461, 192245, 256402, 162762, 17177, 32440, 183061, 49109, 171817, 78428, 46269, 28938, 164728, 179741, 17859, 242317, 31466, 242849, 54483, 189558, 182014, 220757, 96425, 190335, 242824, 234759, 241548, 32627, 147764, 28900, 153322, 99738, 171445, 253821, 193778, 16459, 89023, 161922, 38023, 169827, 213090, 76460, 86489, 177277, 135736, 90614, 180651, 158925, 220688, 196799, 224646, 16871, 35718, 202277, 241527, 38887, 26516, 85426, 3757, 21484, 36554, 15021, 21252, 125538, 175329, 214620, 15418, 192428, 139321, 2358, 31919, 125692, 168464, 160541, 133571, 12202, 139229, 121667, 221036, 114544, 231237, 126903, 104812, 36606, 218552, 229335, 166922, 223787, 16482, 221050, 244349, 7158, 226394, 19842, 24835, 209756, 94900, 236235, 200643, 86408, 819, 237646, 205281, 214134, 22161, 141203, 204255, 176875, 232036, 141710, 186547, 222035, 70318, 145558, 95888, 18464, 273849, 56856, 125303, 143337, 73588, 31049, 82893, 67403, 12863, 135833, 200323, 263825, 86243, 243513, 171467, 170724, 135458, 23571, 146230, 61775, 84126, 28523, 145451, 273714, 5963, 31040, 83637, 169745, 198302, 43443, 90232, 82926, 205969, 164584, 158080, 131594, 5502, 128543, 101559, 99252, 252657, 164706, 167189, 193723, 7128, 122429, 32329, 41842, 186999, 246874, 219254, 226545, 112881, 153718, 40184, 101876, 270489, 188027, 43021, 43006, 167478, 177072, 37293, 258690, 138995, 44520, 77753, 101242, 207411, 222296, 229681, 180128, 153563, 260217, 239752, 42458, 141902, 209160, 260067, 268482, 30985, 95301, 275631, 240568, 207721, 168438, 33200, 182993, 31822, 16908, 247315, 19422, 105517, 160681, 249695, 252385, 129690, 31420, 254064, 142454, 31295, 99347, 256247, 12122, 74187, 60858, 80954, 94411, 155014, 213827, 245827, 21014, 112502, 203649, 133689, 81352, 176667, 178199, 74215, 73467, 34019, 219546, 238699, 51928, 50730, 67079, 151824, 242999, 36213, 159390, 209985, 74466, 278002, 268618, 54218, 93141, 97324, 118434, 248718, 191061, 109122, 26730, 205475, 271833, 175978, 241305, 269009, 242409, 270906, 252865, 167509, 192176, 234359, 65258, 135768, 159033, 168245, 237070, 223906, 245645, 150518, 170634, 148192, 258185, 254376, 83467, 26124, 90971, 243745, 199025, 24539, 218800, 140036, 262399, 113217, 80538, 169223, 226006, 136326, 88170, 60081, 231993, 263325, 36609, 163679, 21011, 165697, 218043, 140358, 73704, 204586, 50533, 165268, 119517, 252900, 136491, 47931, 224904, 60647, 250184, 88976, 266971, 136735, 139580, 75115, 103896, 235842, 102080, 104665, 226393, 127359, 204591, 65487, 188162, 97848, 8873, 271538, 240470, 210597, 214244, 243883, 177090, 81682, 105058, 195694, 172406, 32703, 182403, 102359, 50547, 168642, 128208, 65145, 118333, 124818, 116122, 236618, 239010, 168184, 14958, 61211, 109864, 267444, 226713, 52203, 207669, 164944, 18770, 189286, 92282, 111924, 133747, 127557, 193208, 215326, 71812, 18067, 217121, 12641, 209870, 109049, 177704, 208768, 277124, 229703, 112093, 30072, 30972, 236030, 17950, 24941, 196738, 100783, 115473, 16759, 51526, 208791, 187474, 237268, 108243, 98674, 78506, 142745, 60337, 184532, 63170, 35141, 66797, 200891, 255255, 223233, 50628, 49660, 94883, 138955, 11944, 266094, 144189, 225799, 167800, 153254, 213843, 69378, 186858, 139643, 257012, 147230, 146348, 243720, 43619, 222220, 80803, 79950, 203621, 167223, 274618, 18445, 136142, 242106, 99919, 225351, 8245, 277895, 75860, 39400, 196160, 205980, 184158, 142861, 212088, 163804, 178265, 12272, 266840, 266283, 248496, 35042, 179853, 67930, 92979, 127727, 85526, 273976, 66443, 104654, 253447, 80555, 237389, 189721, 99929, 45107, 189655, 19935, 3930, 170804, 105979, 135909, 96475, 235806, 144642, 213350, 103079, 234685, 157508, 245257, 223702, 43873, 266808, 34776, 242007, 270605, 236727, 176597, 57449, 229632, 250015, 252869, 213126, 28076, 66431, 66942, 189694, 33888, 142024, 256072, 116582, 10716, 146195, 191795, 136851, 154137, 153079, 269883, 18995, 36715, 170947, 207003, 17596, 55941, 167166, 141157, 229313, 72770, 263460, 217318, 149802, 64041, 277168, 65908, 24945, 118135, 91026, 139109, 135383, 78067, 81088, 76151, 187763, 262186, 80683, 152435, 259004, 208671, 54622, 96955, 124993, 65874, 131126, 204780, 25032, 101620, 206932, 56553, 33580, 271558, 109955, 175002, 240770, 201147, 252848, 230253, 132203, 142823, 206074, 14387, 144162, 232343, 276538, 66619, 189754, 202960, 220498, 254904, 190177, 144106, 128206, 208907, 58594, 27462, 46297, 106693, 183340, 189844, 77383, 24462, 261800, 72451, 60050, 88288, 86033, 123261, 141601, 165232, 157558, 188295, 26593, 44743, 110382, 98787, 60707, 166934, 78471, 172613, 129563, 206044, 176062, 214821, 200493, 27612, 250163, 225199, 3346, 86193, 81303, 258884, 154663, 174830, 201674, 180917, 199431, 203110, 63854, 92827, 145003, 23288, 10047, 90534, 224249, 141010, 84831, 270784, 250645, 21659, 154671, 17507, 231255, 23872, 66304, 191675, 32195, 110483, 224435, 24186, 266865, 202173, 14230, 136916, 238541, 102571, 74659, 60461, 202706, 223087, 169252, 24123, 85345, 79916, 86107, 47857, 164027, 124489, 187981, 172216, 19711, 51974, 49980, 103688, 71470, 96474, 241756, 240445, 142479, 113723, 92706, 246657, 183101, 51752, 202738, 22813, 151537, 114279, 40885, 230405, 185671, 93936, 217740, 161882, 267081, 203502, 39527, 2442, 242758, 241012, 265680, 273461, 6564, 12990, 182414, 94683, 248356, 104939, 264300, 239061, 271144, 247958, 185519, 238179, 244727, 88389, 245328, 236112, 56066, 90146, 41757, 259118, 119556, 167925, 105596, 69810, 24921, 157353, 240829, 206691, 133417, 98475, 32483, 67997, 8652, 46436, 193529, 175189, 98904, 3329, 177186, 171165, 92810, 170732, 106007, 115234, 197700, 255493, 268262, 244264, 23518, 250447, 210874, 81128, 55806, 151928, 144293, 215024, 31136, 130950, 72940, 132663, 35185, 9571, 199772, 7409, 179690, 272993, 240888, 171970, 103336, 216466, 224923, 250539, 226879, 70401, 106294, 203161, 53174, 174986, 126388, 261160, 176879, 214890, 175399, 194803, 37493, 179826, 213207, 225411, 112457, 4907, 71905, 255252, 250258, 41700, 123056, 34581, 169699, 7125, 110008, 91002, 48579, 243966, 240401, 66204, 232655, 154773, 43118, 51082, 258334, 10699, 69601, 235405, 188287, 193584, 88116, 110214, 189632, 114349, 154519, 223066, 203603, 200196, 189893, 96054, 167521, 56884, 124597, 226003, 171602, 217986, 76710, 51545, 75895, 242073, 93370, 177432, 31391, 138097, 191524, 246959, 239942, 199378, 158226, 222830, 192158, 8487, 252609, 276680, 95593, 39281, 9993, 82511, 38654, 31094, 187065, 257548, 277314, 212645, 108285, 47786, 270334, 125928, 120860, 187809, 167492, 4622, 251164, 234734, 255743, 160393, 238008, 234816, 87702, 166824, 126693, 40505, 244309, 79740, 204311, 200746, 53614, 155463, 144997, 204522, 268330, 251721, 28360, 240567, 39705, 80075, 157655, 242465, 95452, 109197, 199357, 258970, 208406, 90731, 93363, 251642, 177040, 223442, 165457, 177180, 44362, 67237, 173540, 255618, 254498, 16827, 37560, 155376, 118484, 276925, 208674, 101887, 115490, 218640, 33474, 261998, 151404, 10314, 190459, 206944, 39502, 162311, 59361, 190709, 257028, 66792, 216683, 212835, 238301, 218010, 181011, 12512, 271195, 5543, 150297, 274301, 170997, 25792, 155407, 264031, 224349, 82607, 167205, 249407, 160558, 4243, 198699, 244517, 60424, 210311, 258553, 227392, 135785, 35931, 5896, 138189, 219993, 21343, 63024, 263500, 209156, 8584, 241036, 115392, 191694, 229282, 116313, 140005, 141819, 98783, 167611, 247591, 91113, 175052, 35352, 55097, 95250, 19843, 217056, 142093, 229899, 273718, 20755, 52620, 125396, 226775, 242006, 196253, 171096, 60029, 85851, 269309, 131913, 145165, 2189, 229329, 272796, 245410, 277075, 68846, 36811, 173790, 130705, 67068, 227930, 28492, 65219, 74758, 159116, 30735, 87072, 4435, 82497, 168763, 73681, 153103, 7283, 121135, 33327, 24697, 93085, 130792, 9034, 112335, 146321, 275041, 146932, 246512, 157916, 2622, 24413, 152514, 65549, 222896, 87929, 78529, 34837, 2417, 45729, 130571, 39386, 84201, 13935, 114865, 65153, 273380, 70703, 28454, 117173, 130872, 143103, 96771, 205383, 55615, 15869, 25048, 72238, 20688, 231857, 14923, 221297, 76390, 100506, 19866, 243328, 255648, 235486, 42651, 9414, 232067, 215942, 224316, 39019, 97722, 72370, 47152, 187103, 237990, 29483, 243714, 79556, 267328, 63370, 131243, 127029, 11242, 99146, 246730, 15642, 31984, 243294, 18172, 254144, 268723, 85280, 145194, 100459, 182053, 233739, 136252, 251613, 138844, 270828, 100782, 42043, 212697, 257971, 109783, 26883, 12854, 174038, 21083, 52363, 11718, 209742, 84716, 30551, 136291, 12100, 248570, 199375, 58252, 136430, 190439, 172512, 192243, 157945, 202430, 95902, 83109, 75591, 44467, 209498, 50219, 191815, 199542, 136473, 179857, 259543, 251157, 203764, 72283, 152502, 275306, 275281, 52917, 233374, 270989, 244286, 173743, 210792, 219008, 38590, 76905, 6004, 13347, 203047, 177073, 53300, 123790, 234828, 188676, 49514, 170054, 232522, 20448, 111677, 59616, 239421, 13273, 111578, 110040, 242639, 269397, 157038, 87540, 164738, 60347, 250405, 179501, 237727, 130966, 28877, 16718, 53775, 31533, 102164, 132030, 241666, 180840, 55505, 201290, 124487, 168999, 111104, 206563, 2615, 41057, 58342, 46386, 138015, 81368, 170513, 259625, 277984, 94951, 219650, 59269, 150554, 132500, 242316, 85623, 196721, 75215, 182208, 252262, 256844, 250300, 184265, 118533, 252846, 107736, 211977, 192101, 204813, 125039, 188171, 68272, 159376, 102375, 196343, 238526, 268259, 208788, 204696, 254750, 274400, 227176, 102154, 88677, 114203, 104657, 88757, 157799, 164323, 263329, 61845, 25409, 237194, 113292, 125918, 74559, 69790, 41136, 24933, 202348, 117176, 107889, 218360, 132492, 100578, 272273, 160295, 187517, 187410, 255296, 222293, 183935, 115567, 223530, 196053, 234721, 196214, 195100, 254053, 187598, 259901, 222674, 236251, 213523, 119858, 43645, 205783, 169400, 216501, 257554, 8890, 14422, 229510, 52199, 200585, 122829, 36141, 219951, 205404, 103811, 161449, 270776, 272980, 7079, 183995, 27741, 160434, 26527, 218359, 236994, 4571, 20350, 92090, 28591, 142039, 176560, 275744, 187520, 120111, 190298, 207180, 2276, 258467, 61619, 277203, 78553, 124983, 93179, 102642, 10103, 107773, 75783, 125755, 132527, 216722, 160406, 178201, 268171, 2977, 248274, 169779, 97469, 13540, 20855, 222607, 191238, 76483, 68491, 37034, 36582, 31514, 249723, 212219, 126827, 125539, 84773, 224944, 55493, 38679, 161101, 85805, 203531, 60569, 223474, 251423, 143294, 236237, 41538, 50700, 107510, 92139, 203820, 264844, 23650, 64723, 12780, 144134, 48213, 180772, 93364, 92498, 124066, 268589, 54812, 123744, 104211, 170227, 58855, 73053, 187343, 143860, 278221, 274609, 154529, 264321, 265487, 202501, 242381, 50566, 13259, 252356, 96335, 57747, 75568, 47982, 94347, 94744, 162590, 70402, 125440, 174978, 174216, 269575, 210285, 20149, 117963, 191915, 260760, 216012, 39616, 72707, 38503, 174700, 150762, 144194, 162571, 77523, 153869, 149722, 8067, 246634, 232964, 11477, 259650, 2375, 44556, 272538, 224121, 254676, 89911, 16818, 51883, 224000, 185592, 49773, 143163, 69331, 260840, 61762, 5765, 164617, 250398, 244955, 178035, 84437, 189501, 59820, 87155, 29117, 180804, 266580, 104311, 53395, 133866, 59148, 5983, 134247, 199209, 244124, 178195, 243131, 214809, 158063, 264637, 143480, 130482, 91194, 41086, 121137, 181076, 20450, 44368, 121173, 51386, 255546, 243429, 190521, 188690, 232449, 165308, 140069, 15213, 182086, 150814, 152028, 55548, 84729, 8695, 126738, 251113, 86728, 188273, 243, 211605, 229409, 131675, 154125, 247575, 108005, 189375, 221995, 1022, 240418, 231767, 138883, 30120, 187088, 63956, 181254, 196930, 264027, 158846, 162376, 268026, 57105, 139387, 59305, 37311, 83589, 51128, 217252, 145916, 263418, 21112, 139668, 267680, 163540, 132407, 171968, 7620, 93426, 94952, 199928, 27092, 261641, 185254, 103602, 137742, 94781, 8290, 100908, 71712, 6563, 25311, 265281, 266658, 244253, 66365, 27740, 39584, 28634, 238065, 212325, 123468, 194358, 20851, 29855, 238625, 207466, 62701, 230672, 233529, 199144, 244042, 229184, 71494, 257544, 45064, 187256, 135170, 262569, 194637, 213066, 171222, 254206, 4131, 46983, 274000, 32773, 29505, 38718, 44089, 241810, 266193, 67663, 114217, 136205, 155495, 52586, 74833, 187536, 167349, 265751, 120598, 155580, 189151, 37208, 67141, 121766, 237271, 254780, 141493, 253228, 170385, 62009, 86555, 203058, 56781, 214937, 81492, 124874, 170734, 101513, 89307, 29255, 274220, 78722, 244662, 196137, 190831, 77052, 96448, 187031, 119749, 152186, 2488, 117595, 46389, 163824, 262391, 216444, 149069, 238921, 128557, 162227, 250683, 136037, 58358, 105718, 179288, 246318, 262577, 278332, 106988, 162562, 210259, 189882, 209394, 33070, 232945, 59254, 61078, 119281, 216381, 136139, 207499, 80826, 259930, 150002, 211136, 105968, 206583, 140000, 266595, 88693, 213197, 232403]\n",
            "encoded User-ID :  {179467: 0, 13093: 1, 148191: 2, 211426: 3, 11601: 4, 200978: 5, 71902: 6, 31556: 7, 94853: 8, 35857: 9, 164096: 10, 269566: 11, 136585: 12, 203968: 13, 187145: 14, 202711: 15, 3543: 16, 30273: 17, 167587: 18, 174304: 19, 222801: 20, 182085: 21, 249096: 22, 40471: 23, 102532: 24, 89207: 25, 11676: 26, 193063: 27, 227520: 28, 25261: 29, 229011: 30, 22229: 31, 270829: 32, 164480: 33, 275970: 34, 8737: 35, 268987: 36, 170415: 37, 141865: 38, 217375: 39, 29101: 40, 20115: 41, 174388: 42, 240287: 43, 145641: 44, 204663: 45, 123883: 46, 153662: 47, 59971: 48, 2793: 49, 163683: 50, 64946: 51, 259022: 52, 55492: 53, 16161: 54, 27647: 55, 98391: 56, 209238: 57, 146113: 58, 162639: 59, 138198: 60, 128696: 61, 254465: 62, 159863: 63, 63714: 64, 151068: 65, 240883: 66, 126053: 67, 78783: 68, 226553: 69, 217811: 70, 26535: 71, 27676: 72, 141325: 73, 130195: 74, 62755: 75, 177690: 76, 213628: 77, 130168: 78, 9908: 79, 168387: 80, 137589: 81, 222138: 82, 28204: 83, 172742: 84, 38556: 85, 222019: 86, 43807: 87, 173835: 88, 35050: 89, 259260: 90, 242878: 91, 266331: 92, 147965: 93, 49277: 94, 128257: 95, 77809: 96, 171986: 97, 77860: 98, 248901: 99, 105028: 100, 128835: 101, 79933: 102, 148258: 103, 50114: 104, 50206: 105, 13552: 106, 42400: 107, 259035: 108, 77181: 109, 11993: 110, 238781: 111, 171118: 112, 173860: 113, 234623: 114, 158794: 115, 56591: 116, 189334: 117, 258152: 118, 62966: 119, 257700: 120, 84749: 121, 156467: 122, 31308: 123, 98686: 124, 58790: 125, 233784: 126, 201349: 127, 102275: 128, 185233: 129, 190056: 130, 180815: 131, 212898: 132, 154465: 133, 131837: 134, 31315: 135, 178667: 136, 157969: 137, 116107: 138, 121251: 139, 131032: 140, 76352: 141, 37929: 142, 216097: 143, 229551: 144, 102676: 145, 1083: 146, 127429: 147, 242083: 148, 170192: 149, 161685: 150, 7346: 151, 96502: 152, 225763: 153, 115929: 154, 223325: 155, 173679: 156, 263918: 157, 221136: 158, 138382: 159, 204864: 160, 88733: 161, 193220: 162, 151408: 163, 131751: 164, 97833: 165, 265595: 166, 164905: 167, 198711: 168, 58607: 169, 179744: 170, 100906: 171, 145619: 172, 266226: 173, 21031: 174, 39440: 175, 129358: 176, 111019: 177, 152249: 178, 85534: 179, 205355: 180, 25981: 181, 236283: 182, 163973: 183, 255471: 184, 127813: 185, 69697: 186, 241614: 187, 126843: 188, 2766: 189, 103277: 190, 252292: 191, 13082: 192, 207246: 193, 177233: 194, 129008: 195, 246655: 196, 165375: 197, 206534: 198, 63394: 199, 24627: 200, 101851: 201, 127200: 202, 232131: 203, 102059: 204, 264355: 205, 183287: 206, 201209: 207, 159702: 208, 76888: 209, 76815: 210, 231210: 211, 246507: 212, 226991: 213, 243491: 214, 207965: 215, 239966: 216, 197775: 217, 106225: 218, 81609: 219, 244189: 220, 81332: 221, 99227: 222, 163488: 223, 43359: 224, 9747: 225, 136348: 226, 92547: 227, 95359: 228, 102542: 229, 146106: 230, 119602: 231, 241198: 232, 129794: 233, 88066: 234, 102967: 235, 193499: 236, 47971: 237, 87610: 238, 12657: 239, 31238: 240, 115120: 241, 122193: 242, 129324: 243, 187670: 244, 128085: 245, 128060: 246, 265313: 247, 44595: 248, 31826: 249, 16966: 250, 85993: 251, 110973: 252, 98741: 253, 129074: 254, 177861: 255, 111657: 256, 94128: 257, 146175: 258, 116599: 259, 126492: 260, 148028: 261, 11690: 262, 69971: 263, 264191: 264, 120892: 265, 83684: 266, 157811: 267, 276161: 268, 150896: 269, 262998: 270, 75777: 271, 174861: 272, 107895: 273, 149661: 274, 69042: 275, 197396: 276, 202675: 277, 245963: 278, 278418: 279, 169784: 280, 107784: 281, 57606: 282, 164465: 283, 13582: 284, 263585: 285, 69078: 286, 135149: 287, 119575: 288, 104484: 289, 196077: 290, 150411: 291, 209631: 292, 264951: 293, 16982: 294, 124363: 295, 49582: 296, 26544: 297, 73902: 298, 196502: 299, 260183: 300, 235105: 301, 113383: 302, 195441: 303, 68249: 304, 270264: 305, 75825: 306, 205196: 307, 256407: 308, 172477: 309, 241179: 310, 268013: 311, 181956: 312, 60244: 313, 17247: 314, 41084: 315, 156150: 316, 271261: 317, 114868: 318, 189835: 319, 62465: 320, 158033: 321, 207498: 322, 205943: 323, 71071: 324, 93631: 325, 14638: 326, 69232: 327, 39646: 328, 111550: 329, 37644: 330, 48046: 331, 85992: 332, 89192: 333, 16795: 334, 270897: 335, 1733: 336, 152942: 337, 251003: 338, 259488: 339, 25131: 340, 47396: 341, 79186: 342, 214521: 343, 36288: 344, 124089: 345, 225186: 346, 244171: 347, 261105: 348, 164675: 349, 268056: 350, 178181: 351, 264525: 352, 231897: 353, 16721: 354, 261037: 355, 127129: 356, 1903: 357, 126374: 358, 98297: 359, 266249: 360, 166596: 361, 79942: 362, 153723: 363, 177458: 364, 110808: 365, 242273: 366, 9417: 367, 113519: 368, 141373: 369, 152742: 370, 241306: 371, 122881: 372, 180348: 373, 106184: 374, 268622: 375, 85043: 376, 247429: 377, 216099: 378, 236655: 379, 225087: 380, 175886: 381, 188010: 382, 8660: 383, 72636: 384, 111947: 385, 214464: 386, 138397: 387, 131026: 388, 70538: 389, 43246: 390, 30509: 391, 177375: 392, 70585: 393, 168047: 394, 264058: 395, 247240: 396, 53278: 397, 210647: 398, 170575: 399, 76499: 400, 100345: 401, 131402: 402, 121606: 403, 11590: 404, 101517: 405, 81771: 406, 248464: 407, 265383: 408, 3363: 409, 192766: 410, 189120: 411, 3326: 412, 35407: 413, 98900: 414, 262070: 415, 150979: 416, 107021: 417, 87974: 418, 93047: 419, 246617: 420, 226462: 421, 85357: 422, 169870: 423, 27617: 424, 30716: 425, 177373: 426, 110912: 427, 269530: 428, 100038: 429, 27472: 430, 148411: 431, 230496: 432, 229331: 433, 69355: 434, 242299: 435, 147839: 436, 265889: 437, 14642: 438, 156214: 439, 181223: 440, 233731: 441, 107951: 442, 424: 443, 124705: 444, 132924: 445, 202865: 446, 32670: 447, 106280: 448, 223034: 449, 56271: 450, 138380: 451, 242361: 452, 174848: 453, 45208: 454, 37546: 455, 123039: 456, 139070: 457, 42299: 458, 36836: 459, 21356: 460, 26598: 461, 18401: 462, 91478: 463, 185771: 464, 114919: 465, 89891: 466, 81207: 467, 141600: 468, 16488: 469, 45904: 470, 226338: 471, 189666: 472, 265115: 473, 87787: 474, 147847: 475, 262469: 476, 259380: 477, 173879: 478, 175000: 479, 251844: 480, 11629: 481, 166123: 482, 30385: 483, 249791: 484, 167243: 485, 106816: 486, 160803: 487, 252071: 488, 234964: 489, 204489: 490, 137336: 491, 95991: 492, 101209: 493, 61004: 494, 24748: 495, 134118: 496, 131798: 497, 71728: 498, 76626: 499, 52614: 500, 95932: 501, 49144: 502, 260897: 503, 98699: 504, 141426: 505, 123485: 506, 260865: 507, 247752: 508, 35532: 509, 59727: 510, 232048: 511, 192211: 512, 167240: 513, 261829: 514, 182311: 515, 28255: 516, 105187: 517, 2033: 518, 58062: 519, 87746: 520, 8316: 521, 258534: 522, 155136: 523, 98322: 524, 165319: 525, 175536: 526, 89314: 527, 55066: 528, 251140: 529, 56447: 530, 277157: 531, 221115: 532, 162465: 533, 114414: 534, 53392: 535, 247447: 536, 6312: 537, 155219: 538, 248669: 539, 269719: 540, 38273: 541, 272052: 542, 268865: 543, 181687: 544, 272155: 545, 116210: 546, 245128: 547, 147451: 548, 69684: 549, 125203: 550, 198408: 551, 204822: 552, 129255: 553, 71616: 554, 8971: 555, 35124: 556, 131046: 557, 33133: 558, 249386: 559, 196466: 560, 48268: 561, 188483: 562, 106954: 563, 110029: 564, 170518: 565, 64038: 566, 76942: 567, 22023: 568, 112188: 569, 277170: 570, 214573: 571, 20201: 572, 92398: 573, 151806: 574, 43397: 575, 2363: 576, 62895: 577, 82998: 578, 152787: 579, 268932: 580, 73394: 581, 141444: 582, 249128: 583, 267409: 584, 41432: 585, 91832: 586, 219260: 587, 151643: 588, 240859: 589, 239070: 590, 230997: 591, 239092: 592, 199333: 593, 273651: 594, 23902: 595, 65817: 596, 89602: 597, 6251: 598, 97160: 599, 97428: 600, 145449: 601, 156269: 602, 143535: 603, 230708: 604, 198213: 605, 65663: 606, 183196: 607, 185296: 608, 40647: 609, 52676: 610, 114368: 611, 113334: 612, 154469: 613, 4838: 614, 203698: 615, 129389: 616, 238557: 617, 208755: 618, 252695: 619, 38202: 620, 148744: 621, 113983: 622, 210035: 623, 64310: 624, 256226: 625, 230668: 626, 185123: 627, 173291: 628, 62381: 629, 104636: 630, 161037: 631, 262279: 632, 250342: 633, 211919: 634, 10030: 635, 219209: 636, 108827: 637, 52853: 638, 35836: 639, 95193: 640, 56554: 641, 268156: 642, 195057: 643, 269321: 644, 115488: 645, 248259: 646, 173481: 647, 239423: 648, 108155: 649, 244056: 650, 248003: 651, 116428: 652, 240144: 653, 82182: 654, 176190: 655, 190708: 656, 10949: 657, 91203: 658, 242219: 659, 212122: 660, 120908: 661, 135831: 662, 269728: 663, 84024: 664, 223501: 665, 156527: 666, 29204: 667, 31140: 668, 50849: 669, 7286: 670, 99441: 671, 112001: 672, 150364: 673, 70594: 674, 259234: 675, 259363: 676, 38781: 677, 114798: 678, 271836: 679, 150124: 680, 114699: 681, 275210: 682, 265834: 683, 46398: 684, 147141: 685, 46351: 686, 12945: 687, 174596: 688, 190650: 689, 224203: 690, 264903: 691, 183758: 692, 36135: 693, 242646: 694, 144131: 695, 14521: 696, 97607: 697, 122793: 698, 194934: 699, 131855: 700, 26731: 701, 102702: 702, 114920: 703, 274308: 704, 18082: 705, 135277: 706, 106273: 707, 24838: 708, 142062: 709, 98078: 710, 75028: 711, 207349: 712, 56399: 713, 35859: 714, 207148: 715, 59172: 716, 181176: 717, 66591: 718, 30711: 719, 69600: 720, 257204: 721, 64053: 722, 219200: 723, 200674: 724, 156726: 725, 220564: 726, 230522: 727, 201768: 728, 149908: 729, 87141: 730, 113479: 731, 233911: 732, 93629: 733, 250962: 734, 147166: 735, 240700: 736, 40798: 737, 56049: 738, 95492: 739, 172023: 740, 266867: 741, 243913: 742, 222488: 743, 33974: 744, 12824: 745, 38476: 746, 179730: 747, 138441: 748, 52968: 749, 194600: 750, 93565: 751, 210959: 752, 8639: 753, 8870: 754, 39467: 755, 17789: 756, 221445: 757, 49972: 758, 214984: 759, 180495: 760, 21576: 761, 81597: 762, 172192: 763, 92861: 764, 262208: 765, 93485: 766, 156735: 767, 141901: 768, 59150: 769, 12538: 770, 84866: 771, 19429: 772, 64241: 773, 148199: 774, 162155: 775, 124888: 776, 69709: 777, 60277: 778, 70931: 779, 218568: 780, 244790: 781, 177157: 782, 96679: 783, 31609: 784, 64655: 785, 116032: 786, 140253: 787, 48078: 788, 120548: 789, 203240: 790, 152548: 791, 145543: 792, 95316: 793, 33129: 794, 275111: 795, 113315: 796, 270820: 797, 273979: 798, 238779: 799, 154675: 800, 270713: 801, 97434: 802, 254355: 803, 142524: 804, 124079: 805, 243651: 806, 91347: 807, 87742: 808, 262248: 809, 236164: 810, 222207: 811, 51589: 812, 175154: 813, 244688: 814, 238545: 815, 166399: 816, 101546: 817, 152016: 818, 50371: 819, 28537: 820, 40943: 821, 176214: 822, 169563: 823, 239688: 824, 131027: 825, 28004: 826, 266056: 827, 251606: 828, 99341: 829, 130474: 830, 183046: 831, 110475: 832, 160819: 833, 89374: 834, 16916: 835, 236399: 836, 30555: 837, 175003: 838, 129716: 839, 271284: 840, 246678: 841, 68555: 842, 94680: 843, 130847: 844, 15408: 845, 77480: 846, 207494: 847, 37745: 848, 115003: 849, 274838: 850, 120496: 851, 37431: 852, 63287: 853, 100822: 854, 252383: 855, 65054: 856, 230699: 857, 120134: 858, 267282: 859, 153950: 860, 246036: 861, 100644: 862, 79795: 863, 254899: 864, 80810: 865, 175100: 866, 130554: 867, 143253: 868, 163570: 869, 183532: 870, 78394: 871, 167558: 872, 272573: 873, 56959: 874, 13167: 875, 148265: 876, 248477: 877, 81298: 878, 151608: 879, 229501: 880, 251808: 881, 37691: 882, 126487: 883, 40222: 884, 71232: 885, 265918: 886, 87067: 887, 109774: 888, 5443: 889, 43842: 890, 144318: 891, 167813: 892, 57620: 893, 213638: 894, 59784: 895, 160405: 896, 225078: 897, 115161: 898, 57898: 899, 209373: 900, 234614: 901, 158295: 902, 180859: 903, 228998: 904, 56039: 905, 245373: 906, 240543: 907, 10118: 908, 61086: 909, 251422: 910, 44925: 911, 80776: 912, 179739: 913, 179978: 914, 40553: 915, 232959: 916, 126726: 917, 65008: 918, 215006: 919, 37310: 920, 259305: 921, 40664: 922, 90423: 923, 27144: 924, 118228: 925, 185308: 926, 119505: 927, 243899: 928, 179772: 929, 272347: 930, 150316: 931, 106460: 932, 80859: 933, 30035: 934, 233778: 935, 261501: 936, 51094: 937, 265194: 938, 57713: 939, 273190: 940, 28177: 941, 249250: 942, 47329: 943, 208829: 944, 147803: 945, 113817: 946, 250760: 947, 6746: 948, 269157: 949, 110373: 950, 225305: 951, 236948: 952, 164533: 953, 211098: 954, 37950: 955, 261603: 956, 178079: 957, 55858: 958, 258352: 959, 153367: 960, 46197: 961, 112026: 962, 224138: 963, 30810: 964, 30667: 965, 105745: 966, 6577: 967, 68984: 968, 257514: 969, 189345: 970, 238120: 971, 265508: 972, 31611: 973, 212923: 974, 180586: 975, 128693: 976, 264082: 977, 101731: 978, 141062: 979, 85905: 980, 6575: 981, 184118: 982, 24180: 983, 160078: 984, 165452: 985, 117543: 986, 94639: 987, 209516: 988, 30781: 989, 277427: 990, 62659: 991, 253629: 992, 59189: 993, 242445: 994, 44361: 995, 251843: 996, 210485: 997, 129281: 998, 197828: 999, 170869: 1000, 247176: 1001, 4385: 1002, 48313: 1003, 248308: 1004, 21660: 1005, 50073: 1006, 143909: 1007, 272077: 1008, 182459: 1009, 3743: 1010, 63074: 1011, 149084: 1012, 139183: 1013, 268691: 1014, 150968: 1015, 52584: 1016, 40435: 1017, 31983: 1018, 136010: 1019, 219949: 1020, 172030: 1021, 22423: 1022, 23768: 1023, 128622: 1024, 122141: 1025, 264152: 1026, 29743: 1027, 115572: 1028, 170229: 1029, 77940: 1030, 123973: 1031, 3508: 1032, 125411: 1033, 268751: 1034, 60178: 1035, 224118: 1036, 209875: 1037, 218068: 1038, 274004: 1039, 97418: 1040, 46909: 1041, 135367: 1042, 251394: 1043, 240403: 1044, 61147: 1045, 216328: 1046, 275996: 1047, 38664: 1048, 29259: 1049, 9454: 1050, 60488: 1051, 222050: 1052, 147385: 1053, 42093: 1054, 28135: 1055, 4049: 1056, 151107: 1057, 6124: 1058, 186764: 1059, 182987: 1060, 131686: 1061, 25010: 1062, 239850: 1063, 216495: 1064, 123981: 1065, 228764: 1066, 115678: 1067, 249628: 1068, 138301: 1069, 234399: 1070, 152651: 1071, 218836: 1072, 79016: 1073, 92652: 1074, 263791: 1075, 222054: 1076, 80234: 1077, 122045: 1078, 23694: 1079, 184299: 1080, 77270: 1081, 71986: 1082, 55419: 1083, 124942: 1084, 107179: 1085, 98758: 1086, 159440: 1087, 235935: 1088, 249862: 1089, 251504: 1090, 64440: 1091, 71600: 1092, 266807: 1093, 20922: 1094, 162738: 1095, 246513: 1096, 113380: 1097, 5348: 1098, 235684: 1099, 236058: 1100, 182088: 1101, 199359: 1102, 8234: 1103, 16168: 1104, 243077: 1105, 38995: 1106, 211607: 1107, 48217: 1108, 249894: 1109, 149373: 1110, 149043: 1111, 53236: 1112, 197659: 1113, 72992: 1114, 105795: 1115, 233738: 1116, 55927: 1117, 223814: 1118, 149934: 1119, 142973: 1120, 184661: 1121, 86641: 1122, 247010: 1123, 185384: 1124, 173881: 1125, 55065: 1126, 225659: 1127, 108527: 1128, 143175: 1129, 205448: 1130, 203033: 1131, 24132: 1132, 41469: 1133, 262040: 1134, 198412: 1135, 143327: 1136, 170184: 1137, 113939: 1138, 197464: 1139, 121119: 1140, 8681: 1141, 33999: 1142, 243065: 1143, 27606: 1144, 113270: 1145, 256417: 1146, 277195: 1147, 274061: 1148, 63938: 1149, 7841: 1150, 272462: 1151, 236340: 1152, 112412: 1153, 98026: 1154, 78834: 1155, 193168: 1156, 170742: 1157, 137688: 1158, 179718: 1159, 265932: 1160, 176293: 1161, 225996: 1162, 246671: 1163, 150561: 1164, 204474: 1165, 137397: 1166, 236172: 1167, 67690: 1168, 168064: 1169, 184672: 1170, 278188: 1171, 224307: 1172, 250510: 1173, 95923: 1174, 92142: 1175, 167471: 1176, 114988: 1177, 39536: 1178, 26084: 1179, 251730: 1180, 7253: 1181, 263877: 1182, 6703: 1183, 266229: 1184, 225986: 1185, 237376: 1186, 30105: 1187, 161041: 1188, 266872: 1189, 200226: 1190, 268110: 1191, 171765: 1192, 183103: 1193, 61643: 1194, 211944: 1195, 63644: 1196, 26813: 1197, 243585: 1198, 131337: 1199, 190925: 1200, 245623: 1201, 233188: 1202, 205735: 1203, 20445: 1204, 166244: 1205, 153865: 1206, 120515: 1207, 244139: 1208, 51449: 1209, 178780: 1210, 167892: 1211, 157273: 1212, 37712: 1213, 183142: 1214, 183: 1215, 149800: 1216, 124692: 1217, 45416: 1218, 230105: 1219, 6323: 1220, 24544: 1221, 83034: 1222, 213353: 1223, 34521: 1224, 263163: 1225, 6566: 1226, 57468: 1227, 25122: 1228, 65208: 1229, 15997: 1230, 252827: 1231, 215701: 1232, 107244: 1233, 246620: 1234, 257327: 1235, 143837: 1236, 79687: 1237, 227447: 1238, 210717: 1239, 79958: 1240, 245148: 1241, 229862: 1242, 241204: 1243, 116904: 1244, 184639: 1245, 241791: 1246, 222679: 1247, 194646: 1248, 248225: 1249, 49460: 1250, 230249: 1251, 42428: 1252, 230552: 1253, 189516: 1254, 59208: 1255, 189848: 1256, 10067: 1257, 62558: 1258, 40278: 1259, 61901: 1260, 115552: 1261, 123544: 1262, 104443: 1263, 266753: 1264, 193560: 1265, 4090: 1266, 149510: 1267, 68256: 1268, 59685: 1269, 81148: 1270, 92853: 1271, 123430: 1272, 250764: 1273, 272225: 1274, 201898: 1275, 24194: 1276, 105221: 1277, 135673: 1278, 217106: 1279, 262541: 1280, 243213: 1281, 101313: 1282, 28735: 1283, 123095: 1284, 172888: 1285, 52606: 1286, 222945: 1287, 234066: 1288, 74665: 1289, 196492: 1290, 225232: 1291, 92405: 1292, 55490: 1293, 239783: 1294, 178905: 1295, 193337: 1296, 38176: 1297, 107203: 1298, 212467: 1299, 62891: 1300, 36673: 1301, 76458: 1302, 129851: 1303, 12189: 1304, 129465: 1305, 277639: 1306, 130063: 1307, 194669: 1308, 184930: 1309, 8936: 1310, 55607: 1311, 211430: 1312, 195304: 1313, 101046: 1314, 90092: 1315, 120333: 1316, 193106: 1317, 122506: 1318, 110818: 1319, 213906: 1320, 238213: 1321, 179135: 1322, 165342: 1323, 77273: 1324, 28731: 1325, 163699: 1326, 112541: 1327, 230030: 1328, 37817: 1329, 254241: 1330, 20918: 1331, 144348: 1332, 173415: 1333, 41634: 1334, 168034: 1335, 89719: 1336, 144602: 1337, 250359: 1338, 71762: 1339, 239374: 1340, 124010: 1341, 224764: 1342, 110763: 1343, 156319: 1344, 63404: 1345, 259629: 1346, 26871: 1347, 262902: 1348, 241894: 1349, 31393: 1350, 152080: 1351, 255092: 1352, 238864: 1353, 45557: 1354, 53490: 1355, 243785: 1356, 85701: 1357, 206979: 1358, 132836: 1359, 135959: 1360, 79612: 1361, 81045: 1362, 87555: 1363, 75491: 1364, 257550: 1365, 159146: 1366, 21357: 1367, 269439: 1368, 199783: 1369, 55734: 1370, 264317: 1371, 235282: 1372, 58363: 1373, 205474: 1374, 275020: 1375, 233578: 1376, 130438: 1377, 243236: 1378, 255482: 1379, 60583: 1380, 110076: 1381, 253124: 1382, 260771: 1383, 95010: 1384, 92162: 1385, 243876: 1386, 30926: 1387, 126736: 1388, 255218: 1389, 135045: 1390, 38076: 1391, 151702: 1392, 38955: 1393, 78231: 1394, 258938: 1395, 198147: 1396, 52807: 1397, 253852: 1398, 112083: 1399, 268030: 1400, 173632: 1401, 269114: 1402, 21364: 1403, 94923: 1404, 254405: 1405, 202462: 1406, 30276: 1407, 79263: 1408, 276670: 1409, 128045: 1410, 232611: 1411, 241569: 1412, 107453: 1413, 55799: 1414, 8066: 1415, 125774: 1416, 76218: 1417, 64943: 1418, 22252: 1419, 130943: 1420, 51521: 1421, 138073: 1422, 32254: 1423, 275618: 1424, 12982: 1425, 78844: 1426, 88329: 1427, 225810: 1428, 39326: 1429, 251416: 1430, 277478: 1431, 173684: 1432, 224924: 1433, 161348: 1434, 200772: 1435, 254: 1436, 16634: 1437, 251691: 1438, 54258: 1439, 84666: 1440, 70222: 1441, 274325: 1442, 247141: 1443, 177091: 1444, 81977: 1445, 200233: 1446, 269273: 1447, 93377: 1448, 9492: 1449, 127233: 1450, 129780: 1451, 159884: 1452, 85367: 1453, 144531: 1454, 235392: 1455, 101305: 1456, 273770: 1457, 251122: 1458, 196052: 1459, 60140: 1460, 173018: 1461, 163059: 1462, 92693: 1463, 92399: 1464, 87143: 1465, 95025: 1466, 239584: 1467, 19592: 1468, 69389: 1469, 187922: 1470, 95525: 1471, 43061: 1472, 196149: 1473, 3915: 1474, 48753: 1475, 13605: 1476, 178950: 1477, 209464: 1478, 7326: 1479, 66680: 1480, 149178: 1481, 139126: 1482, 270715: 1483, 34676: 1484, 169663: 1485, 37573: 1486, 160062: 1487, 60098: 1488, 67547: 1489, 87712: 1490, 125587: 1491, 141771: 1492, 41889: 1493, 54655: 1494, 131070: 1495, 59180: 1496, 256167: 1497, 29806: 1498, 153621: 1499, 115792: 1500, 167722: 1501, 157247: 1502, 12811: 1503, 97874: 1504, 17667: 1505, 43404: 1506, 204167: 1507, 166694: 1508, 50560: 1509, 192135: 1510, 174791: 1511, 7962: 1512, 232106: 1513, 113364: 1514, 61759: 1515, 204359: 1516, 142121: 1517, 63494: 1518, 178130: 1519, 104736: 1520, 97198: 1521, 88283: 1522, 266522: 1523, 5350: 1524, 275673: 1525, 212142: 1526, 203964: 1527, 72214: 1528, 192093: 1529, 1248: 1530, 144899: 1531, 108815: 1532, 118579: 1533, 113467: 1534, 20852: 1535, 57412: 1536, 77291: 1537, 55187: 1538, 247461: 1539, 192245: 1540, 256402: 1541, 162762: 1542, 17177: 1543, 32440: 1544, 183061: 1545, 49109: 1546, 171817: 1547, 78428: 1548, 46269: 1549, 28938: 1550, 164728: 1551, 179741: 1552, 17859: 1553, 242317: 1554, 31466: 1555, 242849: 1556, 54483: 1557, 189558: 1558, 182014: 1559, 220757: 1560, 96425: 1561, 190335: 1562, 242824: 1563, 234759: 1564, 241548: 1565, 32627: 1566, 147764: 1567, 28900: 1568, 153322: 1569, 99738: 1570, 171445: 1571, 253821: 1572, 193778: 1573, 16459: 1574, 89023: 1575, 161922: 1576, 38023: 1577, 169827: 1578, 213090: 1579, 76460: 1580, 86489: 1581, 177277: 1582, 135736: 1583, 90614: 1584, 180651: 1585, 158925: 1586, 220688: 1587, 196799: 1588, 224646: 1589, 16871: 1590, 35718: 1591, 202277: 1592, 241527: 1593, 38887: 1594, 26516: 1595, 85426: 1596, 3757: 1597, 21484: 1598, 36554: 1599, 15021: 1600, 21252: 1601, 125538: 1602, 175329: 1603, 214620: 1604, 15418: 1605, 192428: 1606, 139321: 1607, 2358: 1608, 31919: 1609, 125692: 1610, 168464: 1611, 160541: 1612, 133571: 1613, 12202: 1614, 139229: 1615, 121667: 1616, 221036: 1617, 114544: 1618, 231237: 1619, 126903: 1620, 104812: 1621, 36606: 1622, 218552: 1623, 229335: 1624, 166922: 1625, 223787: 1626, 16482: 1627, 221050: 1628, 244349: 1629, 7158: 1630, 226394: 1631, 19842: 1632, 24835: 1633, 209756: 1634, 94900: 1635, 236235: 1636, 200643: 1637, 86408: 1638, 819: 1639, 237646: 1640, 205281: 1641, 214134: 1642, 22161: 1643, 141203: 1644, 204255: 1645, 176875: 1646, 232036: 1647, 141710: 1648, 186547: 1649, 222035: 1650, 70318: 1651, 145558: 1652, 95888: 1653, 18464: 1654, 273849: 1655, 56856: 1656, 125303: 1657, 143337: 1658, 73588: 1659, 31049: 1660, 82893: 1661, 67403: 1662, 12863: 1663, 135833: 1664, 200323: 1665, 263825: 1666, 86243: 1667, 243513: 1668, 171467: 1669, 170724: 1670, 135458: 1671, 23571: 1672, 146230: 1673, 61775: 1674, 84126: 1675, 28523: 1676, 145451: 1677, 273714: 1678, 5963: 1679, 31040: 1680, 83637: 1681, 169745: 1682, 198302: 1683, 43443: 1684, 90232: 1685, 82926: 1686, 205969: 1687, 164584: 1688, 158080: 1689, 131594: 1690, 5502: 1691, 128543: 1692, 101559: 1693, 99252: 1694, 252657: 1695, 164706: 1696, 167189: 1697, 193723: 1698, 7128: 1699, 122429: 1700, 32329: 1701, 41842: 1702, 186999: 1703, 246874: 1704, 219254: 1705, 226545: 1706, 112881: 1707, 153718: 1708, 40184: 1709, 101876: 1710, 270489: 1711, 188027: 1712, 43021: 1713, 43006: 1714, 167478: 1715, 177072: 1716, 37293: 1717, 258690: 1718, 138995: 1719, 44520: 1720, 77753: 1721, 101242: 1722, 207411: 1723, 222296: 1724, 229681: 1725, 180128: 1726, 153563: 1727, 260217: 1728, 239752: 1729, 42458: 1730, 141902: 1731, 209160: 1732, 260067: 1733, 268482: 1734, 30985: 1735, 95301: 1736, 275631: 1737, 240568: 1738, 207721: 1739, 168438: 1740, 33200: 1741, 182993: 1742, 31822: 1743, 16908: 1744, 247315: 1745, 19422: 1746, 105517: 1747, 160681: 1748, 249695: 1749, 252385: 1750, 129690: 1751, 31420: 1752, 254064: 1753, 142454: 1754, 31295: 1755, 99347: 1756, 256247: 1757, 12122: 1758, 74187: 1759, 60858: 1760, 80954: 1761, 94411: 1762, 155014: 1763, 213827: 1764, 245827: 1765, 21014: 1766, 112502: 1767, 203649: 1768, 133689: 1769, 81352: 1770, 176667: 1771, 178199: 1772, 74215: 1773, 73467: 1774, 34019: 1775, 219546: 1776, 238699: 1777, 51928: 1778, 50730: 1779, 67079: 1780, 151824: 1781, 242999: 1782, 36213: 1783, 159390: 1784, 209985: 1785, 74466: 1786, 278002: 1787, 268618: 1788, 54218: 1789, 93141: 1790, 97324: 1791, 118434: 1792, 248718: 1793, 191061: 1794, 109122: 1795, 26730: 1796, 205475: 1797, 271833: 1798, 175978: 1799, 241305: 1800, 269009: 1801, 242409: 1802, 270906: 1803, 252865: 1804, 167509: 1805, 192176: 1806, 234359: 1807, 65258: 1808, 135768: 1809, 159033: 1810, 168245: 1811, 237070: 1812, 223906: 1813, 245645: 1814, 150518: 1815, 170634: 1816, 148192: 1817, 258185: 1818, 254376: 1819, 83467: 1820, 26124: 1821, 90971: 1822, 243745: 1823, 199025: 1824, 24539: 1825, 218800: 1826, 140036: 1827, 262399: 1828, 113217: 1829, 80538: 1830, 169223: 1831, 226006: 1832, 136326: 1833, 88170: 1834, 60081: 1835, 231993: 1836, 263325: 1837, 36609: 1838, 163679: 1839, 21011: 1840, 165697: 1841, 218043: 1842, 140358: 1843, 73704: 1844, 204586: 1845, 50533: 1846, 165268: 1847, 119517: 1848, 252900: 1849, 136491: 1850, 47931: 1851, 224904: 1852, 60647: 1853, 250184: 1854, 88976: 1855, 266971: 1856, 136735: 1857, 139580: 1858, 75115: 1859, 103896: 1860, 235842: 1861, 102080: 1862, 104665: 1863, 226393: 1864, 127359: 1865, 204591: 1866, 65487: 1867, 188162: 1868, 97848: 1869, 8873: 1870, 271538: 1871, 240470: 1872, 210597: 1873, 214244: 1874, 243883: 1875, 177090: 1876, 81682: 1877, 105058: 1878, 195694: 1879, 172406: 1880, 32703: 1881, 182403: 1882, 102359: 1883, 50547: 1884, 168642: 1885, 128208: 1886, 65145: 1887, 118333: 1888, 124818: 1889, 116122: 1890, 236618: 1891, 239010: 1892, 168184: 1893, 14958: 1894, 61211: 1895, 109864: 1896, 267444: 1897, 226713: 1898, 52203: 1899, 207669: 1900, 164944: 1901, 18770: 1902, 189286: 1903, 92282: 1904, 111924: 1905, 133747: 1906, 127557: 1907, 193208: 1908, 215326: 1909, 71812: 1910, 18067: 1911, 217121: 1912, 12641: 1913, 209870: 1914, 109049: 1915, 177704: 1916, 208768: 1917, 277124: 1918, 229703: 1919, 112093: 1920, 30072: 1921, 30972: 1922, 236030: 1923, 17950: 1924, 24941: 1925, 196738: 1926, 100783: 1927, 115473: 1928, 16759: 1929, 51526: 1930, 208791: 1931, 187474: 1932, 237268: 1933, 108243: 1934, 98674: 1935, 78506: 1936, 142745: 1937, 60337: 1938, 184532: 1939, 63170: 1940, 35141: 1941, 66797: 1942, 200891: 1943, 255255: 1944, 223233: 1945, 50628: 1946, 49660: 1947, 94883: 1948, 138955: 1949, 11944: 1950, 266094: 1951, 144189: 1952, 225799: 1953, 167800: 1954, 153254: 1955, 213843: 1956, 69378: 1957, 186858: 1958, 139643: 1959, 257012: 1960, 147230: 1961, 146348: 1962, 243720: 1963, 43619: 1964, 222220: 1965, 80803: 1966, 79950: 1967, 203621: 1968, 167223: 1969, 274618: 1970, 18445: 1971, 136142: 1972, 242106: 1973, 99919: 1974, 225351: 1975, 8245: 1976, 277895: 1977, 75860: 1978, 39400: 1979, 196160: 1980, 205980: 1981, 184158: 1982, 142861: 1983, 212088: 1984, 163804: 1985, 178265: 1986, 12272: 1987, 266840: 1988, 266283: 1989, 248496: 1990, 35042: 1991, 179853: 1992, 67930: 1993, 92979: 1994, 127727: 1995, 85526: 1996, 273976: 1997, 66443: 1998, 104654: 1999, 253447: 2000, 80555: 2001, 237389: 2002, 189721: 2003, 99929: 2004, 45107: 2005, 189655: 2006, 19935: 2007, 3930: 2008, 170804: 2009, 105979: 2010, 135909: 2011, 96475: 2012, 235806: 2013, 144642: 2014, 213350: 2015, 103079: 2016, 234685: 2017, 157508: 2018, 245257: 2019, 223702: 2020, 43873: 2021, 266808: 2022, 34776: 2023, 242007: 2024, 270605: 2025, 236727: 2026, 176597: 2027, 57449: 2028, 229632: 2029, 250015: 2030, 252869: 2031, 213126: 2032, 28076: 2033, 66431: 2034, 66942: 2035, 189694: 2036, 33888: 2037, 142024: 2038, 256072: 2039, 116582: 2040, 10716: 2041, 146195: 2042, 191795: 2043, 136851: 2044, 154137: 2045, 153079: 2046, 269883: 2047, 18995: 2048, 36715: 2049, 170947: 2050, 207003: 2051, 17596: 2052, 55941: 2053, 167166: 2054, 141157: 2055, 229313: 2056, 72770: 2057, 263460: 2058, 217318: 2059, 149802: 2060, 64041: 2061, 277168: 2062, 65908: 2063, 24945: 2064, 118135: 2065, 91026: 2066, 139109: 2067, 135383: 2068, 78067: 2069, 81088: 2070, 76151: 2071, 187763: 2072, 262186: 2073, 80683: 2074, 152435: 2075, 259004: 2076, 208671: 2077, 54622: 2078, 96955: 2079, 124993: 2080, 65874: 2081, 131126: 2082, 204780: 2083, 25032: 2084, 101620: 2085, 206932: 2086, 56553: 2087, 33580: 2088, 271558: 2089, 109955: 2090, 175002: 2091, 240770: 2092, 201147: 2093, 252848: 2094, 230253: 2095, 132203: 2096, 142823: 2097, 206074: 2098, 14387: 2099, 144162: 2100, 232343: 2101, 276538: 2102, 66619: 2103, 189754: 2104, 202960: 2105, 220498: 2106, 254904: 2107, 190177: 2108, 144106: 2109, 128206: 2110, 208907: 2111, 58594: 2112, 27462: 2113, 46297: 2114, 106693: 2115, 183340: 2116, 189844: 2117, 77383: 2118, 24462: 2119, 261800: 2120, 72451: 2121, 60050: 2122, 88288: 2123, 86033: 2124, 123261: 2125, 141601: 2126, 165232: 2127, 157558: 2128, 188295: 2129, 26593: 2130, 44743: 2131, 110382: 2132, 98787: 2133, 60707: 2134, 166934: 2135, 78471: 2136, 172613: 2137, 129563: 2138, 206044: 2139, 176062: 2140, 214821: 2141, 200493: 2142, 27612: 2143, 250163: 2144, 225199: 2145, 3346: 2146, 86193: 2147, 81303: 2148, 258884: 2149, 154663: 2150, 174830: 2151, 201674: 2152, 180917: 2153, 199431: 2154, 203110: 2155, 63854: 2156, 92827: 2157, 145003: 2158, 23288: 2159, 10047: 2160, 90534: 2161, 224249: 2162, 141010: 2163, 84831: 2164, 270784: 2165, 250645: 2166, 21659: 2167, 154671: 2168, 17507: 2169, 231255: 2170, 23872: 2171, 66304: 2172, 191675: 2173, 32195: 2174, 110483: 2175, 224435: 2176, 24186: 2177, 266865: 2178, 202173: 2179, 14230: 2180, 136916: 2181, 238541: 2182, 102571: 2183, 74659: 2184, 60461: 2185, 202706: 2186, 223087: 2187, 169252: 2188, 24123: 2189, 85345: 2190, 79916: 2191, 86107: 2192, 47857: 2193, 164027: 2194, 124489: 2195, 187981: 2196, 172216: 2197, 19711: 2198, 51974: 2199, 49980: 2200, 103688: 2201, 71470: 2202, 96474: 2203, 241756: 2204, 240445: 2205, 142479: 2206, 113723: 2207, 92706: 2208, 246657: 2209, 183101: 2210, 51752: 2211, 202738: 2212, 22813: 2213, 151537: 2214, 114279: 2215, 40885: 2216, 230405: 2217, 185671: 2218, 93936: 2219, 217740: 2220, 161882: 2221, 267081: 2222, 203502: 2223, 39527: 2224, 2442: 2225, 242758: 2226, 241012: 2227, 265680: 2228, 273461: 2229, 6564: 2230, 12990: 2231, 182414: 2232, 94683: 2233, 248356: 2234, 104939: 2235, 264300: 2236, 239061: 2237, 271144: 2238, 247958: 2239, 185519: 2240, 238179: 2241, 244727: 2242, 88389: 2243, 245328: 2244, 236112: 2245, 56066: 2246, 90146: 2247, 41757: 2248, 259118: 2249, 119556: 2250, 167925: 2251, 105596: 2252, 69810: 2253, 24921: 2254, 157353: 2255, 240829: 2256, 206691: 2257, 133417: 2258, 98475: 2259, 32483: 2260, 67997: 2261, 8652: 2262, 46436: 2263, 193529: 2264, 175189: 2265, 98904: 2266, 3329: 2267, 177186: 2268, 171165: 2269, 92810: 2270, 170732: 2271, 106007: 2272, 115234: 2273, 197700: 2274, 255493: 2275, 268262: 2276, 244264: 2277, 23518: 2278, 250447: 2279, 210874: 2280, 81128: 2281, 55806: 2282, 151928: 2283, 144293: 2284, 215024: 2285, 31136: 2286, 130950: 2287, 72940: 2288, 132663: 2289, 35185: 2290, 9571: 2291, 199772: 2292, 7409: 2293, 179690: 2294, 272993: 2295, 240888: 2296, 171970: 2297, 103336: 2298, 216466: 2299, 224923: 2300, 250539: 2301, 226879: 2302, 70401: 2303, 106294: 2304, 203161: 2305, 53174: 2306, 174986: 2307, 126388: 2308, 261160: 2309, 176879: 2310, 214890: 2311, 175399: 2312, 194803: 2313, 37493: 2314, 179826: 2315, 213207: 2316, 225411: 2317, 112457: 2318, 4907: 2319, 71905: 2320, 255252: 2321, 250258: 2322, 41700: 2323, 123056: 2324, 34581: 2325, 169699: 2326, 7125: 2327, 110008: 2328, 91002: 2329, 48579: 2330, 243966: 2331, 240401: 2332, 66204: 2333, 232655: 2334, 154773: 2335, 43118: 2336, 51082: 2337, 258334: 2338, 10699: 2339, 69601: 2340, 235405: 2341, 188287: 2342, 193584: 2343, 88116: 2344, 110214: 2345, 189632: 2346, 114349: 2347, 154519: 2348, 223066: 2349, 203603: 2350, 200196: 2351, 189893: 2352, 96054: 2353, 167521: 2354, 56884: 2355, 124597: 2356, 226003: 2357, 171602: 2358, 217986: 2359, 76710: 2360, 51545: 2361, 75895: 2362, 242073: 2363, 93370: 2364, 177432: 2365, 31391: 2366, 138097: 2367, 191524: 2368, 246959: 2369, 239942: 2370, 199378: 2371, 158226: 2372, 222830: 2373, 192158: 2374, 8487: 2375, 252609: 2376, 276680: 2377, 95593: 2378, 39281: 2379, 9993: 2380, 82511: 2381, 38654: 2382, 31094: 2383, 187065: 2384, 257548: 2385, 277314: 2386, 212645: 2387, 108285: 2388, 47786: 2389, 270334: 2390, 125928: 2391, 120860: 2392, 187809: 2393, 167492: 2394, 4622: 2395, 251164: 2396, 234734: 2397, 255743: 2398, 160393: 2399, 238008: 2400, 234816: 2401, 87702: 2402, 166824: 2403, 126693: 2404, 40505: 2405, 244309: 2406, 79740: 2407, 204311: 2408, 200746: 2409, 53614: 2410, 155463: 2411, 144997: 2412, 204522: 2413, 268330: 2414, 251721: 2415, 28360: 2416, 240567: 2417, 39705: 2418, 80075: 2419, 157655: 2420, 242465: 2421, 95452: 2422, 109197: 2423, 199357: 2424, 258970: 2425, 208406: 2426, 90731: 2427, 93363: 2428, 251642: 2429, 177040: 2430, 223442: 2431, 165457: 2432, 177180: 2433, 44362: 2434, 67237: 2435, 173540: 2436, 255618: 2437, 254498: 2438, 16827: 2439, 37560: 2440, 155376: 2441, 118484: 2442, 276925: 2443, 208674: 2444, 101887: 2445, 115490: 2446, 218640: 2447, 33474: 2448, 261998: 2449, 151404: 2450, 10314: 2451, 190459: 2452, 206944: 2453, 39502: 2454, 162311: 2455, 59361: 2456, 190709: 2457, 257028: 2458, 66792: 2459, 216683: 2460, 212835: 2461, 238301: 2462, 218010: 2463, 181011: 2464, 12512: 2465, 271195: 2466, 5543: 2467, 150297: 2468, 274301: 2469, 170997: 2470, 25792: 2471, 155407: 2472, 264031: 2473, 224349: 2474, 82607: 2475, 167205: 2476, 249407: 2477, 160558: 2478, 4243: 2479, 198699: 2480, 244517: 2481, 60424: 2482, 210311: 2483, 258553: 2484, 227392: 2485, 135785: 2486, 35931: 2487, 5896: 2488, 138189: 2489, 219993: 2490, 21343: 2491, 63024: 2492, 263500: 2493, 209156: 2494, 8584: 2495, 241036: 2496, 115392: 2497, 191694: 2498, 229282: 2499, 116313: 2500, 140005: 2501, 141819: 2502, 98783: 2503, 167611: 2504, 247591: 2505, 91113: 2506, 175052: 2507, 35352: 2508, 55097: 2509, 95250: 2510, 19843: 2511, 217056: 2512, 142093: 2513, 229899: 2514, 273718: 2515, 20755: 2516, 52620: 2517, 125396: 2518, 226775: 2519, 242006: 2520, 196253: 2521, 171096: 2522, 60029: 2523, 85851: 2524, 269309: 2525, 131913: 2526, 145165: 2527, 2189: 2528, 229329: 2529, 272796: 2530, 245410: 2531, 277075: 2532, 68846: 2533, 36811: 2534, 173790: 2535, 130705: 2536, 67068: 2537, 227930: 2538, 28492: 2539, 65219: 2540, 74758: 2541, 159116: 2542, 30735: 2543, 87072: 2544, 4435: 2545, 82497: 2546, 168763: 2547, 73681: 2548, 153103: 2549, 7283: 2550, 121135: 2551, 33327: 2552, 24697: 2553, 93085: 2554, 130792: 2555, 9034: 2556, 112335: 2557, 146321: 2558, 275041: 2559, 146932: 2560, 246512: 2561, 157916: 2562, 2622: 2563, 24413: 2564, 152514: 2565, 65549: 2566, 222896: 2567, 87929: 2568, 78529: 2569, 34837: 2570, 2417: 2571, 45729: 2572, 130571: 2573, 39386: 2574, 84201: 2575, 13935: 2576, 114865: 2577, 65153: 2578, 273380: 2579, 70703: 2580, 28454: 2581, 117173: 2582, 130872: 2583, 143103: 2584, 96771: 2585, 205383: 2586, 55615: 2587, 15869: 2588, 25048: 2589, 72238: 2590, 20688: 2591, 231857: 2592, 14923: 2593, 221297: 2594, 76390: 2595, 100506: 2596, 19866: 2597, 243328: 2598, 255648: 2599, 235486: 2600, 42651: 2601, 9414: 2602, 232067: 2603, 215942: 2604, 224316: 2605, 39019: 2606, 97722: 2607, 72370: 2608, 47152: 2609, 187103: 2610, 237990: 2611, 29483: 2612, 243714: 2613, 79556: 2614, 267328: 2615, 63370: 2616, 131243: 2617, 127029: 2618, 11242: 2619, 99146: 2620, 246730: 2621, 15642: 2622, 31984: 2623, 243294: 2624, 18172: 2625, 254144: 2626, 268723: 2627, 85280: 2628, 145194: 2629, 100459: 2630, 182053: 2631, 233739: 2632, 136252: 2633, 251613: 2634, 138844: 2635, 270828: 2636, 100782: 2637, 42043: 2638, 212697: 2639, 257971: 2640, 109783: 2641, 26883: 2642, 12854: 2643, 174038: 2644, 21083: 2645, 52363: 2646, 11718: 2647, 209742: 2648, 84716: 2649, 30551: 2650, 136291: 2651, 12100: 2652, 248570: 2653, 199375: 2654, 58252: 2655, 136430: 2656, 190439: 2657, 172512: 2658, 192243: 2659, 157945: 2660, 202430: 2661, 95902: 2662, 83109: 2663, 75591: 2664, 44467: 2665, 209498: 2666, 50219: 2667, 191815: 2668, 199542: 2669, 136473: 2670, 179857: 2671, 259543: 2672, 251157: 2673, 203764: 2674, 72283: 2675, 152502: 2676, 275306: 2677, 275281: 2678, 52917: 2679, 233374: 2680, 270989: 2681, 244286: 2682, 173743: 2683, 210792: 2684, 219008: 2685, 38590: 2686, 76905: 2687, 6004: 2688, 13347: 2689, 203047: 2690, 177073: 2691, 53300: 2692, 123790: 2693, 234828: 2694, 188676: 2695, 49514: 2696, 170054: 2697, 232522: 2698, 20448: 2699, 111677: 2700, 59616: 2701, 239421: 2702, 13273: 2703, 111578: 2704, 110040: 2705, 242639: 2706, 269397: 2707, 157038: 2708, 87540: 2709, 164738: 2710, 60347: 2711, 250405: 2712, 179501: 2713, 237727: 2714, 130966: 2715, 28877: 2716, 16718: 2717, 53775: 2718, 31533: 2719, 102164: 2720, 132030: 2721, 241666: 2722, 180840: 2723, 55505: 2724, 201290: 2725, 124487: 2726, 168999: 2727, 111104: 2728, 206563: 2729, 2615: 2730, 41057: 2731, 58342: 2732, 46386: 2733, 138015: 2734, 81368: 2735, 170513: 2736, 259625: 2737, 277984: 2738, 94951: 2739, 219650: 2740, 59269: 2741, 150554: 2742, 132500: 2743, 242316: 2744, 85623: 2745, 196721: 2746, 75215: 2747, 182208: 2748, 252262: 2749, 256844: 2750, 250300: 2751, 184265: 2752, 118533: 2753, 252846: 2754, 107736: 2755, 211977: 2756, 192101: 2757, 204813: 2758, 125039: 2759, 188171: 2760, 68272: 2761, 159376: 2762, 102375: 2763, 196343: 2764, 238526: 2765, 268259: 2766, 208788: 2767, 204696: 2768, 254750: 2769, 274400: 2770, 227176: 2771, 102154: 2772, 88677: 2773, 114203: 2774, 104657: 2775, 88757: 2776, 157799: 2777, 164323: 2778, 263329: 2779, 61845: 2780, 25409: 2781, 237194: 2782, 113292: 2783, 125918: 2784, 74559: 2785, 69790: 2786, 41136: 2787, 24933: 2788, 202348: 2789, 117176: 2790, 107889: 2791, 218360: 2792, 132492: 2793, 100578: 2794, 272273: 2795, 160295: 2796, 187517: 2797, 187410: 2798, 255296: 2799, 222293: 2800, 183935: 2801, 115567: 2802, 223530: 2803, 196053: 2804, 234721: 2805, 196214: 2806, 195100: 2807, 254053: 2808, 187598: 2809, 259901: 2810, 222674: 2811, 236251: 2812, 213523: 2813, 119858: 2814, 43645: 2815, 205783: 2816, 169400: 2817, 216501: 2818, 257554: 2819, 8890: 2820, 14422: 2821, 229510: 2822, 52199: 2823, 200585: 2824, 122829: 2825, 36141: 2826, 219951: 2827, 205404: 2828, 103811: 2829, 161449: 2830, 270776: 2831, 272980: 2832, 7079: 2833, 183995: 2834, 27741: 2835, 160434: 2836, 26527: 2837, 218359: 2838, 236994: 2839, 4571: 2840, 20350: 2841, 92090: 2842, 28591: 2843, 142039: 2844, 176560: 2845, 275744: 2846, 187520: 2847, 120111: 2848, 190298: 2849, 207180: 2850, 2276: 2851, 258467: 2852, 61619: 2853, 277203: 2854, 78553: 2855, 124983: 2856, 93179: 2857, 102642: 2858, 10103: 2859, 107773: 2860, 75783: 2861, 125755: 2862, 132527: 2863, 216722: 2864, 160406: 2865, 178201: 2866, 268171: 2867, 2977: 2868, 248274: 2869, 169779: 2870, 97469: 2871, 13540: 2872, 20855: 2873, 222607: 2874, 191238: 2875, 76483: 2876, 68491: 2877, 37034: 2878, 36582: 2879, 31514: 2880, 249723: 2881, 212219: 2882, 126827: 2883, 125539: 2884, 84773: 2885, 224944: 2886, 55493: 2887, 38679: 2888, 161101: 2889, 85805: 2890, 203531: 2891, 60569: 2892, 223474: 2893, 251423: 2894, 143294: 2895, 236237: 2896, 41538: 2897, 50700: 2898, 107510: 2899, 92139: 2900, 203820: 2901, 264844: 2902, 23650: 2903, 64723: 2904, 12780: 2905, 144134: 2906, 48213: 2907, 180772: 2908, 93364: 2909, 92498: 2910, 124066: 2911, 268589: 2912, 54812: 2913, 123744: 2914, 104211: 2915, 170227: 2916, 58855: 2917, 73053: 2918, 187343: 2919, 143860: 2920, 278221: 2921, 274609: 2922, 154529: 2923, 264321: 2924, 265487: 2925, 202501: 2926, 242381: 2927, 50566: 2928, 13259: 2929, 252356: 2930, 96335: 2931, 57747: 2932, 75568: 2933, 47982: 2934, 94347: 2935, 94744: 2936, 162590: 2937, 70402: 2938, 125440: 2939, 174978: 2940, 174216: 2941, 269575: 2942, 210285: 2943, 20149: 2944, 117963: 2945, 191915: 2946, 260760: 2947, 216012: 2948, 39616: 2949, 72707: 2950, 38503: 2951, 174700: 2952, 150762: 2953, 144194: 2954, 162571: 2955, 77523: 2956, 153869: 2957, 149722: 2958, 8067: 2959, 246634: 2960, 232964: 2961, 11477: 2962, 259650: 2963, 2375: 2964, 44556: 2965, 272538: 2966, 224121: 2967, 254676: 2968, 89911: 2969, 16818: 2970, 51883: 2971, 224000: 2972, 185592: 2973, 49773: 2974, 143163: 2975, 69331: 2976, 260840: 2977, 61762: 2978, 5765: 2979, 164617: 2980, 250398: 2981, 244955: 2982, 178035: 2983, 84437: 2984, 189501: 2985, 59820: 2986, 87155: 2987, 29117: 2988, 180804: 2989, 266580: 2990, 104311: 2991, 53395: 2992, 133866: 2993, 59148: 2994, 5983: 2995, 134247: 2996, 199209: 2997, 244124: 2998, 178195: 2999, 243131: 3000, 214809: 3001, 158063: 3002, 264637: 3003, 143480: 3004, 130482: 3005, 91194: 3006, 41086: 3007, 121137: 3008, 181076: 3009, 20450: 3010, 44368: 3011, 121173: 3012, 51386: 3013, 255546: 3014, 243429: 3015, 190521: 3016, 188690: 3017, 232449: 3018, 165308: 3019, 140069: 3020, 15213: 3021, 182086: 3022, 150814: 3023, 152028: 3024, 55548: 3025, 84729: 3026, 8695: 3027, 126738: 3028, 251113: 3029, 86728: 3030, 188273: 3031, 243: 3032, 211605: 3033, 229409: 3034, 131675: 3035, 154125: 3036, 247575: 3037, 108005: 3038, 189375: 3039, 221995: 3040, 1022: 3041, 240418: 3042, 231767: 3043, 138883: 3044, 30120: 3045, 187088: 3046, 63956: 3047, 181254: 3048, 196930: 3049, 264027: 3050, 158846: 3051, 162376: 3052, 268026: 3053, 57105: 3054, 139387: 3055, 59305: 3056, 37311: 3057, 83589: 3058, 51128: 3059, 217252: 3060, 145916: 3061, 263418: 3062, 21112: 3063, 139668: 3064, 267680: 3065, 163540: 3066, 132407: 3067, 171968: 3068, 7620: 3069, 93426: 3070, 94952: 3071, 199928: 3072, 27092: 3073, 261641: 3074, 185254: 3075, 103602: 3076, 137742: 3077, 94781: 3078, 8290: 3079, 100908: 3080, 71712: 3081, 6563: 3082, 25311: 3083, 265281: 3084, 266658: 3085, 244253: 3086, 66365: 3087, 27740: 3088, 39584: 3089, 28634: 3090, 238065: 3091, 212325: 3092, 123468: 3093, 194358: 3094, 20851: 3095, 29855: 3096, 238625: 3097, 207466: 3098, 62701: 3099, 230672: 3100, 233529: 3101, 199144: 3102, 244042: 3103, 229184: 3104, 71494: 3105, 257544: 3106, 45064: 3107, 187256: 3108, 135170: 3109, 262569: 3110, 194637: 3111, 213066: 3112, 171222: 3113, 254206: 3114, 4131: 3115, 46983: 3116, 274000: 3117, 32773: 3118, 29505: 3119, 38718: 3120, 44089: 3121, 241810: 3122, 266193: 3123, 67663: 3124, 114217: 3125, 136205: 3126, 155495: 3127, 52586: 3128, 74833: 3129, 187536: 3130, 167349: 3131, 265751: 3132, 120598: 3133, 155580: 3134, 189151: 3135, 37208: 3136, 67141: 3137, 121766: 3138, 237271: 3139, 254780: 3140, 141493: 3141, 253228: 3142, 170385: 3143, 62009: 3144, 86555: 3145, 203058: 3146, 56781: 3147, 214937: 3148, 81492: 3149, 124874: 3150, 170734: 3151, 101513: 3152, 89307: 3153, 29255: 3154, 274220: 3155, 78722: 3156, 244662: 3157, 196137: 3158, 190831: 3159, 77052: 3160, 96448: 3161, 187031: 3162, 119749: 3163, 152186: 3164, 2488: 3165, 117595: 3166, 46389: 3167, 163824: 3168, 262391: 3169, 216444: 3170, 149069: 3171, 238921: 3172, 128557: 3173, 162227: 3174, 250683: 3175, 136037: 3176, 58358: 3177, 105718: 3178, 179288: 3179, 246318: 3180, 262577: 3181, 278332: 3182, 106988: 3183, 162562: 3184, 210259: 3185, 189882: 3186, 209394: 3187, 33070: 3188, 232945: 3189, 59254: 3190, 61078: 3191, 119281: 3192, 216381: 3193, 136139: 3194, 207499: 3195, 80826: 3196, 259930: 3197, 150002: 3198, 211136: 3199, 105968: 3200, 206583: 3201, 140000: 3202, 266595: 3203, 88693: 3204, 213197: 3205, 232403: 3206}\n",
            "encoded angka ke User-ID:  {0: 179467, 1: 13093, 2: 148191, 3: 211426, 4: 11601, 5: 200978, 6: 71902, 7: 31556, 8: 94853, 9: 35857, 10: 164096, 11: 269566, 12: 136585, 13: 203968, 14: 187145, 15: 202711, 16: 3543, 17: 30273, 18: 167587, 19: 174304, 20: 222801, 21: 182085, 22: 249096, 23: 40471, 24: 102532, 25: 89207, 26: 11676, 27: 193063, 28: 227520, 29: 25261, 30: 229011, 31: 22229, 32: 270829, 33: 164480, 34: 275970, 35: 8737, 36: 268987, 37: 170415, 38: 141865, 39: 217375, 40: 29101, 41: 20115, 42: 174388, 43: 240287, 44: 145641, 45: 204663, 46: 123883, 47: 153662, 48: 59971, 49: 2793, 50: 163683, 51: 64946, 52: 259022, 53: 55492, 54: 16161, 55: 27647, 56: 98391, 57: 209238, 58: 146113, 59: 162639, 60: 138198, 61: 128696, 62: 254465, 63: 159863, 64: 63714, 65: 151068, 66: 240883, 67: 126053, 68: 78783, 69: 226553, 70: 217811, 71: 26535, 72: 27676, 73: 141325, 74: 130195, 75: 62755, 76: 177690, 77: 213628, 78: 130168, 79: 9908, 80: 168387, 81: 137589, 82: 222138, 83: 28204, 84: 172742, 85: 38556, 86: 222019, 87: 43807, 88: 173835, 89: 35050, 90: 259260, 91: 242878, 92: 266331, 93: 147965, 94: 49277, 95: 128257, 96: 77809, 97: 171986, 98: 77860, 99: 248901, 100: 105028, 101: 128835, 102: 79933, 103: 148258, 104: 50114, 105: 50206, 106: 13552, 107: 42400, 108: 259035, 109: 77181, 110: 11993, 111: 238781, 112: 171118, 113: 173860, 114: 234623, 115: 158794, 116: 56591, 117: 189334, 118: 258152, 119: 62966, 120: 257700, 121: 84749, 122: 156467, 123: 31308, 124: 98686, 125: 58790, 126: 233784, 127: 201349, 128: 102275, 129: 185233, 130: 190056, 131: 180815, 132: 212898, 133: 154465, 134: 131837, 135: 31315, 136: 178667, 137: 157969, 138: 116107, 139: 121251, 140: 131032, 141: 76352, 142: 37929, 143: 216097, 144: 229551, 145: 102676, 146: 1083, 147: 127429, 148: 242083, 149: 170192, 150: 161685, 151: 7346, 152: 96502, 153: 225763, 154: 115929, 155: 223325, 156: 173679, 157: 263918, 158: 221136, 159: 138382, 160: 204864, 161: 88733, 162: 193220, 163: 151408, 164: 131751, 165: 97833, 166: 265595, 167: 164905, 168: 198711, 169: 58607, 170: 179744, 171: 100906, 172: 145619, 173: 266226, 174: 21031, 175: 39440, 176: 129358, 177: 111019, 178: 152249, 179: 85534, 180: 205355, 181: 25981, 182: 236283, 183: 163973, 184: 255471, 185: 127813, 186: 69697, 187: 241614, 188: 126843, 189: 2766, 190: 103277, 191: 252292, 192: 13082, 193: 207246, 194: 177233, 195: 129008, 196: 246655, 197: 165375, 198: 206534, 199: 63394, 200: 24627, 201: 101851, 202: 127200, 203: 232131, 204: 102059, 205: 264355, 206: 183287, 207: 201209, 208: 159702, 209: 76888, 210: 76815, 211: 231210, 212: 246507, 213: 226991, 214: 243491, 215: 207965, 216: 239966, 217: 197775, 218: 106225, 219: 81609, 220: 244189, 221: 81332, 222: 99227, 223: 163488, 224: 43359, 225: 9747, 226: 136348, 227: 92547, 228: 95359, 229: 102542, 230: 146106, 231: 119602, 232: 241198, 233: 129794, 234: 88066, 235: 102967, 236: 193499, 237: 47971, 238: 87610, 239: 12657, 240: 31238, 241: 115120, 242: 122193, 243: 129324, 244: 187670, 245: 128085, 246: 128060, 247: 265313, 248: 44595, 249: 31826, 250: 16966, 251: 85993, 252: 110973, 253: 98741, 254: 129074, 255: 177861, 256: 111657, 257: 94128, 258: 146175, 259: 116599, 260: 126492, 261: 148028, 262: 11690, 263: 69971, 264: 264191, 265: 120892, 266: 83684, 267: 157811, 268: 276161, 269: 150896, 270: 262998, 271: 75777, 272: 174861, 273: 107895, 274: 149661, 275: 69042, 276: 197396, 277: 202675, 278: 245963, 279: 278418, 280: 169784, 281: 107784, 282: 57606, 283: 164465, 284: 13582, 285: 263585, 286: 69078, 287: 135149, 288: 119575, 289: 104484, 290: 196077, 291: 150411, 292: 209631, 293: 264951, 294: 16982, 295: 124363, 296: 49582, 297: 26544, 298: 73902, 299: 196502, 300: 260183, 301: 235105, 302: 113383, 303: 195441, 304: 68249, 305: 270264, 306: 75825, 307: 205196, 308: 256407, 309: 172477, 310: 241179, 311: 268013, 312: 181956, 313: 60244, 314: 17247, 315: 41084, 316: 156150, 317: 271261, 318: 114868, 319: 189835, 320: 62465, 321: 158033, 322: 207498, 323: 205943, 324: 71071, 325: 93631, 326: 14638, 327: 69232, 328: 39646, 329: 111550, 330: 37644, 331: 48046, 332: 85992, 333: 89192, 334: 16795, 335: 270897, 336: 1733, 337: 152942, 338: 251003, 339: 259488, 340: 25131, 341: 47396, 342: 79186, 343: 214521, 344: 36288, 345: 124089, 346: 225186, 347: 244171, 348: 261105, 349: 164675, 350: 268056, 351: 178181, 352: 264525, 353: 231897, 354: 16721, 355: 261037, 356: 127129, 357: 1903, 358: 126374, 359: 98297, 360: 266249, 361: 166596, 362: 79942, 363: 153723, 364: 177458, 365: 110808, 366: 242273, 367: 9417, 368: 113519, 369: 141373, 370: 152742, 371: 241306, 372: 122881, 373: 180348, 374: 106184, 375: 268622, 376: 85043, 377: 247429, 378: 216099, 379: 236655, 380: 225087, 381: 175886, 382: 188010, 383: 8660, 384: 72636, 385: 111947, 386: 214464, 387: 138397, 388: 131026, 389: 70538, 390: 43246, 391: 30509, 392: 177375, 393: 70585, 394: 168047, 395: 264058, 396: 247240, 397: 53278, 398: 210647, 399: 170575, 400: 76499, 401: 100345, 402: 131402, 403: 121606, 404: 11590, 405: 101517, 406: 81771, 407: 248464, 408: 265383, 409: 3363, 410: 192766, 411: 189120, 412: 3326, 413: 35407, 414: 98900, 415: 262070, 416: 150979, 417: 107021, 418: 87974, 419: 93047, 420: 246617, 421: 226462, 422: 85357, 423: 169870, 424: 27617, 425: 30716, 426: 177373, 427: 110912, 428: 269530, 429: 100038, 430: 27472, 431: 148411, 432: 230496, 433: 229331, 434: 69355, 435: 242299, 436: 147839, 437: 265889, 438: 14642, 439: 156214, 440: 181223, 441: 233731, 442: 107951, 443: 424, 444: 124705, 445: 132924, 446: 202865, 447: 32670, 448: 106280, 449: 223034, 450: 56271, 451: 138380, 452: 242361, 453: 174848, 454: 45208, 455: 37546, 456: 123039, 457: 139070, 458: 42299, 459: 36836, 460: 21356, 461: 26598, 462: 18401, 463: 91478, 464: 185771, 465: 114919, 466: 89891, 467: 81207, 468: 141600, 469: 16488, 470: 45904, 471: 226338, 472: 189666, 473: 265115, 474: 87787, 475: 147847, 476: 262469, 477: 259380, 478: 173879, 479: 175000, 480: 251844, 481: 11629, 482: 166123, 483: 30385, 484: 249791, 485: 167243, 486: 106816, 487: 160803, 488: 252071, 489: 234964, 490: 204489, 491: 137336, 492: 95991, 493: 101209, 494: 61004, 495: 24748, 496: 134118, 497: 131798, 498: 71728, 499: 76626, 500: 52614, 501: 95932, 502: 49144, 503: 260897, 504: 98699, 505: 141426, 506: 123485, 507: 260865, 508: 247752, 509: 35532, 510: 59727, 511: 232048, 512: 192211, 513: 167240, 514: 261829, 515: 182311, 516: 28255, 517: 105187, 518: 2033, 519: 58062, 520: 87746, 521: 8316, 522: 258534, 523: 155136, 524: 98322, 525: 165319, 526: 175536, 527: 89314, 528: 55066, 529: 251140, 530: 56447, 531: 277157, 532: 221115, 533: 162465, 534: 114414, 535: 53392, 536: 247447, 537: 6312, 538: 155219, 539: 248669, 540: 269719, 541: 38273, 542: 272052, 543: 268865, 544: 181687, 545: 272155, 546: 116210, 547: 245128, 548: 147451, 549: 69684, 550: 125203, 551: 198408, 552: 204822, 553: 129255, 554: 71616, 555: 8971, 556: 35124, 557: 131046, 558: 33133, 559: 249386, 560: 196466, 561: 48268, 562: 188483, 563: 106954, 564: 110029, 565: 170518, 566: 64038, 567: 76942, 568: 22023, 569: 112188, 570: 277170, 571: 214573, 572: 20201, 573: 92398, 574: 151806, 575: 43397, 576: 2363, 577: 62895, 578: 82998, 579: 152787, 580: 268932, 581: 73394, 582: 141444, 583: 249128, 584: 267409, 585: 41432, 586: 91832, 587: 219260, 588: 151643, 589: 240859, 590: 239070, 591: 230997, 592: 239092, 593: 199333, 594: 273651, 595: 23902, 596: 65817, 597: 89602, 598: 6251, 599: 97160, 600: 97428, 601: 145449, 602: 156269, 603: 143535, 604: 230708, 605: 198213, 606: 65663, 607: 183196, 608: 185296, 609: 40647, 610: 52676, 611: 114368, 612: 113334, 613: 154469, 614: 4838, 615: 203698, 616: 129389, 617: 238557, 618: 208755, 619: 252695, 620: 38202, 621: 148744, 622: 113983, 623: 210035, 624: 64310, 625: 256226, 626: 230668, 627: 185123, 628: 173291, 629: 62381, 630: 104636, 631: 161037, 632: 262279, 633: 250342, 634: 211919, 635: 10030, 636: 219209, 637: 108827, 638: 52853, 639: 35836, 640: 95193, 641: 56554, 642: 268156, 643: 195057, 644: 269321, 645: 115488, 646: 248259, 647: 173481, 648: 239423, 649: 108155, 650: 244056, 651: 248003, 652: 116428, 653: 240144, 654: 82182, 655: 176190, 656: 190708, 657: 10949, 658: 91203, 659: 242219, 660: 212122, 661: 120908, 662: 135831, 663: 269728, 664: 84024, 665: 223501, 666: 156527, 667: 29204, 668: 31140, 669: 50849, 670: 7286, 671: 99441, 672: 112001, 673: 150364, 674: 70594, 675: 259234, 676: 259363, 677: 38781, 678: 114798, 679: 271836, 680: 150124, 681: 114699, 682: 275210, 683: 265834, 684: 46398, 685: 147141, 686: 46351, 687: 12945, 688: 174596, 689: 190650, 690: 224203, 691: 264903, 692: 183758, 693: 36135, 694: 242646, 695: 144131, 696: 14521, 697: 97607, 698: 122793, 699: 194934, 700: 131855, 701: 26731, 702: 102702, 703: 114920, 704: 274308, 705: 18082, 706: 135277, 707: 106273, 708: 24838, 709: 142062, 710: 98078, 711: 75028, 712: 207349, 713: 56399, 714: 35859, 715: 207148, 716: 59172, 717: 181176, 718: 66591, 719: 30711, 720: 69600, 721: 257204, 722: 64053, 723: 219200, 724: 200674, 725: 156726, 726: 220564, 727: 230522, 728: 201768, 729: 149908, 730: 87141, 731: 113479, 732: 233911, 733: 93629, 734: 250962, 735: 147166, 736: 240700, 737: 40798, 738: 56049, 739: 95492, 740: 172023, 741: 266867, 742: 243913, 743: 222488, 744: 33974, 745: 12824, 746: 38476, 747: 179730, 748: 138441, 749: 52968, 750: 194600, 751: 93565, 752: 210959, 753: 8639, 754: 8870, 755: 39467, 756: 17789, 757: 221445, 758: 49972, 759: 214984, 760: 180495, 761: 21576, 762: 81597, 763: 172192, 764: 92861, 765: 262208, 766: 93485, 767: 156735, 768: 141901, 769: 59150, 770: 12538, 771: 84866, 772: 19429, 773: 64241, 774: 148199, 775: 162155, 776: 124888, 777: 69709, 778: 60277, 779: 70931, 780: 218568, 781: 244790, 782: 177157, 783: 96679, 784: 31609, 785: 64655, 786: 116032, 787: 140253, 788: 48078, 789: 120548, 790: 203240, 791: 152548, 792: 145543, 793: 95316, 794: 33129, 795: 275111, 796: 113315, 797: 270820, 798: 273979, 799: 238779, 800: 154675, 801: 270713, 802: 97434, 803: 254355, 804: 142524, 805: 124079, 806: 243651, 807: 91347, 808: 87742, 809: 262248, 810: 236164, 811: 222207, 812: 51589, 813: 175154, 814: 244688, 815: 238545, 816: 166399, 817: 101546, 818: 152016, 819: 50371, 820: 28537, 821: 40943, 822: 176214, 823: 169563, 824: 239688, 825: 131027, 826: 28004, 827: 266056, 828: 251606, 829: 99341, 830: 130474, 831: 183046, 832: 110475, 833: 160819, 834: 89374, 835: 16916, 836: 236399, 837: 30555, 838: 175003, 839: 129716, 840: 271284, 841: 246678, 842: 68555, 843: 94680, 844: 130847, 845: 15408, 846: 77480, 847: 207494, 848: 37745, 849: 115003, 850: 274838, 851: 120496, 852: 37431, 853: 63287, 854: 100822, 855: 252383, 856: 65054, 857: 230699, 858: 120134, 859: 267282, 860: 153950, 861: 246036, 862: 100644, 863: 79795, 864: 254899, 865: 80810, 866: 175100, 867: 130554, 868: 143253, 869: 163570, 870: 183532, 871: 78394, 872: 167558, 873: 272573, 874: 56959, 875: 13167, 876: 148265, 877: 248477, 878: 81298, 879: 151608, 880: 229501, 881: 251808, 882: 37691, 883: 126487, 884: 40222, 885: 71232, 886: 265918, 887: 87067, 888: 109774, 889: 5443, 890: 43842, 891: 144318, 892: 167813, 893: 57620, 894: 213638, 895: 59784, 896: 160405, 897: 225078, 898: 115161, 899: 57898, 900: 209373, 901: 234614, 902: 158295, 903: 180859, 904: 228998, 905: 56039, 906: 245373, 907: 240543, 908: 10118, 909: 61086, 910: 251422, 911: 44925, 912: 80776, 913: 179739, 914: 179978, 915: 40553, 916: 232959, 917: 126726, 918: 65008, 919: 215006, 920: 37310, 921: 259305, 922: 40664, 923: 90423, 924: 27144, 925: 118228, 926: 185308, 927: 119505, 928: 243899, 929: 179772, 930: 272347, 931: 150316, 932: 106460, 933: 80859, 934: 30035, 935: 233778, 936: 261501, 937: 51094, 938: 265194, 939: 57713, 940: 273190, 941: 28177, 942: 249250, 943: 47329, 944: 208829, 945: 147803, 946: 113817, 947: 250760, 948: 6746, 949: 269157, 950: 110373, 951: 225305, 952: 236948, 953: 164533, 954: 211098, 955: 37950, 956: 261603, 957: 178079, 958: 55858, 959: 258352, 960: 153367, 961: 46197, 962: 112026, 963: 224138, 964: 30810, 965: 30667, 966: 105745, 967: 6577, 968: 68984, 969: 257514, 970: 189345, 971: 238120, 972: 265508, 973: 31611, 974: 212923, 975: 180586, 976: 128693, 977: 264082, 978: 101731, 979: 141062, 980: 85905, 981: 6575, 982: 184118, 983: 24180, 984: 160078, 985: 165452, 986: 117543, 987: 94639, 988: 209516, 989: 30781, 990: 277427, 991: 62659, 992: 253629, 993: 59189, 994: 242445, 995: 44361, 996: 251843, 997: 210485, 998: 129281, 999: 197828, 1000: 170869, 1001: 247176, 1002: 4385, 1003: 48313, 1004: 248308, 1005: 21660, 1006: 50073, 1007: 143909, 1008: 272077, 1009: 182459, 1010: 3743, 1011: 63074, 1012: 149084, 1013: 139183, 1014: 268691, 1015: 150968, 1016: 52584, 1017: 40435, 1018: 31983, 1019: 136010, 1020: 219949, 1021: 172030, 1022: 22423, 1023: 23768, 1024: 128622, 1025: 122141, 1026: 264152, 1027: 29743, 1028: 115572, 1029: 170229, 1030: 77940, 1031: 123973, 1032: 3508, 1033: 125411, 1034: 268751, 1035: 60178, 1036: 224118, 1037: 209875, 1038: 218068, 1039: 274004, 1040: 97418, 1041: 46909, 1042: 135367, 1043: 251394, 1044: 240403, 1045: 61147, 1046: 216328, 1047: 275996, 1048: 38664, 1049: 29259, 1050: 9454, 1051: 60488, 1052: 222050, 1053: 147385, 1054: 42093, 1055: 28135, 1056: 4049, 1057: 151107, 1058: 6124, 1059: 186764, 1060: 182987, 1061: 131686, 1062: 25010, 1063: 239850, 1064: 216495, 1065: 123981, 1066: 228764, 1067: 115678, 1068: 249628, 1069: 138301, 1070: 234399, 1071: 152651, 1072: 218836, 1073: 79016, 1074: 92652, 1075: 263791, 1076: 222054, 1077: 80234, 1078: 122045, 1079: 23694, 1080: 184299, 1081: 77270, 1082: 71986, 1083: 55419, 1084: 124942, 1085: 107179, 1086: 98758, 1087: 159440, 1088: 235935, 1089: 249862, 1090: 251504, 1091: 64440, 1092: 71600, 1093: 266807, 1094: 20922, 1095: 162738, 1096: 246513, 1097: 113380, 1098: 5348, 1099: 235684, 1100: 236058, 1101: 182088, 1102: 199359, 1103: 8234, 1104: 16168, 1105: 243077, 1106: 38995, 1107: 211607, 1108: 48217, 1109: 249894, 1110: 149373, 1111: 149043, 1112: 53236, 1113: 197659, 1114: 72992, 1115: 105795, 1116: 233738, 1117: 55927, 1118: 223814, 1119: 149934, 1120: 142973, 1121: 184661, 1122: 86641, 1123: 247010, 1124: 185384, 1125: 173881, 1126: 55065, 1127: 225659, 1128: 108527, 1129: 143175, 1130: 205448, 1131: 203033, 1132: 24132, 1133: 41469, 1134: 262040, 1135: 198412, 1136: 143327, 1137: 170184, 1138: 113939, 1139: 197464, 1140: 121119, 1141: 8681, 1142: 33999, 1143: 243065, 1144: 27606, 1145: 113270, 1146: 256417, 1147: 277195, 1148: 274061, 1149: 63938, 1150: 7841, 1151: 272462, 1152: 236340, 1153: 112412, 1154: 98026, 1155: 78834, 1156: 193168, 1157: 170742, 1158: 137688, 1159: 179718, 1160: 265932, 1161: 176293, 1162: 225996, 1163: 246671, 1164: 150561, 1165: 204474, 1166: 137397, 1167: 236172, 1168: 67690, 1169: 168064, 1170: 184672, 1171: 278188, 1172: 224307, 1173: 250510, 1174: 95923, 1175: 92142, 1176: 167471, 1177: 114988, 1178: 39536, 1179: 26084, 1180: 251730, 1181: 7253, 1182: 263877, 1183: 6703, 1184: 266229, 1185: 225986, 1186: 237376, 1187: 30105, 1188: 161041, 1189: 266872, 1190: 200226, 1191: 268110, 1192: 171765, 1193: 183103, 1194: 61643, 1195: 211944, 1196: 63644, 1197: 26813, 1198: 243585, 1199: 131337, 1200: 190925, 1201: 245623, 1202: 233188, 1203: 205735, 1204: 20445, 1205: 166244, 1206: 153865, 1207: 120515, 1208: 244139, 1209: 51449, 1210: 178780, 1211: 167892, 1212: 157273, 1213: 37712, 1214: 183142, 1215: 183, 1216: 149800, 1217: 124692, 1218: 45416, 1219: 230105, 1220: 6323, 1221: 24544, 1222: 83034, 1223: 213353, 1224: 34521, 1225: 263163, 1226: 6566, 1227: 57468, 1228: 25122, 1229: 65208, 1230: 15997, 1231: 252827, 1232: 215701, 1233: 107244, 1234: 246620, 1235: 257327, 1236: 143837, 1237: 79687, 1238: 227447, 1239: 210717, 1240: 79958, 1241: 245148, 1242: 229862, 1243: 241204, 1244: 116904, 1245: 184639, 1246: 241791, 1247: 222679, 1248: 194646, 1249: 248225, 1250: 49460, 1251: 230249, 1252: 42428, 1253: 230552, 1254: 189516, 1255: 59208, 1256: 189848, 1257: 10067, 1258: 62558, 1259: 40278, 1260: 61901, 1261: 115552, 1262: 123544, 1263: 104443, 1264: 266753, 1265: 193560, 1266: 4090, 1267: 149510, 1268: 68256, 1269: 59685, 1270: 81148, 1271: 92853, 1272: 123430, 1273: 250764, 1274: 272225, 1275: 201898, 1276: 24194, 1277: 105221, 1278: 135673, 1279: 217106, 1280: 262541, 1281: 243213, 1282: 101313, 1283: 28735, 1284: 123095, 1285: 172888, 1286: 52606, 1287: 222945, 1288: 234066, 1289: 74665, 1290: 196492, 1291: 225232, 1292: 92405, 1293: 55490, 1294: 239783, 1295: 178905, 1296: 193337, 1297: 38176, 1298: 107203, 1299: 212467, 1300: 62891, 1301: 36673, 1302: 76458, 1303: 129851, 1304: 12189, 1305: 129465, 1306: 277639, 1307: 130063, 1308: 194669, 1309: 184930, 1310: 8936, 1311: 55607, 1312: 211430, 1313: 195304, 1314: 101046, 1315: 90092, 1316: 120333, 1317: 193106, 1318: 122506, 1319: 110818, 1320: 213906, 1321: 238213, 1322: 179135, 1323: 165342, 1324: 77273, 1325: 28731, 1326: 163699, 1327: 112541, 1328: 230030, 1329: 37817, 1330: 254241, 1331: 20918, 1332: 144348, 1333: 173415, 1334: 41634, 1335: 168034, 1336: 89719, 1337: 144602, 1338: 250359, 1339: 71762, 1340: 239374, 1341: 124010, 1342: 224764, 1343: 110763, 1344: 156319, 1345: 63404, 1346: 259629, 1347: 26871, 1348: 262902, 1349: 241894, 1350: 31393, 1351: 152080, 1352: 255092, 1353: 238864, 1354: 45557, 1355: 53490, 1356: 243785, 1357: 85701, 1358: 206979, 1359: 132836, 1360: 135959, 1361: 79612, 1362: 81045, 1363: 87555, 1364: 75491, 1365: 257550, 1366: 159146, 1367: 21357, 1368: 269439, 1369: 199783, 1370: 55734, 1371: 264317, 1372: 235282, 1373: 58363, 1374: 205474, 1375: 275020, 1376: 233578, 1377: 130438, 1378: 243236, 1379: 255482, 1380: 60583, 1381: 110076, 1382: 253124, 1383: 260771, 1384: 95010, 1385: 92162, 1386: 243876, 1387: 30926, 1388: 126736, 1389: 255218, 1390: 135045, 1391: 38076, 1392: 151702, 1393: 38955, 1394: 78231, 1395: 258938, 1396: 198147, 1397: 52807, 1398: 253852, 1399: 112083, 1400: 268030, 1401: 173632, 1402: 269114, 1403: 21364, 1404: 94923, 1405: 254405, 1406: 202462, 1407: 30276, 1408: 79263, 1409: 276670, 1410: 128045, 1411: 232611, 1412: 241569, 1413: 107453, 1414: 55799, 1415: 8066, 1416: 125774, 1417: 76218, 1418: 64943, 1419: 22252, 1420: 130943, 1421: 51521, 1422: 138073, 1423: 32254, 1424: 275618, 1425: 12982, 1426: 78844, 1427: 88329, 1428: 225810, 1429: 39326, 1430: 251416, 1431: 277478, 1432: 173684, 1433: 224924, 1434: 161348, 1435: 200772, 1436: 254, 1437: 16634, 1438: 251691, 1439: 54258, 1440: 84666, 1441: 70222, 1442: 274325, 1443: 247141, 1444: 177091, 1445: 81977, 1446: 200233, 1447: 269273, 1448: 93377, 1449: 9492, 1450: 127233, 1451: 129780, 1452: 159884, 1453: 85367, 1454: 144531, 1455: 235392, 1456: 101305, 1457: 273770, 1458: 251122, 1459: 196052, 1460: 60140, 1461: 173018, 1462: 163059, 1463: 92693, 1464: 92399, 1465: 87143, 1466: 95025, 1467: 239584, 1468: 19592, 1469: 69389, 1470: 187922, 1471: 95525, 1472: 43061, 1473: 196149, 1474: 3915, 1475: 48753, 1476: 13605, 1477: 178950, 1478: 209464, 1479: 7326, 1480: 66680, 1481: 149178, 1482: 139126, 1483: 270715, 1484: 34676, 1485: 169663, 1486: 37573, 1487: 160062, 1488: 60098, 1489: 67547, 1490: 87712, 1491: 125587, 1492: 141771, 1493: 41889, 1494: 54655, 1495: 131070, 1496: 59180, 1497: 256167, 1498: 29806, 1499: 153621, 1500: 115792, 1501: 167722, 1502: 157247, 1503: 12811, 1504: 97874, 1505: 17667, 1506: 43404, 1507: 204167, 1508: 166694, 1509: 50560, 1510: 192135, 1511: 174791, 1512: 7962, 1513: 232106, 1514: 113364, 1515: 61759, 1516: 204359, 1517: 142121, 1518: 63494, 1519: 178130, 1520: 104736, 1521: 97198, 1522: 88283, 1523: 266522, 1524: 5350, 1525: 275673, 1526: 212142, 1527: 203964, 1528: 72214, 1529: 192093, 1530: 1248, 1531: 144899, 1532: 108815, 1533: 118579, 1534: 113467, 1535: 20852, 1536: 57412, 1537: 77291, 1538: 55187, 1539: 247461, 1540: 192245, 1541: 256402, 1542: 162762, 1543: 17177, 1544: 32440, 1545: 183061, 1546: 49109, 1547: 171817, 1548: 78428, 1549: 46269, 1550: 28938, 1551: 164728, 1552: 179741, 1553: 17859, 1554: 242317, 1555: 31466, 1556: 242849, 1557: 54483, 1558: 189558, 1559: 182014, 1560: 220757, 1561: 96425, 1562: 190335, 1563: 242824, 1564: 234759, 1565: 241548, 1566: 32627, 1567: 147764, 1568: 28900, 1569: 153322, 1570: 99738, 1571: 171445, 1572: 253821, 1573: 193778, 1574: 16459, 1575: 89023, 1576: 161922, 1577: 38023, 1578: 169827, 1579: 213090, 1580: 76460, 1581: 86489, 1582: 177277, 1583: 135736, 1584: 90614, 1585: 180651, 1586: 158925, 1587: 220688, 1588: 196799, 1589: 224646, 1590: 16871, 1591: 35718, 1592: 202277, 1593: 241527, 1594: 38887, 1595: 26516, 1596: 85426, 1597: 3757, 1598: 21484, 1599: 36554, 1600: 15021, 1601: 21252, 1602: 125538, 1603: 175329, 1604: 214620, 1605: 15418, 1606: 192428, 1607: 139321, 1608: 2358, 1609: 31919, 1610: 125692, 1611: 168464, 1612: 160541, 1613: 133571, 1614: 12202, 1615: 139229, 1616: 121667, 1617: 221036, 1618: 114544, 1619: 231237, 1620: 126903, 1621: 104812, 1622: 36606, 1623: 218552, 1624: 229335, 1625: 166922, 1626: 223787, 1627: 16482, 1628: 221050, 1629: 244349, 1630: 7158, 1631: 226394, 1632: 19842, 1633: 24835, 1634: 209756, 1635: 94900, 1636: 236235, 1637: 200643, 1638: 86408, 1639: 819, 1640: 237646, 1641: 205281, 1642: 214134, 1643: 22161, 1644: 141203, 1645: 204255, 1646: 176875, 1647: 232036, 1648: 141710, 1649: 186547, 1650: 222035, 1651: 70318, 1652: 145558, 1653: 95888, 1654: 18464, 1655: 273849, 1656: 56856, 1657: 125303, 1658: 143337, 1659: 73588, 1660: 31049, 1661: 82893, 1662: 67403, 1663: 12863, 1664: 135833, 1665: 200323, 1666: 263825, 1667: 86243, 1668: 243513, 1669: 171467, 1670: 170724, 1671: 135458, 1672: 23571, 1673: 146230, 1674: 61775, 1675: 84126, 1676: 28523, 1677: 145451, 1678: 273714, 1679: 5963, 1680: 31040, 1681: 83637, 1682: 169745, 1683: 198302, 1684: 43443, 1685: 90232, 1686: 82926, 1687: 205969, 1688: 164584, 1689: 158080, 1690: 131594, 1691: 5502, 1692: 128543, 1693: 101559, 1694: 99252, 1695: 252657, 1696: 164706, 1697: 167189, 1698: 193723, 1699: 7128, 1700: 122429, 1701: 32329, 1702: 41842, 1703: 186999, 1704: 246874, 1705: 219254, 1706: 226545, 1707: 112881, 1708: 153718, 1709: 40184, 1710: 101876, 1711: 270489, 1712: 188027, 1713: 43021, 1714: 43006, 1715: 167478, 1716: 177072, 1717: 37293, 1718: 258690, 1719: 138995, 1720: 44520, 1721: 77753, 1722: 101242, 1723: 207411, 1724: 222296, 1725: 229681, 1726: 180128, 1727: 153563, 1728: 260217, 1729: 239752, 1730: 42458, 1731: 141902, 1732: 209160, 1733: 260067, 1734: 268482, 1735: 30985, 1736: 95301, 1737: 275631, 1738: 240568, 1739: 207721, 1740: 168438, 1741: 33200, 1742: 182993, 1743: 31822, 1744: 16908, 1745: 247315, 1746: 19422, 1747: 105517, 1748: 160681, 1749: 249695, 1750: 252385, 1751: 129690, 1752: 31420, 1753: 254064, 1754: 142454, 1755: 31295, 1756: 99347, 1757: 256247, 1758: 12122, 1759: 74187, 1760: 60858, 1761: 80954, 1762: 94411, 1763: 155014, 1764: 213827, 1765: 245827, 1766: 21014, 1767: 112502, 1768: 203649, 1769: 133689, 1770: 81352, 1771: 176667, 1772: 178199, 1773: 74215, 1774: 73467, 1775: 34019, 1776: 219546, 1777: 238699, 1778: 51928, 1779: 50730, 1780: 67079, 1781: 151824, 1782: 242999, 1783: 36213, 1784: 159390, 1785: 209985, 1786: 74466, 1787: 278002, 1788: 268618, 1789: 54218, 1790: 93141, 1791: 97324, 1792: 118434, 1793: 248718, 1794: 191061, 1795: 109122, 1796: 26730, 1797: 205475, 1798: 271833, 1799: 175978, 1800: 241305, 1801: 269009, 1802: 242409, 1803: 270906, 1804: 252865, 1805: 167509, 1806: 192176, 1807: 234359, 1808: 65258, 1809: 135768, 1810: 159033, 1811: 168245, 1812: 237070, 1813: 223906, 1814: 245645, 1815: 150518, 1816: 170634, 1817: 148192, 1818: 258185, 1819: 254376, 1820: 83467, 1821: 26124, 1822: 90971, 1823: 243745, 1824: 199025, 1825: 24539, 1826: 218800, 1827: 140036, 1828: 262399, 1829: 113217, 1830: 80538, 1831: 169223, 1832: 226006, 1833: 136326, 1834: 88170, 1835: 60081, 1836: 231993, 1837: 263325, 1838: 36609, 1839: 163679, 1840: 21011, 1841: 165697, 1842: 218043, 1843: 140358, 1844: 73704, 1845: 204586, 1846: 50533, 1847: 165268, 1848: 119517, 1849: 252900, 1850: 136491, 1851: 47931, 1852: 224904, 1853: 60647, 1854: 250184, 1855: 88976, 1856: 266971, 1857: 136735, 1858: 139580, 1859: 75115, 1860: 103896, 1861: 235842, 1862: 102080, 1863: 104665, 1864: 226393, 1865: 127359, 1866: 204591, 1867: 65487, 1868: 188162, 1869: 97848, 1870: 8873, 1871: 271538, 1872: 240470, 1873: 210597, 1874: 214244, 1875: 243883, 1876: 177090, 1877: 81682, 1878: 105058, 1879: 195694, 1880: 172406, 1881: 32703, 1882: 182403, 1883: 102359, 1884: 50547, 1885: 168642, 1886: 128208, 1887: 65145, 1888: 118333, 1889: 124818, 1890: 116122, 1891: 236618, 1892: 239010, 1893: 168184, 1894: 14958, 1895: 61211, 1896: 109864, 1897: 267444, 1898: 226713, 1899: 52203, 1900: 207669, 1901: 164944, 1902: 18770, 1903: 189286, 1904: 92282, 1905: 111924, 1906: 133747, 1907: 127557, 1908: 193208, 1909: 215326, 1910: 71812, 1911: 18067, 1912: 217121, 1913: 12641, 1914: 209870, 1915: 109049, 1916: 177704, 1917: 208768, 1918: 277124, 1919: 229703, 1920: 112093, 1921: 30072, 1922: 30972, 1923: 236030, 1924: 17950, 1925: 24941, 1926: 196738, 1927: 100783, 1928: 115473, 1929: 16759, 1930: 51526, 1931: 208791, 1932: 187474, 1933: 237268, 1934: 108243, 1935: 98674, 1936: 78506, 1937: 142745, 1938: 60337, 1939: 184532, 1940: 63170, 1941: 35141, 1942: 66797, 1943: 200891, 1944: 255255, 1945: 223233, 1946: 50628, 1947: 49660, 1948: 94883, 1949: 138955, 1950: 11944, 1951: 266094, 1952: 144189, 1953: 225799, 1954: 167800, 1955: 153254, 1956: 213843, 1957: 69378, 1958: 186858, 1959: 139643, 1960: 257012, 1961: 147230, 1962: 146348, 1963: 243720, 1964: 43619, 1965: 222220, 1966: 80803, 1967: 79950, 1968: 203621, 1969: 167223, 1970: 274618, 1971: 18445, 1972: 136142, 1973: 242106, 1974: 99919, 1975: 225351, 1976: 8245, 1977: 277895, 1978: 75860, 1979: 39400, 1980: 196160, 1981: 205980, 1982: 184158, 1983: 142861, 1984: 212088, 1985: 163804, 1986: 178265, 1987: 12272, 1988: 266840, 1989: 266283, 1990: 248496, 1991: 35042, 1992: 179853, 1993: 67930, 1994: 92979, 1995: 127727, 1996: 85526, 1997: 273976, 1998: 66443, 1999: 104654, 2000: 253447, 2001: 80555, 2002: 237389, 2003: 189721, 2004: 99929, 2005: 45107, 2006: 189655, 2007: 19935, 2008: 3930, 2009: 170804, 2010: 105979, 2011: 135909, 2012: 96475, 2013: 235806, 2014: 144642, 2015: 213350, 2016: 103079, 2017: 234685, 2018: 157508, 2019: 245257, 2020: 223702, 2021: 43873, 2022: 266808, 2023: 34776, 2024: 242007, 2025: 270605, 2026: 236727, 2027: 176597, 2028: 57449, 2029: 229632, 2030: 250015, 2031: 252869, 2032: 213126, 2033: 28076, 2034: 66431, 2035: 66942, 2036: 189694, 2037: 33888, 2038: 142024, 2039: 256072, 2040: 116582, 2041: 10716, 2042: 146195, 2043: 191795, 2044: 136851, 2045: 154137, 2046: 153079, 2047: 269883, 2048: 18995, 2049: 36715, 2050: 170947, 2051: 207003, 2052: 17596, 2053: 55941, 2054: 167166, 2055: 141157, 2056: 229313, 2057: 72770, 2058: 263460, 2059: 217318, 2060: 149802, 2061: 64041, 2062: 277168, 2063: 65908, 2064: 24945, 2065: 118135, 2066: 91026, 2067: 139109, 2068: 135383, 2069: 78067, 2070: 81088, 2071: 76151, 2072: 187763, 2073: 262186, 2074: 80683, 2075: 152435, 2076: 259004, 2077: 208671, 2078: 54622, 2079: 96955, 2080: 124993, 2081: 65874, 2082: 131126, 2083: 204780, 2084: 25032, 2085: 101620, 2086: 206932, 2087: 56553, 2088: 33580, 2089: 271558, 2090: 109955, 2091: 175002, 2092: 240770, 2093: 201147, 2094: 252848, 2095: 230253, 2096: 132203, 2097: 142823, 2098: 206074, 2099: 14387, 2100: 144162, 2101: 232343, 2102: 276538, 2103: 66619, 2104: 189754, 2105: 202960, 2106: 220498, 2107: 254904, 2108: 190177, 2109: 144106, 2110: 128206, 2111: 208907, 2112: 58594, 2113: 27462, 2114: 46297, 2115: 106693, 2116: 183340, 2117: 189844, 2118: 77383, 2119: 24462, 2120: 261800, 2121: 72451, 2122: 60050, 2123: 88288, 2124: 86033, 2125: 123261, 2126: 141601, 2127: 165232, 2128: 157558, 2129: 188295, 2130: 26593, 2131: 44743, 2132: 110382, 2133: 98787, 2134: 60707, 2135: 166934, 2136: 78471, 2137: 172613, 2138: 129563, 2139: 206044, 2140: 176062, 2141: 214821, 2142: 200493, 2143: 27612, 2144: 250163, 2145: 225199, 2146: 3346, 2147: 86193, 2148: 81303, 2149: 258884, 2150: 154663, 2151: 174830, 2152: 201674, 2153: 180917, 2154: 199431, 2155: 203110, 2156: 63854, 2157: 92827, 2158: 145003, 2159: 23288, 2160: 10047, 2161: 90534, 2162: 224249, 2163: 141010, 2164: 84831, 2165: 270784, 2166: 250645, 2167: 21659, 2168: 154671, 2169: 17507, 2170: 231255, 2171: 23872, 2172: 66304, 2173: 191675, 2174: 32195, 2175: 110483, 2176: 224435, 2177: 24186, 2178: 266865, 2179: 202173, 2180: 14230, 2181: 136916, 2182: 238541, 2183: 102571, 2184: 74659, 2185: 60461, 2186: 202706, 2187: 223087, 2188: 169252, 2189: 24123, 2190: 85345, 2191: 79916, 2192: 86107, 2193: 47857, 2194: 164027, 2195: 124489, 2196: 187981, 2197: 172216, 2198: 19711, 2199: 51974, 2200: 49980, 2201: 103688, 2202: 71470, 2203: 96474, 2204: 241756, 2205: 240445, 2206: 142479, 2207: 113723, 2208: 92706, 2209: 246657, 2210: 183101, 2211: 51752, 2212: 202738, 2213: 22813, 2214: 151537, 2215: 114279, 2216: 40885, 2217: 230405, 2218: 185671, 2219: 93936, 2220: 217740, 2221: 161882, 2222: 267081, 2223: 203502, 2224: 39527, 2225: 2442, 2226: 242758, 2227: 241012, 2228: 265680, 2229: 273461, 2230: 6564, 2231: 12990, 2232: 182414, 2233: 94683, 2234: 248356, 2235: 104939, 2236: 264300, 2237: 239061, 2238: 271144, 2239: 247958, 2240: 185519, 2241: 238179, 2242: 244727, 2243: 88389, 2244: 245328, 2245: 236112, 2246: 56066, 2247: 90146, 2248: 41757, 2249: 259118, 2250: 119556, 2251: 167925, 2252: 105596, 2253: 69810, 2254: 24921, 2255: 157353, 2256: 240829, 2257: 206691, 2258: 133417, 2259: 98475, 2260: 32483, 2261: 67997, 2262: 8652, 2263: 46436, 2264: 193529, 2265: 175189, 2266: 98904, 2267: 3329, 2268: 177186, 2269: 171165, 2270: 92810, 2271: 170732, 2272: 106007, 2273: 115234, 2274: 197700, 2275: 255493, 2276: 268262, 2277: 244264, 2278: 23518, 2279: 250447, 2280: 210874, 2281: 81128, 2282: 55806, 2283: 151928, 2284: 144293, 2285: 215024, 2286: 31136, 2287: 130950, 2288: 72940, 2289: 132663, 2290: 35185, 2291: 9571, 2292: 199772, 2293: 7409, 2294: 179690, 2295: 272993, 2296: 240888, 2297: 171970, 2298: 103336, 2299: 216466, 2300: 224923, 2301: 250539, 2302: 226879, 2303: 70401, 2304: 106294, 2305: 203161, 2306: 53174, 2307: 174986, 2308: 126388, 2309: 261160, 2310: 176879, 2311: 214890, 2312: 175399, 2313: 194803, 2314: 37493, 2315: 179826, 2316: 213207, 2317: 225411, 2318: 112457, 2319: 4907, 2320: 71905, 2321: 255252, 2322: 250258, 2323: 41700, 2324: 123056, 2325: 34581, 2326: 169699, 2327: 7125, 2328: 110008, 2329: 91002, 2330: 48579, 2331: 243966, 2332: 240401, 2333: 66204, 2334: 232655, 2335: 154773, 2336: 43118, 2337: 51082, 2338: 258334, 2339: 10699, 2340: 69601, 2341: 235405, 2342: 188287, 2343: 193584, 2344: 88116, 2345: 110214, 2346: 189632, 2347: 114349, 2348: 154519, 2349: 223066, 2350: 203603, 2351: 200196, 2352: 189893, 2353: 96054, 2354: 167521, 2355: 56884, 2356: 124597, 2357: 226003, 2358: 171602, 2359: 217986, 2360: 76710, 2361: 51545, 2362: 75895, 2363: 242073, 2364: 93370, 2365: 177432, 2366: 31391, 2367: 138097, 2368: 191524, 2369: 246959, 2370: 239942, 2371: 199378, 2372: 158226, 2373: 222830, 2374: 192158, 2375: 8487, 2376: 252609, 2377: 276680, 2378: 95593, 2379: 39281, 2380: 9993, 2381: 82511, 2382: 38654, 2383: 31094, 2384: 187065, 2385: 257548, 2386: 277314, 2387: 212645, 2388: 108285, 2389: 47786, 2390: 270334, 2391: 125928, 2392: 120860, 2393: 187809, 2394: 167492, 2395: 4622, 2396: 251164, 2397: 234734, 2398: 255743, 2399: 160393, 2400: 238008, 2401: 234816, 2402: 87702, 2403: 166824, 2404: 126693, 2405: 40505, 2406: 244309, 2407: 79740, 2408: 204311, 2409: 200746, 2410: 53614, 2411: 155463, 2412: 144997, 2413: 204522, 2414: 268330, 2415: 251721, 2416: 28360, 2417: 240567, 2418: 39705, 2419: 80075, 2420: 157655, 2421: 242465, 2422: 95452, 2423: 109197, 2424: 199357, 2425: 258970, 2426: 208406, 2427: 90731, 2428: 93363, 2429: 251642, 2430: 177040, 2431: 223442, 2432: 165457, 2433: 177180, 2434: 44362, 2435: 67237, 2436: 173540, 2437: 255618, 2438: 254498, 2439: 16827, 2440: 37560, 2441: 155376, 2442: 118484, 2443: 276925, 2444: 208674, 2445: 101887, 2446: 115490, 2447: 218640, 2448: 33474, 2449: 261998, 2450: 151404, 2451: 10314, 2452: 190459, 2453: 206944, 2454: 39502, 2455: 162311, 2456: 59361, 2457: 190709, 2458: 257028, 2459: 66792, 2460: 216683, 2461: 212835, 2462: 238301, 2463: 218010, 2464: 181011, 2465: 12512, 2466: 271195, 2467: 5543, 2468: 150297, 2469: 274301, 2470: 170997, 2471: 25792, 2472: 155407, 2473: 264031, 2474: 224349, 2475: 82607, 2476: 167205, 2477: 249407, 2478: 160558, 2479: 4243, 2480: 198699, 2481: 244517, 2482: 60424, 2483: 210311, 2484: 258553, 2485: 227392, 2486: 135785, 2487: 35931, 2488: 5896, 2489: 138189, 2490: 219993, 2491: 21343, 2492: 63024, 2493: 263500, 2494: 209156, 2495: 8584, 2496: 241036, 2497: 115392, 2498: 191694, 2499: 229282, 2500: 116313, 2501: 140005, 2502: 141819, 2503: 98783, 2504: 167611, 2505: 247591, 2506: 91113, 2507: 175052, 2508: 35352, 2509: 55097, 2510: 95250, 2511: 19843, 2512: 217056, 2513: 142093, 2514: 229899, 2515: 273718, 2516: 20755, 2517: 52620, 2518: 125396, 2519: 226775, 2520: 242006, 2521: 196253, 2522: 171096, 2523: 60029, 2524: 85851, 2525: 269309, 2526: 131913, 2527: 145165, 2528: 2189, 2529: 229329, 2530: 272796, 2531: 245410, 2532: 277075, 2533: 68846, 2534: 36811, 2535: 173790, 2536: 130705, 2537: 67068, 2538: 227930, 2539: 28492, 2540: 65219, 2541: 74758, 2542: 159116, 2543: 30735, 2544: 87072, 2545: 4435, 2546: 82497, 2547: 168763, 2548: 73681, 2549: 153103, 2550: 7283, 2551: 121135, 2552: 33327, 2553: 24697, 2554: 93085, 2555: 130792, 2556: 9034, 2557: 112335, 2558: 146321, 2559: 275041, 2560: 146932, 2561: 246512, 2562: 157916, 2563: 2622, 2564: 24413, 2565: 152514, 2566: 65549, 2567: 222896, 2568: 87929, 2569: 78529, 2570: 34837, 2571: 2417, 2572: 45729, 2573: 130571, 2574: 39386, 2575: 84201, 2576: 13935, 2577: 114865, 2578: 65153, 2579: 273380, 2580: 70703, 2581: 28454, 2582: 117173, 2583: 130872, 2584: 143103, 2585: 96771, 2586: 205383, 2587: 55615, 2588: 15869, 2589: 25048, 2590: 72238, 2591: 20688, 2592: 231857, 2593: 14923, 2594: 221297, 2595: 76390, 2596: 100506, 2597: 19866, 2598: 243328, 2599: 255648, 2600: 235486, 2601: 42651, 2602: 9414, 2603: 232067, 2604: 215942, 2605: 224316, 2606: 39019, 2607: 97722, 2608: 72370, 2609: 47152, 2610: 187103, 2611: 237990, 2612: 29483, 2613: 243714, 2614: 79556, 2615: 267328, 2616: 63370, 2617: 131243, 2618: 127029, 2619: 11242, 2620: 99146, 2621: 246730, 2622: 15642, 2623: 31984, 2624: 243294, 2625: 18172, 2626: 254144, 2627: 268723, 2628: 85280, 2629: 145194, 2630: 100459, 2631: 182053, 2632: 233739, 2633: 136252, 2634: 251613, 2635: 138844, 2636: 270828, 2637: 100782, 2638: 42043, 2639: 212697, 2640: 257971, 2641: 109783, 2642: 26883, 2643: 12854, 2644: 174038, 2645: 21083, 2646: 52363, 2647: 11718, 2648: 209742, 2649: 84716, 2650: 30551, 2651: 136291, 2652: 12100, 2653: 248570, 2654: 199375, 2655: 58252, 2656: 136430, 2657: 190439, 2658: 172512, 2659: 192243, 2660: 157945, 2661: 202430, 2662: 95902, 2663: 83109, 2664: 75591, 2665: 44467, 2666: 209498, 2667: 50219, 2668: 191815, 2669: 199542, 2670: 136473, 2671: 179857, 2672: 259543, 2673: 251157, 2674: 203764, 2675: 72283, 2676: 152502, 2677: 275306, 2678: 275281, 2679: 52917, 2680: 233374, 2681: 270989, 2682: 244286, 2683: 173743, 2684: 210792, 2685: 219008, 2686: 38590, 2687: 76905, 2688: 6004, 2689: 13347, 2690: 203047, 2691: 177073, 2692: 53300, 2693: 123790, 2694: 234828, 2695: 188676, 2696: 49514, 2697: 170054, 2698: 232522, 2699: 20448, 2700: 111677, 2701: 59616, 2702: 239421, 2703: 13273, 2704: 111578, 2705: 110040, 2706: 242639, 2707: 269397, 2708: 157038, 2709: 87540, 2710: 164738, 2711: 60347, 2712: 250405, 2713: 179501, 2714: 237727, 2715: 130966, 2716: 28877, 2717: 16718, 2718: 53775, 2719: 31533, 2720: 102164, 2721: 132030, 2722: 241666, 2723: 180840, 2724: 55505, 2725: 201290, 2726: 124487, 2727: 168999, 2728: 111104, 2729: 206563, 2730: 2615, 2731: 41057, 2732: 58342, 2733: 46386, 2734: 138015, 2735: 81368, 2736: 170513, 2737: 259625, 2738: 277984, 2739: 94951, 2740: 219650, 2741: 59269, 2742: 150554, 2743: 132500, 2744: 242316, 2745: 85623, 2746: 196721, 2747: 75215, 2748: 182208, 2749: 252262, 2750: 256844, 2751: 250300, 2752: 184265, 2753: 118533, 2754: 252846, 2755: 107736, 2756: 211977, 2757: 192101, 2758: 204813, 2759: 125039, 2760: 188171, 2761: 68272, 2762: 159376, 2763: 102375, 2764: 196343, 2765: 238526, 2766: 268259, 2767: 208788, 2768: 204696, 2769: 254750, 2770: 274400, 2771: 227176, 2772: 102154, 2773: 88677, 2774: 114203, 2775: 104657, 2776: 88757, 2777: 157799, 2778: 164323, 2779: 263329, 2780: 61845, 2781: 25409, 2782: 237194, 2783: 113292, 2784: 125918, 2785: 74559, 2786: 69790, 2787: 41136, 2788: 24933, 2789: 202348, 2790: 117176, 2791: 107889, 2792: 218360, 2793: 132492, 2794: 100578, 2795: 272273, 2796: 160295, 2797: 187517, 2798: 187410, 2799: 255296, 2800: 222293, 2801: 183935, 2802: 115567, 2803: 223530, 2804: 196053, 2805: 234721, 2806: 196214, 2807: 195100, 2808: 254053, 2809: 187598, 2810: 259901, 2811: 222674, 2812: 236251, 2813: 213523, 2814: 119858, 2815: 43645, 2816: 205783, 2817: 169400, 2818: 216501, 2819: 257554, 2820: 8890, 2821: 14422, 2822: 229510, 2823: 52199, 2824: 200585, 2825: 122829, 2826: 36141, 2827: 219951, 2828: 205404, 2829: 103811, 2830: 161449, 2831: 270776, 2832: 272980, 2833: 7079, 2834: 183995, 2835: 27741, 2836: 160434, 2837: 26527, 2838: 218359, 2839: 236994, 2840: 4571, 2841: 20350, 2842: 92090, 2843: 28591, 2844: 142039, 2845: 176560, 2846: 275744, 2847: 187520, 2848: 120111, 2849: 190298, 2850: 207180, 2851: 2276, 2852: 258467, 2853: 61619, 2854: 277203, 2855: 78553, 2856: 124983, 2857: 93179, 2858: 102642, 2859: 10103, 2860: 107773, 2861: 75783, 2862: 125755, 2863: 132527, 2864: 216722, 2865: 160406, 2866: 178201, 2867: 268171, 2868: 2977, 2869: 248274, 2870: 169779, 2871: 97469, 2872: 13540, 2873: 20855, 2874: 222607, 2875: 191238, 2876: 76483, 2877: 68491, 2878: 37034, 2879: 36582, 2880: 31514, 2881: 249723, 2882: 212219, 2883: 126827, 2884: 125539, 2885: 84773, 2886: 224944, 2887: 55493, 2888: 38679, 2889: 161101, 2890: 85805, 2891: 203531, 2892: 60569, 2893: 223474, 2894: 251423, 2895: 143294, 2896: 236237, 2897: 41538, 2898: 50700, 2899: 107510, 2900: 92139, 2901: 203820, 2902: 264844, 2903: 23650, 2904: 64723, 2905: 12780, 2906: 144134, 2907: 48213, 2908: 180772, 2909: 93364, 2910: 92498, 2911: 124066, 2912: 268589, 2913: 54812, 2914: 123744, 2915: 104211, 2916: 170227, 2917: 58855, 2918: 73053, 2919: 187343, 2920: 143860, 2921: 278221, 2922: 274609, 2923: 154529, 2924: 264321, 2925: 265487, 2926: 202501, 2927: 242381, 2928: 50566, 2929: 13259, 2930: 252356, 2931: 96335, 2932: 57747, 2933: 75568, 2934: 47982, 2935: 94347, 2936: 94744, 2937: 162590, 2938: 70402, 2939: 125440, 2940: 174978, 2941: 174216, 2942: 269575, 2943: 210285, 2944: 20149, 2945: 117963, 2946: 191915, 2947: 260760, 2948: 216012, 2949: 39616, 2950: 72707, 2951: 38503, 2952: 174700, 2953: 150762, 2954: 144194, 2955: 162571, 2956: 77523, 2957: 153869, 2958: 149722, 2959: 8067, 2960: 246634, 2961: 232964, 2962: 11477, 2963: 259650, 2964: 2375, 2965: 44556, 2966: 272538, 2967: 224121, 2968: 254676, 2969: 89911, 2970: 16818, 2971: 51883, 2972: 224000, 2973: 185592, 2974: 49773, 2975: 143163, 2976: 69331, 2977: 260840, 2978: 61762, 2979: 5765, 2980: 164617, 2981: 250398, 2982: 244955, 2983: 178035, 2984: 84437, 2985: 189501, 2986: 59820, 2987: 87155, 2988: 29117, 2989: 180804, 2990: 266580, 2991: 104311, 2992: 53395, 2993: 133866, 2994: 59148, 2995: 5983, 2996: 134247, 2997: 199209, 2998: 244124, 2999: 178195, 3000: 243131, 3001: 214809, 3002: 158063, 3003: 264637, 3004: 143480, 3005: 130482, 3006: 91194, 3007: 41086, 3008: 121137, 3009: 181076, 3010: 20450, 3011: 44368, 3012: 121173, 3013: 51386, 3014: 255546, 3015: 243429, 3016: 190521, 3017: 188690, 3018: 232449, 3019: 165308, 3020: 140069, 3021: 15213, 3022: 182086, 3023: 150814, 3024: 152028, 3025: 55548, 3026: 84729, 3027: 8695, 3028: 126738, 3029: 251113, 3030: 86728, 3031: 188273, 3032: 243, 3033: 211605, 3034: 229409, 3035: 131675, 3036: 154125, 3037: 247575, 3038: 108005, 3039: 189375, 3040: 221995, 3041: 1022, 3042: 240418, 3043: 231767, 3044: 138883, 3045: 30120, 3046: 187088, 3047: 63956, 3048: 181254, 3049: 196930, 3050: 264027, 3051: 158846, 3052: 162376, 3053: 268026, 3054: 57105, 3055: 139387, 3056: 59305, 3057: 37311, 3058: 83589, 3059: 51128, 3060: 217252, 3061: 145916, 3062: 263418, 3063: 21112, 3064: 139668, 3065: 267680, 3066: 163540, 3067: 132407, 3068: 171968, 3069: 7620, 3070: 93426, 3071: 94952, 3072: 199928, 3073: 27092, 3074: 261641, 3075: 185254, 3076: 103602, 3077: 137742, 3078: 94781, 3079: 8290, 3080: 100908, 3081: 71712, 3082: 6563, 3083: 25311, 3084: 265281, 3085: 266658, 3086: 244253, 3087: 66365, 3088: 27740, 3089: 39584, 3090: 28634, 3091: 238065, 3092: 212325, 3093: 123468, 3094: 194358, 3095: 20851, 3096: 29855, 3097: 238625, 3098: 207466, 3099: 62701, 3100: 230672, 3101: 233529, 3102: 199144, 3103: 244042, 3104: 229184, 3105: 71494, 3106: 257544, 3107: 45064, 3108: 187256, 3109: 135170, 3110: 262569, 3111: 194637, 3112: 213066, 3113: 171222, 3114: 254206, 3115: 4131, 3116: 46983, 3117: 274000, 3118: 32773, 3119: 29505, 3120: 38718, 3121: 44089, 3122: 241810, 3123: 266193, 3124: 67663, 3125: 114217, 3126: 136205, 3127: 155495, 3128: 52586, 3129: 74833, 3130: 187536, 3131: 167349, 3132: 265751, 3133: 120598, 3134: 155580, 3135: 189151, 3136: 37208, 3137: 67141, 3138: 121766, 3139: 237271, 3140: 254780, 3141: 141493, 3142: 253228, 3143: 170385, 3144: 62009, 3145: 86555, 3146: 203058, 3147: 56781, 3148: 214937, 3149: 81492, 3150: 124874, 3151: 170734, 3152: 101513, 3153: 89307, 3154: 29255, 3155: 274220, 3156: 78722, 3157: 244662, 3158: 196137, 3159: 190831, 3160: 77052, 3161: 96448, 3162: 187031, 3163: 119749, 3164: 152186, 3165: 2488, 3166: 117595, 3167: 46389, 3168: 163824, 3169: 262391, 3170: 216444, 3171: 149069, 3172: 238921, 3173: 128557, 3174: 162227, 3175: 250683, 3176: 136037, 3177: 58358, 3178: 105718, 3179: 179288, 3180: 246318, 3181: 262577, 3182: 278332, 3183: 106988, 3184: 162562, 3185: 210259, 3186: 189882, 3187: 209394, 3188: 33070, 3189: 232945, 3190: 59254, 3191: 61078, 3192: 119281, 3193: 216381, 3194: 136139, 3195: 207499, 3196: 80826, 3197: 259930, 3198: 150002, 3199: 211136, 3200: 105968, 3201: 206583, 3202: 140000, 3203: 266595, 3204: 88693, 3205: 213197, 3206: 232403}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melakukan persiapan data untuk menyandikan (encode) fitur ‘ISBN’ ke dalam indeks integer."
      ],
      "metadata": {
        "id": "2kMeaRA3LvlZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah ISBN menjadi list tanpa nilai yang sama\n",
        "ISBN = df['ISBN'].unique().tolist()\n",
        "print('list ISBN: ', ISBN)\n",
        "\n",
        "# Melakukan encoding ISBN\n",
        "book_to_book_encoded = {x: i for i, x in enumerate(ISBN)}\n",
        "print('encoded ISBN : ', book_to_book_encoded)\n",
        "\n",
        "# Melakukan proses encoding angka ke ke ISBN\n",
        "book_encoded_to_book = {i: x for i, x in enumerate(ISBN)}\n",
        "print('encoded angka ke ISBN: ', book_encoded_to_book)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2gvbvcu2LD1g",
        "outputId": "ae6a3116-287f-46b1-8a36-b8e0e002160f"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "list ISBN:  ['0886774012', '0441787541', '0312276885', '0886776686', '1851680659', '9026103441', '0671865277', '0440111811', '1850159203', '0912083980', '185326055X', '0439228905', '2253153982', '0380750988', '0446517224', '0425188809', '0440226104', '0515124524', '0446603651', '0694514527', '0552146102', '0373166362', '0876044429', '0373707592', '9681322908', '1559707135', '0802138098', '0345372085', '0671670646', '037326013X', '0192827618', '0380704587', '0679444815', '0385336179', '0425135462', '0345389980', '0375411550', '067162783X', '034536998X', '0758204531', '0449005836', '0451190149', '0312978863', '0416866666301', '1562475894', '3822889199', '0373218737', '0373153260', '0786928751', '0515136379', '0345339681', '1580110053', '8433912542', '055321313X', '0143300598', '0715630954', '1931696993', '0446530239', '0810008971', '051512317X', '0679745203', '0140188266', '0821776118', '0877016690', '0426197488', '0385496052', '015601288X', '3404148665', '0812508351', '0553576445', '0892832290', '0684863472', '0821754149', '0099196514', '0316154075', '0802117546', '0553801821', '044021145X', '0373226462', '0671577980', '0446611212', '0380761483', '07335075', '0380789035', '038079845X', '0962197963', '0396082181', '0751502464', '0140621091', '0425031470', '0061042315', '0679851011', '0425158497', '0425051730', '0312970048', '416158501', '1551669382', '0449002632', '0671727583', '0804114986', '0747248087', '0312312431', '0441809332', '0712678077', '0553225413', '3492260896', '0312913788', '1401301061', '0345382293', '1575668998', '073352687X', '0316816353', '0767902521', '1576736563', '0373078188', '3892680132', '0316782262', '0425154084', '0425189031', '055299619X', '0891346244', '0812694120', '0671027360', '0684848783', '8420633119', '0380814390', '0440212952', '0849932343', '0062734792', '0380868768', '157322202X', '0061013145', '0449223604', '0380733358', '0395907020', '0515127833', '0553253778', '0671003755', '0517591979', '0380807343', '0743212002', '0373835264', '0375725784', '0399146113', '1400047714', '0671528904', '0553580035', '084312914X', '0312518633', '0445408642', '0393048896', '014131088X', '0452011817', '0743251148', '0330297538', '3257218478', '0743410068', '0965693260', '067101532X', '0440236630', '0451168089', '0441003257', '0060164239', '0142002267', '0345384369', '037325993X', '006109515X', '0679768157', '0310228638', '3442355915', '0140621210', '0385404867', '0373032056', '0871312611', '0380978016', '0553212478', '0140430571', '0312979088', '0375704965', '0446613444', '0671867156', '0373484178', '0312865031', '0345316991', '0440112052', '0804900795', '0440236665', '067168289X', '0553565370', '0441783589', '0440180295', '0373441096', '0375404643', '0812970802', '0937295477', '0312199430', '0766602451', '1550372343', '0373115326', '0060933283', '189205101X', '0385335881', '0345382323', '0345342534', '0553571486', '8873122933', '0679753109', '0679455876', '0671027387', '0441328008', '0446602698', '1573229725', '0486266850', '0689829302', '2253039128', '349961619X', '0899683789', '0451194861', '0756401372', '0440214920', '0060166231', '0345383230', '0830817204', '0425150143', '1550547593', '0140250948', '0449223442', '0486270610', '0451204956', '0060959355', '067088300X', '0828102813', '1890621102', '0842373195', '0886773776', '0515131229', '1585674818', '2264035951', '1559029838', '0671680080', '0425074994', '0812576071', '0446802204', '3596220831', '3453146956', '0060910445', '0345312139', '038549081X', '0380711974', '0312306326', '3925898905', '0553802747', '0553273736', '8838429103', '0880016884', '0688163165', '0380002930', '0553564668', '0886775507', '0373226357', '0816728097', '0446529788', '044000925', '0736900640', '0425135063', '440181275', '0425180964', '0971880107', '0805010947', '0373077858', '0517706601', '0451160312', '0451517636', '2070301028', '0451453964', '0439139600', '8834403088', '0609610597', '0451521250', '0552134651', '189957901X', '7800055655', '0345413903', '0312982518', '1573221937', '0717283437', '3423126434', '0553122940', '0553219200', '0141302038', '0446519138', '0446519723', '082177462X', '0312009941', '9724131319', '1570643385', '1892213974', '2020509105', '0156004402', '0809435144', '0385240406', '0805051805', '0425151247', '0425096343', '0963270702', '849759200X', '8401491169', '0425130312', '026167398X', '0440207835', '0440220602', '2207305481', '0451405145', '0439417672', '0553105264', '0312278586', '0553803409', '0060175400', '1551669374', '0312034415', '0821768328', '0553209671', '0140092846', '067976402X', '0446610038', '1551669153', '0385301308', '9724614565', '3492237754', '0061054089', '0451522222', '0345461916', '0671660187', '1572970065', '0060598611', '0061000043', '0676972969', '0375753206', '0375755586', '0006730515', '0671038184', '0380789590', '0140288023', '0151008116', '1853260169', '0684848066', '0671003348', '0671456393', '0525945121', '0340596163', '0374525749', '088184389X', '034544034X', '0440214041', '9001955711', '0440126894', '0440131480', '1551667452', '0373510225', '1569470154', '0816713146', '0451097386', '0967303516', '0684825406', '0802112188', '0553268880', '0553278398', '068746384X', '0671430149', '884620090', '0671690574', '0425152251', '0590409433', '0740713949', '0394805720', '0517556278', '0743239261', '0448412853', '9719214872', '0425115801', '186066153X', '0330285521', '0373222998', '0806957050', '0688155847', '0140297405', '0553117459', '044651652X', '1569473706', '0552146641', '0671537881', '0312973055', '0553381393', '1590580885', '0761517855', '0786210745', '1578631211', '0425179885', '0553583980', '1884910432', '0060191929', '0373290055', '04192811100', '0064409430', '0380724073', '0380806312', '0451191889', '0385504209', '0440102731', '014029855X', '089283112X', '0060916303', '055213533', '0373691092', '067152951X', '0895050293', '0373225474', '0733533590', '0425077047', '0140621466', '0671721380', '0440211727', '8817150541', '1884235298', '0060929790', '0875843999', '074341134X', '0330373838', '0439064872', '9174486748', '0553206648', '0500201021', '067945960X', '0553802496', '0679731725', '0345450663', '0449215296', '0292738692', '8820438763', '0340279141', '0312195516', '0570041945', '0061095869', '0451164938', '0380784130', '0684847450', '0684801884', '0425133516', '1565124006', '0312989709', '080411336X', '3257232608', '0689800304', '0531045269', '3404142624', '3453180151', '844733161X', '0375760911', '0373117876', '0029066867', '1860196276', '0880015861', '0505523752', '055299670X', '0060199598', '082177428X', '1857987462', '048627053X', '1572970111', '0373250274', '0156027321', '0688171877', '0671874330', '067087146X', '0671525743', '0684801523', '0345386132', '0812543262', '0789441160', '0449212602', '0312192436', '0425162443', '3895070254', '0425188280', '0679410325', '0553298798', '0140033521', '0679749519', '0316314927', '0704339501', '0375407340', '0446387878', '0590697781', '0312952066', '3404613082', '0061011983', '0886876478', '0201419998', '0435150790', '006019622X', '0312253044', '0373036736', '0312029608', '0380802600', '0671684256', '0843949945', '8489669600', '0786890436', '0192815326', '0449208672', '0070715335', '0380776324', '0060987529', '0671047434', '080411997X', '157143013X', '0553270931', '1400052408', '8481303577', '0486218309', '0380790718', '0684825457', '0425140032', '0553246755', '0446322644', '0449004422', '3596215226', '0812550544', '0743403436', '0449209148', '091516695X', '0517161109', '0380978849', '0380815257', '042510107X', '0812517725', '0446400157', '0451192575', '9513508978', '0380873877', '0525946446', '0440236800', '0373250215', '0380731150', '0385311109', '0312979541', '0451521285', '1562948962', '0679781587', '8447333264', '0684853035', '8878245798', '0394564324', '3434540466', '0393315819', '0373790694', '0679746048', '843391443X', '0590222333', '067172262X', '3257233701', '400323071X', '0451208765', '0590620096', '0449219461', '0345390458', '0969518757', '0849935040', '8495501651', '0373764863', '8445073826', '0671683780', '2080674889', '0590353403', '0877013489', '0788789821', '0441001971', '0425178366', '0316666343', '0886779227', '0743486226', '0312955510', '0060195444', '9728598130', '0312305060', '0684802082', '0393312917', '074320607X', '0515104175', '1863863265', '0425189414', '0156439611', '8850202105', '1576737330', '0385491816', '0553213806', '0743428188', '006019538X', '0688039898', '0399136703', '0836217691', '0875093663', '8449503825', '0451526554', '8483061066', '0553274503', '0060198346', '0340370238', '0373079613', '0345361792', '2253054747', '2038700141', '0345384466', 'B00006H3BO', '0345455711', '0842377506', '3458329072', '0446606812', '0836230809', '0029256208', '0684812274', '0721451063', '0140253602', '0415106001', '0292776292', '0399144706', '2020525747', '0505524473', '0316639982', '0679601597', '0752837680', '0394756983', '0440218098', '0425154092', '0887307876', '0425178102', '3462015753', '0373709846', '0553801341', '0586072586', '0689716605', '8432039756', '0451450876', '009927583X', '0821772252', '0345347951', '1564761584', '0449221229', '8477022631', '0449219364', '0966339762', '0245547215', '0883684152', '1558744150', '3499151499', '0515127213', '0140105662', '3596118042', '0886778441', '0399145087', '0452284449', '0375758267', '0811812618', '0679723161', '0441009832', '037319045X', '0770428940', '0156028778', '0865470545', '0553251023', '0671769421', '0440178002', '0553278029', '0345378261', '0786888067', '0375504141', '0380720175', '0394507630', '0142000396', '0140430148', '0345311922', '1863597735', '0373259883', '0451452615', '0553571818', '3442454255', '0886774616', '351836605X', '3492227694', '0140303812', '034543479X', '0099218216', '0425177173', '084392389X', '0394800893', '0385312520', '0786901462', '3453009967', '0192827588', '0446363251', '0812516478', '0671010964', '0684809311', '0440122090', '0823030148', '0137450001', '0671745069', '0375706410', '0671689762', '0451408179', '0515113816', '0471133264', '0440224780', '036108000X', '0679744479', '0345459202', '0515076279', '0060187468', '091847728X', '0425167283', '1575660504', '0671746081', '0553277936', '0451411277', '0722150849', '0441132456', '0394828186', '0060531231', '0671605364', '0375703438', '0399138226', '0590433474', '0440472016', '0553379658', '0821733877', '0140186409', '0689824351', '0948661593', '0553280570', '0786703857', '9512052873', '3596148464', '0882404822', '044651912X', '067101191X', '0345378490', 'B00009EF82', '0671886665', '0440221471', '1551660148', '0425167313', '0352310901', '0399134506', '0316153982', '0345350685', '0440402913', '0590477331', '0380804697', '0395647266', '0385302304', '0385258577', '0689844077', '0805007202', '1400041732', '0446610968', '0373108656', '0385504470', '0821729861', '0515132020', '0821772872', '0060092661', '0515122491', '3404147472', '0380714418', '0505523892', '0609803700', '059035342X', '0393321983', '0060971444', '0395453909', '0525943048', '0449005615', '2253059536', '0486272818', '0671875914', '0676971954', '0262220547', '3492223818', '0002713713', '0385424728', '0425105334', '0515120006', '0449003787', '0330270001', '0440907020', '3423361808', '0060508663', '0345423097', '0679642323', '0446387207', '1903402042', '0515129941', '0373790945', '0836220854', '0771592558', '0312252250', '0060168013', '0671645412', '0553278649', '0140430059', '289430.025.5', '1565073541', '1840186348', '0618246940', '0446364193', '0380732688', '0425181979', '3803225108', '0751305162', '0380733390', '0451207874', '0312063776', '0896227170', '0393051250', '0099739518', '0892966610', '1560760605', '0373250142', '0440208416', '0060009225', '0394742745', '0671004549', '0836218353', '044651747X', '0345427637', '0871782294', '0671041460', '0451195922', '0749319291', '0553271466', '0425137872', '1573229326', '038072118X', '0836232615', '0446606324', '0345404319', '0330318403', '0064472876', '0440407591', '0440236053', '9029528893', '0786864133', '0140328696', '0553295780', '0425188221', '0425077837', '0749395990', '089471273X', '0333375726', '0743222245', '3746616360', '0671741187', '1591160766', '037312001X', '1932080139', '0521357306', '0553029746', '0758201346', '0709702884', '0452282152', '0553291955', '0805062734', '078686351X', '0425166929', '8476344317', '22773004602', '0380007789', '0446602736', '0446670561', '0385503822', '051513628X', '043965548X', '0399141464', '0812544404', '0415909910', '1563260220', '0439147735', '8476695543', '0375707972', '0553813285', '080411109X', '1234560302010', '0345443683', '0749309784', '0425175405', '037376474X', '0440220742', '0373074638', '0142001740', '0679454748', '0345314980', '0060290994', '0877730431', '0671777351', '0688129625', '0140441093', '0373250657', '0836220676', '067102308X', '0743417909', '0671695126', '0670032891', '0743427742', '0451203070', '0679450432', '9021494019', '0373484429', '849624699X', '0553153153', '0671501070', '0440484332', '0061099015', '0380727609', '0441000916', '0060801921', '0531300633', '0316693006', '0061093327', '0312291639', '1558744525', '0452282829', '1555610900', '0425133249', '0449006530', '067152609X', '0515134120', '0671016652', '1840235128', '0345387023', '671774859', '0140119809', '0440209633', '0452280621', '0151002630', '0385334036', '0671792806', '0060520507', '0802762743', '0452283914', '0440998050', '0380012863', '1569319014', '354832021X', '0764224301', '0373706987', '0375703055', '0451209273', '067101417X', '0441068642', '0310227542', '0671661035', '055357230X', '0451450124', '0070444226', '0679748172', '9727722458', '0373288808', '1893183025', '0440213282', '0671004530', '1556700318', '1864470119', '006008460X', '0060809337', '0340429739', '0345331605', '1886444013', '0870529161', '0671648772', '0451150937', '0312859880', '0061043915', '0843947632', '1857029402', '0425129586', '3407782438', '044819094X', '0345298616', '0140321276', '0425154882', '0531157490', '3505095834', '0380525550', '0552134619', '0064462080', '0670892742', '0671001302', '0451459067', '0373227892', '0425187403', '0842375066', '0395560012', '0373111029', '0785307907', '0552546933', '8817153567', '0140071768', '0449204138', '0449205878', '0060274069', '0671670409', '0446525774', '157673045X', '2070373703', '0812519671', '4234758691', '0394755588', '0316735027', '0451409159', '0061090301', '0312265859', '0373259549', '0375703764', '1560728914', '0821768417', '3548601863', '0312308639', '0789401746', '0140431268', '1841721522', '0966077814', '0380792494', '0831711868', '0439139597', '0688121195', '0590424394', '0373243286', '0141181230', '0553270060', '0064405710', '0385307888', '0449003701', '0393029980', '0385508042', '0060925787', '0060975547', '0373072449', '0671746065', '0140170480', '0553260804', '0972172335', '3471775609', '0440224101', '0515115630', '0671663143', '0590411365', '0385335555', '0842335684', '0515125628', '0553581295', '0345424050', '055325278X', '2277302112', '0891073906', '0396068278', '0060739444', '5602227300809', '0553267027', '0451135199', '0743225805', '0553299441', '0886777844', '0688165141', '0373166788', '0394859561', '0671007912', '0767918908', '0671797050', '0394223802', '0915811332', '0446357383', '0345392825', '8472230082', '0689825943', '0375504397', '0749316837', '0590720252', '0553279912', '0433396199', '055321246xx', '055358023X', '0446356050', '042516876X', '8470411098', '1551662795', '0312876629', '0812540336', '0747401268', '0140042601', '1857090152', '0312983867', '000714346X', '0399144714', '0060191821', '0812574923', '0345340957', '0525947299', '3720516652', '0452266637', '8878246522', '0060959436', '0441005837', '0821776398', '0671502689', '0671698338', '3404142942', '0712623884', '8879830597', '0810907364', '0440211263', '1556610351', '0553278827', '0553282808', '0451197038', '0440234727', '44900466075', '0771087373', '0373168543', '0373288026', '0552996009', '0450571130', '0451160444', '8877820535', '0812550862', '0006473024', '0671568175', '039457656X', '0099485419', '081257639X', '2070407527', '0449147517', '0399150838', '0671529412', '0142002623', '0764120581', '0330375253', '140003065X', '1585421758', '0345333748', '3455042139', '3453160363', '1590888391', '0060262478', '0590452037', '0861637534', '0743411269', '0743410335', '0440400449', '0446356018', '0631221204', '0671021001', '0671011618', '0452281784', '0771087586', '0345296702', '8401491029', '8846818938', '0446600768', '0451524500', '0446600792', '0671007718', '0783548303', '0399147195', '0671024094', '0399215360', '0590460153', '0141309210', '0747267626', '0786015233', '0966891945', '092077525X', '0449701751', '193168605X', '0140124896', '0373226322', '0345385950', '1586480324', '0060935464', '0310284619', '067188414X', '0446608033', '0582003288', '0375703063', '0440800544', '3518112686', '0060199652', '0679723110', '0380762609', '0140292683', '0836221362', '0340187859', '0812589165', '1555031315', '1565890442', '0140279105', '0130815667', '226403629X', '0969419430', '0553142003', '0880382546', '044017161X', '0671034677', '0440214165', '080410526X', '0553572202', '0060294655', '0373153279', '0446610550', '055327838X', '1551667037', '055328942X', '0399149384', '0688167888', '0061011843', '0553801279', '0373218060', '0345403916', '0446674249', '1882723058', '0060263857', '0877017883', '1576731235', '0439130204', '0425180239', '050552466X', '0140067477', '190315510X', '0340793708', '0919345182', '0821776037', '0449147738', '1551665344', '0747521018', '0399136495', '0688146910', '0449906515', '0571209874', '039332303X', '0440213185', '0099482002', '1563891050', '0446600474', '3596223946', '0679761047', '0435910078', '0425113884', '002542730X', '00065146218', '0373077467', '1550135759', '0439222265', '0743257480', '0345444884', '2207238520', '0061099708', '1574301039', '0380806304', '0747274134', '0786885971', '0307171434', '0440222877', '0140430962', '0553375407', '0525243828', '0812571762', '0027092305', '0446602612', '9501512916', '0670030449', '0821768379', '070640985X', '0671726889', '0060264306', '1871744105', '8879830546', '0060987103', '0747249180', '1844262553', '3404257049', '0520046552', '0451450523', '0446608106', '0373114206', '0452276721', '0778320308', '0141013087', '8467004975', '0451455991', '0553581481', '0385334834', '0743235355', '0156787334', '0671898604', '0440200172', '037322583', '0380713985', '0671568183', '0446608262', '1551660717', '044651862X', '0671739786', '0439440629', '034542252X', '0312089295', '0452283035', '0553239341', '0842357912', '0060508302', '0773759069', '0553573616', '0451160533', '038049163X', '0840751877', '0590877518', '1886801096', '0060955775', '067152044X', '0965046907', '0691019339', '0425130711', '0451203453', '0553575384', '0765304856', '0679721827', '0515106402', '0373832958', '349913599X', '0821773976', '0451625676', '0586044345', '0671673688', '0689815158', '0142000361', '0689805985', '0345380479', '0884046532', '8432207330', '0553576798', '0843138092', '0394896254', '067187098X', '0486243338', '0140244824', '0553568728', '0345461711', '0440150795', '0440141168', '0349109435', '0440407079', '0449219550', '0890431337', '0142001384', '0385073534', '0070089698', '0385507941', '0521468760', '0441569595', '0345325605', '0821759450', '1578700418', '0373122160', '0747557918', '0590551930', '0140430083', '1875058060', '0345434692', '0553585177', '0064400557', '0451409736', '0553256459', '1573225517', '3462026545', '0486284670', '0380718340', '0812502493', '0446609943', '0030574862', '0842339760', '0843949333', '0590483528', '0060187409', '0446343455', '0345311078', '0201407221', '1853260282', '0895779323', '0553101943', '0800780418', '3442429552', '0670030643', '0712600019', '0156001918', '8845421457', '0449204324', '0679449116', '0375727345', '0553089242', '0312980345', '0618004076', '0515122564', '1552673057', '0385314280', '0451204301', '070894471X', '0140049975', '0451155750', '0425181014', '1551667908', '0060163976', '0440220734', '0886775809', '0374347972', '0316089699', '0671008285', '0425180905', '0439568455', '8474105706', '0515131563', '0304352411', '0390211532', '1580623034', '0791000648', '0446364282', '076455235X', '9768108126', '0873642651', '0441009336', '0140287019', '0028610989', '0778320790', '0520012984', '088029650X', '074931320X', '0373709374', '0152025030', '1877008400', '3596150655', '1565920422', '0345309979', '3453074971', '0553574558', '1573225789', '0345385977', '0060953748', '0451521676', '0451204565', '0449214982', '0553100157', '0451173317', '0380545020', '0395536804', '0860681467', '0689851979', '0671022997', '0142003557', '0749324392', '0393050297', '0553268120', '0446364789', '0446671002', '0441750184', '0671892673', '0439658543', '1740595939', '0446604275', '8882464695', '0312253265', '0061061360', '0380018179', '0425142078', '0345406931', '0879677856', '009944352X', '1575211777', '0028630238', '067697385X', '3499264161', '0670845213', '0786881356', '039480001X', '0099283840', '0027357813', '0061097101', '0671003410', '0600353214', '0440177073', '0345323211', '0749396067', '0440207622', '3442453534', '0345285980', '0425170306', '0345447867', '0486259250', '0812533313', '0446613193', '3440093360', '0373118864', '0451205987', '0895120402', '1551669552', '0553026135', '0553273914', '044922046X', '0060086246', '0553213652', '0451188470', '0525935908', '0813633133', '0679425268', '0590332163', '0553578529', '17121963', '0345423089', '0156007479', '0553135945', '0679760806', '0737303239', '0425181480', '0312970633', '0671639218', '0671881175', '0679452281', '0743418735', '0670870951', '1559583665', '0452276764', '0060915803', '0140362505', '0140271813', '0140298452', '0671690590', '8472453723', '0670031321', '0345350170', '0671776975', '0446360716', '0380798956', '8423918262', '0805071563', '0868194778', '1869503589', '0671722891', '0609804138', '0804107386', '0425163407', '0880299053', '0373056567', '0830819118', '3570204642', '0060915544', '0373035284', '0425165353', '0515130613', '0446672211', '0743451430', '0684867974', '1556615620', '1575663236', '0439136369', '0758206135', '0140058338', '0099233010', '0373057113', '0812553632', '0385426151', '0385187858', '0452263565', '0440211298', '1902260333', '0373272375', '0684834723', '0140120556', '0553213342', '1842430327', '0743202007', '0385497946', '037308384X', '1583487840', '0871136317', '0399127984', '1857232046', '0440189438', '0486270556', '0671520474', '0140390448', '0380973464', '1551665948', '0743244788', '0590090755', '0671551043', '0812570626', '0373291663', '0195049067', '0060081961', '3423205660', '0572014015', '0877799040', '0062503669', '0743418891', '0553111337', '8432221848', '055327418X', '037379066X', '0679444920', 'FROMPUBLISHER', '0842332340', '0671721763', '0345447840', '0446519006', '1880966042', '0099297701', '0060177217', '0553204963', '0312265867', '034536550X', '0345419979', '0590099132', '0671034243', '3423072342', '0394800168', '1570424535', '039914210X', '0786889322', '0446525502', '3442151473', '0141439556', '0064472272', '8838917442', '0446603716', '0380703130', '038542471X', '0373118880', '0373243006', '031242227X', '0060198338', '8401327199', '1878044885', '0345447409', '0345439104', '1585421359', '0375826688', '0192833952', '0380755467', '0312863829', '0141007338', '0061042943', '1551665026', '0425115097', '0060927216', '0449146855', '0590418858', '0930330471', '0394717058', '0671758527', '031286874X', '0688126596', '0345346971', '0380730847', '0375413596', '0373057555', '0671673661', '0738703192', '0670892971', '081673710X', '1870041364', '0934601712', '1574881515', '0553579908', '053107112X', '9511114891', '0425166619', '0060188707', '0061083593', '0553229818', '0679764119', '0440216745', '1573229571', '0330334026', '5620220578', '0896936341', '0312954212', '0520024788', '0920852386', '0553256920', '1561711543', '0312925174', '0048231142', '0380754134', '0192833863', '0425192725', '0822434628', '0812579259', '0843920351', '0002226642', '0671744585', '3442355907', '0849934958', '0802137989', '0812509811', '0440203279', '0345272609', '0764221760', '9726952670', '0712670394', '0515119652', '0763603538', '0525940464', '0373242972', '0316313068', '0590486861', '0061058270', '1558537449', '0385482493', '0515110973', '0586047654', '903884543X', '1558535527', '0445402296', '0440145465', '0425105725', '671471813', '006105481X', '0446607444', '1591164354', '0767902866', '1857920082', '038550120X', '0330335723', '1551663058', '1579542913', '0805062262', '0786708395', '050552516X', '0091882745', '0679885854', '0440414539', '0393322599', '0671704184', '0446604941', '0345393007', '1562054481', '037541181X', '2253000841', '1580624383', '1857978013', '0399147365', '0440200563495', '8845252906', '0380603764', '0312890001', '0943020077', '0373243073', '0060503580', '0553571656', '0505525682', '0767901428', '0821739913', '0140437312', '0385306032', '0140139974', '1573221112', '0425143600', '067156773X', '0373483422', '0515117242', '0441783058', '158579029X', '0739405179', '0192100386', '8495426609', '0373790309', '0373054750', '0553583158', '1580171443', '0002243806', '1558176454', '0553278916', '7992753550', '0006754147', '0553297988', '0743419170', '0141002077', '0333600584', '8423977439', '0373441320', '0874849098', '1573227889', '2830207904', '0440404541', '0743245520', '0451178017', '1841954551', '0679767193', '3499605554', '0870440047', '1853260207', '0670030635', '0671867113', '037324469X', '9726102863', '067102535X', '0671687743', '0027435008', '0451179285', '0767908511', '8807814099', '0525946284', '0765343266', '0486264564', '0879516283', '0312291388', '0373171366', '1853260533', '0312143060', '156173411X', '000651264X', '0385501404', '0312978766', '0451188454', '0812969650', '0848703596', '0373790643', '0709169329', '0517882124', '0449703983', '8472794180', '0590476866', '03333365321', '074322227X', '0340393130', '1566194016', '0316171530', '11238356', '0140193669', '0140055932', '0385337116', '0064400964', '0140276017', '0226500578', '3596505968', '042518403X', '051513290X', '0553156411', '0345358031', '014027927X', '8401328128', '0385304900', '0866228098', '0765341697', '0590436309', '3927568201', '0283072792', '0375505857', '0345424654', '0385333412', '0751501085', '0553257994', '0425097722', '04403431904', '0061081809', '0134681339', '0394823370', '0689826494', '0571209769', '1573920363', '3551551936', '0553298178', '0385496095', '0140342907', '0671722816', '0931674085', '8878240192', '0708881203', '0440295661', '0553263579', '0446328456', '0552143243', '0061099805', '0446403377', '8472234363', '0373250282', '0345313151', '0385513089', '0552117552', '0671735551', '0449700712', '8487507301', '038542017X', '0553800914', '0192833715', '0394756967', '0880299185', '0340339659', '0060012781', '0515133418', '0345318862', '006101351X', '0393092933', '0330253603', '0399138994', '0385497555', '2277302686', '0571153747', '1571201203', '0415077087', '0875421369', '0521781884', '0395866502', '3612650025', '0451206940', '842263824X', '0688174035', '0373169469', '0375502025', '0688063314', '1551660520', '1862070040', '0380804727', '074939188X', '0070503192', '0517703939', '0373484771', '3423204753', '0743237196', '0553233998', '0590494333', '0671468510', '0393957608', '0440208556', '0679429891', '0312991460', '0451163966', '3746612411', '080410753X', '0448117517', '0890811512', '0671532251', '0871315572', '0446344281', '0821713876', '068484639X', '0394569873', '0749309466', '3596144965', '0743451538', '080410946X', '3518367773', '1590592565', '0767902831', '0684801221', '1860339085', '0887764983', '0671028375', '0812528042', '1863307443', '0671766163', '0590477412', '0671870874', '0312966954', '0842329129', '0330323695', '0061095559', '0805068341', '8440679858', '0373110871', '0842335986', '044023722X', '0679744398', '0743418549', '0062507877', '0060975008', '0374281947', '0449210901', '0789495929', '0140309586', '0345363582', '0764122967', '0312970307', '0451523415', '0590437976', '0140042172', '0373289081', '0375704248', '0070212570', '8420646105', '851231085', '0892131349', '8402090443', '0553213148', '0452268060', '0590453858', '1551922703', '0122008502', '0385720106', '0061082708', '8845247414', '8882896714', '0375802916', '0689804423', '9726080045', '0515106070', '0836217012', '0671036505', '0515132039', '0804119996', '0446607711', '0898795966', '0843931442', '3442135338', '0375502238', '0451184394', '0812540328', '0486287262', '0345328396', '0380006456', '1551661780', '0767915062', '067973807X', '0671027514', '0663461634', '034544325X', '1893224546', '0879676566', '0380727021', '0843950498', '8845251829', '057500150X', '0233996214', '8431705302', '0471143529', '0451151259', '0743418174', '1572700351', '0006928137', '0449218414', '0375703861', '0445209666', '0871316390', '0330020765', '0066214440', '0425143341', '0553567675', '0451204336', '0304345350', '0394578759', '0345353145', '0741407612', '0441240941', '0440237300', '0451408977', '1880656329', '1573222038', '0880385359', '0030965268', '2260013899', '8440670796', '0374204772', '0307020711', '0061054763', '0671217291', '0449007383', '0816745382', '0312983298', '0575048700', '0449001962', '3548256171', '0425177009', '0553575015', '0198200730', '039302007X', '0671662163', '0552999458', '0312315228', '0425178951', '0671797301', '0441070698', '1570981590', '0446607339', '089480698X', '1566196884', '031230739X', '052524901X', '1585670162', '0671722859', '0765340747', '0451175190', '067976674X', '0679507841', '0375500510', '0140258418', '0451190157', '0571212956', '0446602620', '8435016285', '0449909735', '0888390777', '042515999X', '0373223706', '0399139206', '0446364703', '3442069696', '0825672597', '0515125601', '0394851307', '0812545990', '0345446429', '0192800337', '0373765193', '0064400018', '0441694543', '0446310786', '0140177396', '076455168X', '0316107387', '1562825038', '1559212438', '0679891412', '0785300430', '0263148866', '0373762984', '0312976275', '3442245567', '0590435124', '0671000349', '0099421267', '0441011020', '0671045512', '1580628362', '0002232901', '0451411633', '0373264011', '0517884534', '0583112315', '0671869671', '0553568884', '0446605239', '0061099341', '0767912268', '0764566202', '031205436X', '0441005748', '1569317917', '8807814935', '0688177743', '2742744444', '031298328X', '067187120X', '0060675292', '0345297709', '0345409329', '0312300638', '0345401565', '0373833466', '0553569910', '0330332767', '0559352604', '0671037382', '0399151060', '0385264453', '0140373365', '0373255012', '0002226162', '0140067485', '039951936X', '1551665794', '1578565677', '0345350499', '0425146812', '0553346687', '0676972152', '0140501983', '8440672055', '3499263599', '0805041400', '0446394521', '0373292147', '155166710X', '073700049X', '8804305479', '0812515609', '0451166876', '1885356552', '0553563106', '0771061099', '0312422156', '0821742523', '0905483839', '0425194612', '0330330276', '0689704232', '8479601590', '0590423541', '0446516988', '0140621679', '0843944706', '0821748173', '0373032900', '185326167X', '0099771519', '031286101X', '0843940328', '0451188489', '0451169530', '0517163446', '1573228397', '0380781220', '0425124866', '0449901017', '0426203348', '0006511120', '037303279X', '3786720835', '0441317626', '0892819006', '0373264674', '0679722661', '0440216974', '0671693816', '0312964323', '0752584820', '052512800X', '0446610399', '0380977788', '0689828772', '0742522458', '014043268X', '0425131769', '01400.5925.3', '0451176464', '0394747704', '0449223450', '0312978448', '055358118X', '0060242361', '0140276904', '0689716850', '0345425707', '0670866229', '0060122498', '030371706', '2226086366', '0765196875', '1551520559', '043920786X', '0553289691', '0515130990', '0895867990', '0373078579', '0345334302', '1568843844', '0446612790', '0312958455', '0553586335', '0786014423', '0810909650', '0684803534', '0786885416', '0385335121', '0140621806', '0843934131', '0316776963', '0600566854', '0330484648', '0375503765', '0345435249', '0316782009', '0064460606', '0671644661', '0345354648', '0345301110', '0446609633', '0451186362', '0449141349', '0451405382', '3442437407', '0520008960', '0439327660', '0553096834', '0553094416', '0192833642', '0028604032', '0802139248', '0875421180', '0671876775', '0345458958', '1561893676', '0812510666', '0061012467', '0312263120', '0670852139', '0747403902', '0842337539', '1586605232', '0786916362', '1570750262', '0886771854', '0449205983', '0345369947', '1878257862', '0345423658', '0201329697', '0515124893', '0849917050', '0425051617', '0440240891', '006029521X', '1551663155', '0717284832', '034529873X', '0425140040', '0553099590', '0440229502', '0802139612', '0373262175', '8876846174', '0394725883', '0679406832', '0062502891', '0312993536', '0721403468', '0060240245', '3442545706', '0809229889', '0671047450', '0451522397', '0060208007', '0380756269', '055329783X', '0670849057', '0446311901', '0156899604', '042518613X', '0671793489', '3257251017', '0821763784', '1551662914', '0553478257', '3499227339', '0743406583', '8370755275', '023111544X', '0671690566', '0821720619', '8811738717', '0671891715', '0385490879', '0060529148', '0679003797', '0743406176', '0771055706', '0821759868', '0425191311', '0913367141', '0425172546', '1550376330', '0671692674', '0060973595', '0140176616', '0060934700', '0681007982', '155166514X', '0061080349', '0140252738', '037370691X', '0553275976', '0886777631', '1567315844', '0440146577', '0804422079', '0525944001', '0312420021', '0679772677', '3462015648', '0380702878', '0804119783', '0721421989', '0679601996', '0773731199', '0839828225', '9724112756', '3791513265', '0439376106', '8467201444', '0345303644', '0679731369', '0553287346', '0809478110', '0061030201', '0451204948', '0140238131', '0671769820', '0525946241', '0393020495', '0061054240', '0553564528', '2207247554', '0330309552', '006019443X', '0451527747', '0452283442', '0151004951', '1551665824', '0886772214', '0517188244', '0679409920', '0373709544', '0884943240', '0553284789', '0515119202', '1551664380', '0671008803', '0345288556', '0764518003', '0440504953', '8420613126', '0140620192', '1552783081', '0373077521', '2266111396', '1551664704', '0765305224', '0449220176', '0765346125', '0553288202', '0671526715', '0140340203', '1551668602', '8422662523', '0451404319', '3423118652', '0446404144', '0440208130', '0684867621', '0553230360', '0671003119', '0517122707', '3257228007', '0517661756', '0380789612', '0060959037', '1401088945', '0918273838', '0375750223', '0449239152', '0373077882', '0786927089', '0373201818', '0375506039', '0449000885', '0735613826', '0738861618', '0553028227', '0671541501', '0553211757', '0385498411', '055357292X', '0375508627', '0671887963', '0451205758', '0523417489', '0345337662', '0312960344', '0802775004', '1853260800', '038550117X', '0966193105', '8521902069', '0346123062', '0689710518', '002864896X', '0345396936', '0874771935', '0439368529', '0553277006', '0671003682', '0062517716', '9029507780', '0393970426', '0671519816', '0060924837', '0375505695', '0452261368', '0373691602', '0786885688', '2.02.000585.9', '8445904116', '0060186526', '0894718207', '0590404075', '0446603856', '0807119466', '0571148166', '0146001435', '3785540159', '0373291027', '0553271644', '0451457765', '0671669230', '0515126772', '1588720756', '0807023086', '0553377876', '0761507280', '7506015463', '074345068X', '0312066384', '0812564871', '0805042024', '006092991X', '0440228476', '0679725513', '0440574358', '0671799045', '0590452584', '0130305367', '0440910811', '0060976454', '0804104549', '0141301147', '8878193526', '0375418830', '0553293370', '0894803441', '3453024370', '0952415348', '0140442081', '3493600372', '0679412611', '8488413750', '0394561619', '0486282228', '0373825749', '3922028004', '0895773678', '0810918684', '0399151435', '0373638078', '0394925602', '0380792478', '3596258758', '9728257163', '0345351738', '0373288654', '8871334914', '8574023477', '0747544603', '0373104677', '0743470915', '0140186522', '1571690506', '0373121482', '0141303743', '0877423814', '0671680781', '084394546X', '0446600466', '0312867875', '1557482675', '0440217466', '8804489448', '034538184X', '0451179900', '0486999521', '0743423682', '0316286869', '0764112198', '0451119932', 'B00005R2BG', '0747240752', '0373271220', '2070407756', '2070374610', '0312319517', '0373761910', '842268215X', '0380773155', '2844050328', '0060241756', '0812562836', '0226848620', '0060512806', '0671042556', '0452283086', '0671204971', '0941188108', '0385482515', '0515123471', '0809464128', '0586081321', '0525937676', '0373112270', '0061082031', '0385336004', '055326253X', '0155037714', '068485760X', '0446521582', '0316735736', '1558702334', '0373451636', '0385244002', '1551669277', '0738204307', '037302309X', '0440203430', '077042029x', '0393312461', '8804325038', '0743448189', '06080290X', '0449902854', '0440225442', '0061094226', '0590466631', '0806512717', '0099463601', '9176428214', '0515132756', '0349106533', '0380978172', '0345467566', '0380754509', '0425145638', '0553271636', '0380723387', '0373098189', '9041701214', '0812500725', '009943184X', '0345417186', '0531071421', '0749398574', '0441009239', '0375702709', '8439598122', '0132176130', '0452263018', '0060532149', '0913299545', '0553232495', '0452283736', '0399141324', '2070360423', '0060955937', '0373871759', '0670814164', '0300001479', '0399133844', '0451408888', '0030591724', '0060932139', '1557100047', '0515136530', '1880032376', '038080722X', '0670813028', '0767901819', '0385497288', '0380365251', '0006547834', '888451049', '0865474273', '0393312356', '0590457225', '0201626705', '0449002640', '0425185710', '0751338834', '0553576801', '0553292439', '0871568063', '0142004235', '1558173331', '0312155433', '0671656155', '1558743316', '0552995371', '0312288115', '067188803X', '3499220946', '0671729411', '0671451820', '0380003821', '0141000198', '0006512801', '0631197346', '0590449648', '0843111976', '0874067952', '8471483769', '8804341971', '0553381520', '0373071299', '0373270704', '0590435698', '0439202701', '0385418213', '0449001946', '0440166497', '0312132204', '0553584049', '0440147956', '0812561589', '0875423108', '0316852570', '0137530382', '0751512990', '014011632X', '8871060008', '3442452643', '0671026259', '0312319142', '0345425537', '0375501851', '0452282764', '0812520920', '0785283013', '0767902076', '0525432922', '0688177859', '325723273X', '0380730790', '3548330223', '0821736612', '0330254103', '0316850497', '1558747109', '0425179451', '0816717176', '3896393723', '0874775191', '0770424961', '1567187285', '0380815931', '0553211412', '8806158341', '0684835959', '0375705856', '0679449310', '0515111317', '034528299X', '0826321933', '0446400513', '0312983212', '3445103820', '0380729342', '0446672289', '0449237826', '2221002822', '0688084923', '0440184053', '0385333463', '0064403688', '0449906787', '0006548180', '0373483945', '002860497', '1414033435', '0425137007', '1850573751', '0441783309', '0804830088', '0375763317', '0373250169', '0552140287', '0451455789', '0399143130', '014019536X', '0312289871', '038077352X', '2246548810', '0415130352', '039595617X', '0877222401', '006101351', '0440485525', '0374148600', '0312202911', '9060054156', '0373243642', '0451410807', '0349117004', '0316693200', '0140272658', '0380731851', '074342798X', '0345378881', '0816769370', '1575662280', '082172262X', '0679015396', '0152045643', '0140130209', '0307231240', '0155658115', '1585422118', '3518392867', '1575662191', '0345369351', '0553283936', '0714530808', '0767901762', '0312148259', '0060989238', '0805036504', '034544177X', '0373691254', '0316899984', '0449221490', '0345428285', '0515069469', '3451187930', '0156007754', '0670892300', '0066214122', '038097519X', '006109918X', '0446608076', '0451403355', '3499230305', '1858288967', '0679767185', '0140042326', '074347709X', '0870541617', '0375708316', '0590424777', '0449217183', '0441008216', '0805029281', '0460882171', '0553527371', '0590444301', '3453173287', '0340377720', '0786002735', '0440223237', '0486268667', '0060930179', '0758203004', '0853810158', '0515132187', '0192822292', '1551050722', '0553569902', '1551664828', '3518372742', '3471772510', '1551660512', '0919345174', '0670856495', '0441011101', '078688567X', '0373451776', '0785315497', '0786817089', '0671709828', '0449134482', '0671646958', '0425191192', '0449147657', '0842329269', '1851588418', '0671534718', '0373224400', '0380777169', '0679746757', '0671892347', '055357275X', '0843111658', '055356451X', '8574024856', '0312252951', '0393324761', '0385468709', '2266000489', '0140374248', '0373810202', '0843946644', '0786010924', '907433671X', '0671825291275', '0553568760', '0451182030', '0141303131', '0671870939', '0060984333', '342311536X', '0345391829', '0020427115', '0451192001', '0333386019', '0140171738', '052166618X', '0671450492', '2264025956', '9177093569', '1561480711', '0671067990', '0886775639', '1559723505', '0333750381', '0810322951', '0880297697', '0688139574', '0375412824', '0451169034', '038081093X', '0449212858', '9029001291', '0449225313', '0373289952', '0929605594', '0670876550', '0440224764', '0060191988', '0375700757', '0345361989', '3250600555', '0312964951', '0804830126', '8435034526', '0380815583', '0618045678', '1931850054', '0553109588', '0340770724', '0385730586', '0684848287', '0590412515', '0446302066', '0812551109', '3828400647', '1582430853', '0684835983', '052594527X', '0671797042', '8806157957', '0380814803', '8807809907', '9710805207', '185458281X', '0425169081', '0553572997', '0446673382', '0805063897', '0345335082', '0486408930', '156138450X', '0681100230', '0892839066']\n",
            "encoded ISBN :  {'0886774012': 0, '0441787541': 1, '0312276885': 2, '0886776686': 3, '1851680659': 4, '9026103441': 5, '0671865277': 6, '0440111811': 7, '1850159203': 8, '0912083980': 9, '185326055X': 10, '0439228905': 11, '2253153982': 12, '0380750988': 13, '0446517224': 14, '0425188809': 15, '0440226104': 16, '0515124524': 17, '0446603651': 18, '0694514527': 19, '0552146102': 20, '0373166362': 21, '0876044429': 22, '0373707592': 23, '9681322908': 24, '1559707135': 25, '0802138098': 26, '0345372085': 27, '0671670646': 28, '037326013X': 29, '0192827618': 30, '0380704587': 31, '0679444815': 32, '0385336179': 33, '0425135462': 34, '0345389980': 35, '0375411550': 36, '067162783X': 37, '034536998X': 38, '0758204531': 39, '0449005836': 40, '0451190149': 41, '0312978863': 42, '0416866666301': 43, '1562475894': 44, '3822889199': 45, '0373218737': 46, '0373153260': 47, '0786928751': 48, '0515136379': 49, '0345339681': 50, '1580110053': 51, '8433912542': 52, '055321313X': 53, '0143300598': 54, '0715630954': 55, '1931696993': 56, '0446530239': 57, '0810008971': 58, '051512317X': 59, '0679745203': 60, '0140188266': 61, '0821776118': 62, '0877016690': 63, '0426197488': 64, '0385496052': 65, '015601288X': 66, '3404148665': 67, '0812508351': 68, '0553576445': 69, '0892832290': 70, '0684863472': 71, '0821754149': 72, '0099196514': 73, '0316154075': 74, '0802117546': 75, '0553801821': 76, '044021145X': 77, '0373226462': 78, '0671577980': 79, '0446611212': 80, '0380761483': 81, '07335075': 82, '0380789035': 83, '038079845X': 84, '0962197963': 85, '0396082181': 86, '0751502464': 87, '0140621091': 88, '0425031470': 89, '0061042315': 90, '0679851011': 91, '0425158497': 92, '0425051730': 93, '0312970048': 94, '416158501': 95, '1551669382': 96, '0449002632': 97, '0671727583': 98, '0804114986': 99, '0747248087': 100, '0312312431': 101, '0441809332': 102, '0712678077': 103, '0553225413': 104, '3492260896': 105, '0312913788': 106, '1401301061': 107, '0345382293': 108, '1575668998': 109, '073352687X': 110, '0316816353': 111, '0767902521': 112, '1576736563': 113, '0373078188': 114, '3892680132': 115, '0316782262': 116, '0425154084': 117, '0425189031': 118, '055299619X': 119, '0891346244': 120, '0812694120': 121, '0671027360': 122, '0684848783': 123, '8420633119': 124, '0380814390': 125, '0440212952': 126, '0849932343': 127, '0062734792': 128, '0380868768': 129, '157322202X': 130, '0061013145': 131, '0449223604': 132, '0380733358': 133, '0395907020': 134, '0515127833': 135, '0553253778': 136, '0671003755': 137, '0517591979': 138, '0380807343': 139, '0743212002': 140, '0373835264': 141, '0375725784': 142, '0399146113': 143, '1400047714': 144, '0671528904': 145, '0553580035': 146, '084312914X': 147, '0312518633': 148, '0445408642': 149, '0393048896': 150, '014131088X': 151, '0452011817': 152, '0743251148': 153, '0330297538': 154, '3257218478': 155, '0743410068': 156, '0965693260': 157, '067101532X': 158, '0440236630': 159, '0451168089': 160, '0441003257': 161, '0060164239': 162, '0142002267': 163, '0345384369': 164, '037325993X': 165, '006109515X': 166, '0679768157': 167, '0310228638': 168, '3442355915': 169, '0140621210': 170, '0385404867': 171, '0373032056': 172, '0871312611': 173, '0380978016': 174, '0553212478': 175, '0140430571': 176, '0312979088': 177, '0375704965': 178, '0446613444': 179, '0671867156': 180, '0373484178': 181, '0312865031': 182, '0345316991': 183, '0440112052': 184, '0804900795': 185, '0440236665': 186, '067168289X': 187, '0553565370': 188, '0441783589': 189, '0440180295': 190, '0373441096': 191, '0375404643': 192, '0812970802': 193, '0937295477': 194, '0312199430': 195, '0766602451': 196, '1550372343': 197, '0373115326': 198, '0060933283': 199, '189205101X': 200, '0385335881': 201, '0345382323': 202, '0345342534': 203, '0553571486': 204, '8873122933': 205, '0679753109': 206, '0679455876': 207, '0671027387': 208, '0441328008': 209, '0446602698': 210, '1573229725': 211, '0486266850': 212, '0689829302': 213, '2253039128': 214, '349961619X': 215, '0899683789': 216, '0451194861': 217, '0756401372': 218, '0440214920': 219, '0060166231': 220, '0345383230': 221, '0830817204': 222, '0425150143': 223, '1550547593': 224, '0140250948': 225, '0449223442': 226, '0486270610': 227, '0451204956': 228, '0060959355': 229, '067088300X': 230, '0828102813': 231, '1890621102': 232, '0842373195': 233, '0886773776': 234, '0515131229': 235, '1585674818': 236, '2264035951': 237, '1559029838': 238, '0671680080': 239, '0425074994': 240, '0812576071': 241, '0446802204': 242, '3596220831': 243, '3453146956': 244, '0060910445': 245, '0345312139': 246, '038549081X': 247, '0380711974': 248, '0312306326': 249, '3925898905': 250, '0553802747': 251, '0553273736': 252, '8838429103': 253, '0880016884': 254, '0688163165': 255, '0380002930': 256, '0553564668': 257, '0886775507': 258, '0373226357': 259, '0816728097': 260, '0446529788': 261, '044000925': 262, '0736900640': 263, '0425135063': 264, '440181275': 265, '0425180964': 266, '0971880107': 267, '0805010947': 268, '0373077858': 269, '0517706601': 270, '0451160312': 271, '0451517636': 272, '2070301028': 273, '0451453964': 274, '0439139600': 275, '8834403088': 276, '0609610597': 277, '0451521250': 278, '0552134651': 279, '189957901X': 280, '7800055655': 281, '0345413903': 282, '0312982518': 283, '1573221937': 284, '0717283437': 285, '3423126434': 286, '0553122940': 287, '0553219200': 288, '0141302038': 289, '0446519138': 290, '0446519723': 291, '082177462X': 292, '0312009941': 293, '9724131319': 294, '1570643385': 295, '1892213974': 296, '2020509105': 297, '0156004402': 298, '0809435144': 299, '0385240406': 300, '0805051805': 301, '0425151247': 302, '0425096343': 303, '0963270702': 304, '849759200X': 305, '8401491169': 306, '0425130312': 307, '026167398X': 308, '0440207835': 309, '0440220602': 310, '2207305481': 311, '0451405145': 312, '0439417672': 313, '0553105264': 314, '0312278586': 315, '0553803409': 316, '0060175400': 317, '1551669374': 318, '0312034415': 319, '0821768328': 320, '0553209671': 321, '0140092846': 322, '067976402X': 323, '0446610038': 324, '1551669153': 325, '0385301308': 326, '9724614565': 327, '3492237754': 328, '0061054089': 329, '0451522222': 330, '0345461916': 331, '0671660187': 332, '1572970065': 333, '0060598611': 334, '0061000043': 335, '0676972969': 336, '0375753206': 337, '0375755586': 338, '0006730515': 339, '0671038184': 340, '0380789590': 341, '0140288023': 342, '0151008116': 343, '1853260169': 344, '0684848066': 345, '0671003348': 346, '0671456393': 347, '0525945121': 348, '0340596163': 349, '0374525749': 350, '088184389X': 351, '034544034X': 352, '0440214041': 353, '9001955711': 354, '0440126894': 355, '0440131480': 356, '1551667452': 357, '0373510225': 358, '1569470154': 359, '0816713146': 360, '0451097386': 361, '0967303516': 362, '0684825406': 363, '0802112188': 364, '0553268880': 365, '0553278398': 366, '068746384X': 367, '0671430149': 368, '884620090': 369, '0671690574': 370, '0425152251': 371, '0590409433': 372, '0740713949': 373, '0394805720': 374, '0517556278': 375, '0743239261': 376, '0448412853': 377, '9719214872': 378, '0425115801': 379, '186066153X': 380, '0330285521': 381, '0373222998': 382, '0806957050': 383, '0688155847': 384, '0140297405': 385, '0553117459': 386, '044651652X': 387, '1569473706': 388, '0552146641': 389, '0671537881': 390, '0312973055': 391, '0553381393': 392, '1590580885': 393, '0761517855': 394, '0786210745': 395, '1578631211': 396, '0425179885': 397, '0553583980': 398, '1884910432': 399, '0060191929': 400, '0373290055': 401, '04192811100': 402, '0064409430': 403, '0380724073': 404, '0380806312': 405, '0451191889': 406, '0385504209': 407, '0440102731': 408, '014029855X': 409, '089283112X': 410, '0060916303': 411, '055213533': 412, '0373691092': 413, '067152951X': 414, '0895050293': 415, '0373225474': 416, '0733533590': 417, '0425077047': 418, '0140621466': 419, '0671721380': 420, '0440211727': 421, '8817150541': 422, '1884235298': 423, '0060929790': 424, '0875843999': 425, '074341134X': 426, '0330373838': 427, '0439064872': 428, '9174486748': 429, '0553206648': 430, '0500201021': 431, '067945960X': 432, '0553802496': 433, '0679731725': 434, '0345450663': 435, '0449215296': 436, '0292738692': 437, '8820438763': 438, '0340279141': 439, '0312195516': 440, '0570041945': 441, '0061095869': 442, '0451164938': 443, '0380784130': 444, '0684847450': 445, '0684801884': 446, '0425133516': 447, '1565124006': 448, '0312989709': 449, '080411336X': 450, '3257232608': 451, '0689800304': 452, '0531045269': 453, '3404142624': 454, '3453180151': 455, '844733161X': 456, '0375760911': 457, '0373117876': 458, '0029066867': 459, '1860196276': 460, '0880015861': 461, '0505523752': 462, '055299670X': 463, '0060199598': 464, '082177428X': 465, '1857987462': 466, '048627053X': 467, '1572970111': 468, '0373250274': 469, '0156027321': 470, '0688171877': 471, '0671874330': 472, '067087146X': 473, '0671525743': 474, '0684801523': 475, '0345386132': 476, '0812543262': 477, '0789441160': 478, '0449212602': 479, '0312192436': 480, '0425162443': 481, '3895070254': 482, '0425188280': 483, '0679410325': 484, '0553298798': 485, '0140033521': 486, '0679749519': 487, '0316314927': 488, '0704339501': 489, '0375407340': 490, '0446387878': 491, '0590697781': 492, '0312952066': 493, '3404613082': 494, '0061011983': 495, '0886876478': 496, '0201419998': 497, '0435150790': 498, '006019622X': 499, '0312253044': 500, '0373036736': 501, '0312029608': 502, '0380802600': 503, '0671684256': 504, '0843949945': 505, '8489669600': 506, '0786890436': 507, '0192815326': 508, '0449208672': 509, '0070715335': 510, '0380776324': 511, '0060987529': 512, '0671047434': 513, '080411997X': 514, '157143013X': 515, '0553270931': 516, '1400052408': 517, '8481303577': 518, '0486218309': 519, '0380790718': 520, '0684825457': 521, '0425140032': 522, '0553246755': 523, '0446322644': 524, '0449004422': 525, '3596215226': 526, '0812550544': 527, '0743403436': 528, '0449209148': 529, '091516695X': 530, '0517161109': 531, '0380978849': 532, '0380815257': 533, '042510107X': 534, '0812517725': 535, '0446400157': 536, '0451192575': 537, '9513508978': 538, '0380873877': 539, '0525946446': 540, '0440236800': 541, '0373250215': 542, '0380731150': 543, '0385311109': 544, '0312979541': 545, '0451521285': 546, '1562948962': 547, '0679781587': 548, '8447333264': 549, '0684853035': 550, '8878245798': 551, '0394564324': 552, '3434540466': 553, '0393315819': 554, '0373790694': 555, '0679746048': 556, '843391443X': 557, '0590222333': 558, '067172262X': 559, '3257233701': 560, '400323071X': 561, '0451208765': 562, '0590620096': 563, '0449219461': 564, '0345390458': 565, '0969518757': 566, '0849935040': 567, '8495501651': 568, '0373764863': 569, '8445073826': 570, '0671683780': 571, '2080674889': 572, '0590353403': 573, '0877013489': 574, '0788789821': 575, '0441001971': 576, '0425178366': 577, '0316666343': 578, '0886779227': 579, '0743486226': 580, '0312955510': 581, '0060195444': 582, '9728598130': 583, '0312305060': 584, '0684802082': 585, '0393312917': 586, '074320607X': 587, '0515104175': 588, '1863863265': 589, '0425189414': 590, '0156439611': 591, '8850202105': 592, '1576737330': 593, '0385491816': 594, '0553213806': 595, '0743428188': 596, '006019538X': 597, '0688039898': 598, '0399136703': 599, '0836217691': 600, '0875093663': 601, '8449503825': 602, '0451526554': 603, '8483061066': 604, '0553274503': 605, '0060198346': 606, '0340370238': 607, '0373079613': 608, '0345361792': 609, '2253054747': 610, '2038700141': 611, '0345384466': 612, 'B00006H3BO': 613, '0345455711': 614, '0842377506': 615, '3458329072': 616, '0446606812': 617, '0836230809': 618, '0029256208': 619, '0684812274': 620, '0721451063': 621, '0140253602': 622, '0415106001': 623, '0292776292': 624, '0399144706': 625, '2020525747': 626, '0505524473': 627, '0316639982': 628, '0679601597': 629, '0752837680': 630, '0394756983': 631, '0440218098': 632, '0425154092': 633, '0887307876': 634, '0425178102': 635, '3462015753': 636, '0373709846': 637, '0553801341': 638, '0586072586': 639, '0689716605': 640, '8432039756': 641, '0451450876': 642, '009927583X': 643, '0821772252': 644, '0345347951': 645, '1564761584': 646, '0449221229': 647, '8477022631': 648, '0449219364': 649, '0966339762': 650, '0245547215': 651, '0883684152': 652, '1558744150': 653, '3499151499': 654, '0515127213': 655, '0140105662': 656, '3596118042': 657, '0886778441': 658, '0399145087': 659, '0452284449': 660, '0375758267': 661, '0811812618': 662, '0679723161': 663, '0441009832': 664, '037319045X': 665, '0770428940': 666, '0156028778': 667, '0865470545': 668, '0553251023': 669, '0671769421': 670, '0440178002': 671, '0553278029': 672, '0345378261': 673, '0786888067': 674, '0375504141': 675, '0380720175': 676, '0394507630': 677, '0142000396': 678, '0140430148': 679, '0345311922': 680, '1863597735': 681, '0373259883': 682, '0451452615': 683, '0553571818': 684, '3442454255': 685, '0886774616': 686, '351836605X': 687, '3492227694': 688, '0140303812': 689, '034543479X': 690, '0099218216': 691, '0425177173': 692, '084392389X': 693, '0394800893': 694, '0385312520': 695, '0786901462': 696, '3453009967': 697, '0192827588': 698, '0446363251': 699, '0812516478': 700, '0671010964': 701, '0684809311': 702, '0440122090': 703, '0823030148': 704, '0137450001': 705, '0671745069': 706, '0375706410': 707, '0671689762': 708, '0451408179': 709, '0515113816': 710, '0471133264': 711, '0440224780': 712, '036108000X': 713, '0679744479': 714, '0345459202': 715, '0515076279': 716, '0060187468': 717, '091847728X': 718, '0425167283': 719, '1575660504': 720, '0671746081': 721, '0553277936': 722, '0451411277': 723, '0722150849': 724, '0441132456': 725, '0394828186': 726, '0060531231': 727, '0671605364': 728, '0375703438': 729, '0399138226': 730, '0590433474': 731, '0440472016': 732, '0553379658': 733, '0821733877': 734, '0140186409': 735, '0689824351': 736, '0948661593': 737, '0553280570': 738, '0786703857': 739, '9512052873': 740, '3596148464': 741, '0882404822': 742, '044651912X': 743, '067101191X': 744, '0345378490': 745, 'B00009EF82': 746, '0671886665': 747, '0440221471': 748, '1551660148': 749, '0425167313': 750, '0352310901': 751, '0399134506': 752, '0316153982': 753, '0345350685': 754, '0440402913': 755, '0590477331': 756, '0380804697': 757, '0395647266': 758, '0385302304': 759, '0385258577': 760, '0689844077': 761, '0805007202': 762, '1400041732': 763, '0446610968': 764, '0373108656': 765, '0385504470': 766, '0821729861': 767, '0515132020': 768, '0821772872': 769, '0060092661': 770, '0515122491': 771, '3404147472': 772, '0380714418': 773, '0505523892': 774, '0609803700': 775, '059035342X': 776, '0393321983': 777, '0060971444': 778, '0395453909': 779, '0525943048': 780, '0449005615': 781, '2253059536': 782, '0486272818': 783, '0671875914': 784, '0676971954': 785, '0262220547': 786, '3492223818': 787, '0002713713': 788, '0385424728': 789, '0425105334': 790, '0515120006': 791, '0449003787': 792, '0330270001': 793, '0440907020': 794, '3423361808': 795, '0060508663': 796, '0345423097': 797, '0679642323': 798, '0446387207': 799, '1903402042': 800, '0515129941': 801, '0373790945': 802, '0836220854': 803, '0771592558': 804, '0312252250': 805, '0060168013': 806, '0671645412': 807, '0553278649': 808, '0140430059': 809, '289430.025.5': 810, '1565073541': 811, '1840186348': 812, '0618246940': 813, '0446364193': 814, '0380732688': 815, '0425181979': 816, '3803225108': 817, '0751305162': 818, '0380733390': 819, '0451207874': 820, '0312063776': 821, '0896227170': 822, '0393051250': 823, '0099739518': 824, '0892966610': 825, '1560760605': 826, '0373250142': 827, '0440208416': 828, '0060009225': 829, '0394742745': 830, '0671004549': 831, '0836218353': 832, '044651747X': 833, '0345427637': 834, '0871782294': 835, '0671041460': 836, '0451195922': 837, '0749319291': 838, '0553271466': 839, '0425137872': 840, '1573229326': 841, '038072118X': 842, '0836232615': 843, '0446606324': 844, '0345404319': 845, '0330318403': 846, '0064472876': 847, '0440407591': 848, '0440236053': 849, '9029528893': 850, '0786864133': 851, '0140328696': 852, '0553295780': 853, '0425188221': 854, '0425077837': 855, '0749395990': 856, '089471273X': 857, '0333375726': 858, '0743222245': 859, '3746616360': 860, '0671741187': 861, '1591160766': 862, '037312001X': 863, '1932080139': 864, '0521357306': 865, '0553029746': 866, '0758201346': 867, '0709702884': 868, '0452282152': 869, '0553291955': 870, '0805062734': 871, '078686351X': 872, '0425166929': 873, '8476344317': 874, '22773004602': 875, '0380007789': 876, '0446602736': 877, '0446670561': 878, '0385503822': 879, '051513628X': 880, '043965548X': 881, '0399141464': 882, '0812544404': 883, '0415909910': 884, '1563260220': 885, '0439147735': 886, '8476695543': 887, '0375707972': 888, '0553813285': 889, '080411109X': 890, '1234560302010': 891, '0345443683': 892, '0749309784': 893, '0425175405': 894, '037376474X': 895, '0440220742': 896, '0373074638': 897, '0142001740': 898, '0679454748': 899, '0345314980': 900, '0060290994': 901, '0877730431': 902, '0671777351': 903, '0688129625': 904, '0140441093': 905, '0373250657': 906, '0836220676': 907, '067102308X': 908, '0743417909': 909, '0671695126': 910, '0670032891': 911, '0743427742': 912, '0451203070': 913, '0679450432': 914, '9021494019': 915, '0373484429': 916, '849624699X': 917, '0553153153': 918, '0671501070': 919, '0440484332': 920, '0061099015': 921, '0380727609': 922, '0441000916': 923, '0060801921': 924, '0531300633': 925, '0316693006': 926, '0061093327': 927, '0312291639': 928, '1558744525': 929, '0452282829': 930, '1555610900': 931, '0425133249': 932, '0449006530': 933, '067152609X': 934, '0515134120': 935, '0671016652': 936, '1840235128': 937, '0345387023': 938, '671774859': 939, '0140119809': 940, '0440209633': 941, '0452280621': 942, '0151002630': 943, '0385334036': 944, '0671792806': 945, '0060520507': 946, '0802762743': 947, '0452283914': 948, '0440998050': 949, '0380012863': 950, '1569319014': 951, '354832021X': 952, '0764224301': 953, '0373706987': 954, '0375703055': 955, '0451209273': 956, '067101417X': 957, '0441068642': 958, '0310227542': 959, '0671661035': 960, '055357230X': 961, '0451450124': 962, '0070444226': 963, '0679748172': 964, '9727722458': 965, '0373288808': 966, '1893183025': 967, '0440213282': 968, '0671004530': 969, '1556700318': 970, '1864470119': 971, '006008460X': 972, '0060809337': 973, '0340429739': 974, '0345331605': 975, '1886444013': 976, '0870529161': 977, '0671648772': 978, '0451150937': 979, '0312859880': 980, '0061043915': 981, '0843947632': 982, '1857029402': 983, '0425129586': 984, '3407782438': 985, '044819094X': 986, '0345298616': 987, '0140321276': 988, '0425154882': 989, '0531157490': 990, '3505095834': 991, '0380525550': 992, '0552134619': 993, '0064462080': 994, '0670892742': 995, '0671001302': 996, '0451459067': 997, '0373227892': 998, '0425187403': 999, '0842375066': 1000, '0395560012': 1001, '0373111029': 1002, '0785307907': 1003, '0552546933': 1004, '8817153567': 1005, '0140071768': 1006, '0449204138': 1007, '0449205878': 1008, '0060274069': 1009, '0671670409': 1010, '0446525774': 1011, '157673045X': 1012, '2070373703': 1013, '0812519671': 1014, '4234758691': 1015, '0394755588': 1016, '0316735027': 1017, '0451409159': 1018, '0061090301': 1019, '0312265859': 1020, '0373259549': 1021, '0375703764': 1022, '1560728914': 1023, '0821768417': 1024, '3548601863': 1025, '0312308639': 1026, '0789401746': 1027, '0140431268': 1028, '1841721522': 1029, '0966077814': 1030, '0380792494': 1031, '0831711868': 1032, '0439139597': 1033, '0688121195': 1034, '0590424394': 1035, '0373243286': 1036, '0141181230': 1037, '0553270060': 1038, '0064405710': 1039, '0385307888': 1040, '0449003701': 1041, '0393029980': 1042, '0385508042': 1043, '0060925787': 1044, '0060975547': 1045, '0373072449': 1046, '0671746065': 1047, '0140170480': 1048, '0553260804': 1049, '0972172335': 1050, '3471775609': 1051, '0440224101': 1052, '0515115630': 1053, '0671663143': 1054, '0590411365': 1055, '0385335555': 1056, '0842335684': 1057, '0515125628': 1058, '0553581295': 1059, '0345424050': 1060, '055325278X': 1061, '2277302112': 1062, '0891073906': 1063, '0396068278': 1064, '0060739444': 1065, '5602227300809': 1066, '0553267027': 1067, '0451135199': 1068, '0743225805': 1069, '0553299441': 1070, '0886777844': 1071, '0688165141': 1072, '0373166788': 1073, '0394859561': 1074, '0671007912': 1075, '0767918908': 1076, '0671797050': 1077, '0394223802': 1078, '0915811332': 1079, '0446357383': 1080, '0345392825': 1081, '8472230082': 1082, '0689825943': 1083, '0375504397': 1084, '0749316837': 1085, '0590720252': 1086, '0553279912': 1087, '0433396199': 1088, '055321246x': 1089, '0919591957': 1090, '0880704705': 1091, '0805012478': 1092, '0316861014': 1093, '0440224047': 1094, '0425182908': 1095, '0671027069': 1096, '9022304795': 1097, '0140263357': 1098, '0671028545': 1099, '0375727132': 1100, '0515118362': 1101, '0515118249': 1102, '0425191184': 1103, '1562054147': 1104, '0800611144': 1105, '0446823198': 1106, '0449003582': 1107, '0618065695': 1108, '0515090166': 1109, '2070392619': 1110, '0446679364': 1111, '0486218260': 1112, '0316815837': 1113, '0953589501': 1114, '0802138616': 1115, '0749306351': 1116, '0679410341': 1117, '1400034779': 1118, '0743480694': 1119, '0505524651': 1120, '0425147584': 1121, '0156004801': 1122, '0451203895': 1123, '1561440302': 1124, '0006137121': 1125, '0140112456': 1126, '081120118X': 1127, '0393034054': 1128, '0804108447': 1129, '0060916087': 1130, '0385141602': 1131, '0312983301': 1132, '0345391802': 1133, '0671011375': 1134, '0671880187': 1135, '0452264715': 1136, '3442725607': 1137, '082172987X': 1138, '8423310124': 1139, '0425180085': 1140, '0440224705': 1141, '0842329277': 1142, '0553258915': 1143, '0425182886': 1144, '0552771104': 1145, '158574185X': 1146, '0060171316': 1147, '0380818655': 1148, '1579547451': 1149, '0671670913': 1150, '0394890507': 1151, '0440162688': 1152, '006020883X': 1153, '0552996289': 1154, '0373708130': 1155, '1400032806': 1156, '0140441573': 1157, '0224018698': 1158, '1590520386': 1159, '0374129983': 1160, '0749397365': 1161, '0345441036': 1162, '067102437X': 1163, '042518286X': 1164, '0060192488': 1165, '0440213525': 1166, '0060509066': 1167, '0812921933': 1168, '0517883384': 1169, '0140187405': 1170, '1551668084': 1171, '0731800540': 1172, '0425098842': 1173, '0345423135': 1174, '0553580930': 1175, '0385242972': 1176, '0207189331': 1177, '0316107298': 1178, '043935806X': 1179, '0399149155': 1180, '0373115938': 1181, '0373098006': 1182, '0679419829': 1183, '0345348036': 1184, '0880389052': 1185, '0345433092': 1186, '037570485X': 1187, '0140280677': 1188, '0060525193': 1189, '0375707492': 1190, '0590448315': 1191, '0440234743': 1192, '0451197534': 1193, '0553250531': 1194, '8882271250': 1195, '006621470X': 1196, '0099282194': 1197, '0375714472': 1198, '0446601640': 1199, '0749733667': 1200, '0553294032': 1201, '0440224861': 1202, '0140293469': 1203, '0345339509': 1204, '0312985207': 1205, '0816708010': 1206, '0733534155': 1207, '0380720191': 1208, '0060153083': 1209, '067180720X': 1210, '0373825013': 1211, '0316142573': 1212, '0425181995': 1213, '0373168705': 1214, '051513175X': 1215, '0312979487': 1216, '0385418868': 1217, '0553576194': 1218, '0786707496': 1219, '0061057363': 1220, '9580600031': 1221, '0451408845': 1222, '0886775035': 1223, '0816720215': 1224, '0373290195': 1225, '0553577719': 1226, '0805029222': 1227, '0385484054': 1228, '0553584898': 1229, '3499100355': 1230, '0345298349': 1231, '0140041079': 1232, '0801061458': 1233, '1567314163': 1234, '0440131855': 1235, '0733517633': 1236, '0140481389': 1237, '044040665X': 1238, '0380717018': 1239, '0385313136': 1240, '1582341222': 1241, '0553562614': 1242, '0140865543': 1243, '1592798780': 1244, '0399146857': 1245, '185326041X': 1246, '0345343581': 1247, '0767916069': 1248, '3442447038': 1249, '0688066143': 1250, '0440995779': 1251, '0553296108': 1252, '0713638672': 1253, '0698118243': 1254, '0446607657': 1255, '0374292035': 1256, '0679455116': 1257, '0671000314': 1258, '0425081818': 1259, '1551666138': 1260, '0821741179': 1261, '3822814962': 1262, '0684822911': 1263, '0006545084': 1264, '0552142379': 1265, '0060977035': 1266, '0671039350': 1267, '0671527215': 1268, '0752843338': 1269, '0312968973': 1270, '8420427845': 1271, '0345408810': 1272, '0671684264': 1273, '0786889845': 1274, '067697175X': 1275, '0806961198': 1276, '0345333578': 1277, '0842384065': 1278, '0671543296': 1279, '0671705091': 1280, '0373123086': 1281, '0806625732': 1282, '0385297661': 1283, '0671578189': 1284, '0373762585': 1285, '0553802976': 1286, '0007144415': 1287, '055356174X': 1288, '034525855X': 1289, '055214276X': 1290, '0864923716': 1291, '0373226519': 1292, '0747563020': 1293, '0142800821': 1294, '0345371135': 1295, '0380726246': 1296, '0552997862': 1297, '0449907481': 1298, '0446675776': 1299, '3404149424': 1300, '0440784743': 1301, '006103004X': 1302, '0553578278': 1303, '0684829460': 1304, '0425173593': 1305, '0070485461': 1306, '1558176543': 1307, '2226035397': 1308, '0884416070': 1309, '0439409381': 1310, '0451192974': 1311, '0425136981': 1312, '044011408X': 1313, '0345404777': 1314, '0747542945': 1315, '1400041341': 1316, '0453008046': 1317, '8428901597': 1318, '141401354X': 1319, '0140113428': 1320, '0140293248': 1321, '1860541372': 1322, '0375505261': 1323, '0375507086': 1324, '0688166407': 1325, '0060937904': 1326, '0385335830': 1327, '0446677671': 1328, '042513525X': 1329, '0192823795': 1330, '1400031362': 1331, '0449704165': 1332, '3442452457': 1333, '0553089218': 1334, '0061098256': 1335, '0671867091': 1336, '0316601950': 1337, '1893964027': 1338, '0671319485': 1339, '0684868768': 1340, '0425153789': 1341, '0871138018': 1342, '0345314573': 1343, '0553287303': 1344, '0060179562': 1345, '0425161242': 1346, '1892051001': 1347, '0946238170': 1348, '8420633291': 1349, '0006531768': 1350, '0380732289': 1351, '0140433627': 1352, '0312980159': 1353, '0671854909': 1354, '0061092886': 1355, '0874495768': 1356, '070434100X': 1357, '0671698079': 1358, '0060502258': 1359, '0446602086': 1360, '0590437194': 1361, '0891076182': 1362, '0345389417': 1363, '0446519960': 1364, '0670260770': 1365, '2070384233': 1366, '0452274540': 1367, '9728423179': 1368, '0553574957': 1369, '028606639': 1370, '0553382225': 1371, '8845906876': 1372, '0906969778': 1373, '1555919669': 1374, '0345442822': 1375, '0553211951': 1376, '1575665727': 1377, '0312979886': 1378, '0330489461': 1379, '0345384911': 1380, '3453115937': 1381, '0316517305': 1382, '0385491832': 1383, '0155034731': 1384, '0064471837': 1385, '0679735259': 1386, '0743249925': 1387, '0151007829': 1388, '0345409264': 1389, '078671106X': 1390, '0062509594': 1391, '0380710218': 1392, '1853260789': 1393, '0345422511': 1394, '0743400755': 1395, '0440224853': 1396, '0064473627': 1397, '0316769487': 1398, '0373272960': 1399, '015668568X': 1400, '0553265741': 1401, '0060012331': 1402, '0440130913': 1403, '1577312112': 1404, '0553281933': 1405, '0373243790': 1406, '3451049023': 1407, '0316779237': 1408, '2070416801': 1409, '0451403789': 1410, '0684841347': 1411, '0061020060': 1412, '3936544166': 1413, '0446608955': 1414, '0425132951': 1415, '0061051578': 1416, '0449213447': 1417, '0156814161': 1418, '0590460560': 1419, '0753804700': 1420, '0425184226': 1421, '0385259417': 1422, '0140449159': 1423, '0446670324': 1424, '0812555104': 1425, '0345434110': 1426, '0440200563': 1427, '0394734157': 1428, '0385493800': 1429, '0345333810': 1430, '067176991X': 1431, '8472918777': 1432, '0553260960': 1433, '033026902X': 1434, '0399501487': 1435, '0771576439': 1436, '1559210354': 1437, '0446675903': 1438, '0805067523': 1439, '0771086636': 1440, '0786702729': 1441, '039914563X': 1442, '0671665987': 1443, '0345417623': 1444, '0425148270': 1445, '084395048X': 1446, '3885207001': 1447, '0373151861': 1448, '0061031143': 1449, '8807811936': 1450, '0812545206': 1451, '0028604199': 1452, '0373287690': 1453, '0425133540': 1454, '3404129210': 1455, '076790351X': 1456, '0373262221': 1457, '0451202503': 1458, '8483107945': 1459, '0446390380': 1460, '8501012076': 1461, '3404242106': 1462, '000647618X': 1463, '0718105141': 1464, '0804106304': 1465, '0316096199': 1466, '1552781291': 1467, '082171824X': 1468, '1582880751': 1469, '0373440936': 1470, '1840460962': 1471, '9721028800': 1472, '0671319760': 1473, '0440496039': 1474, '8877829060': 1475, '0345295250': 1476, '0486296466': 1477, '0151001006': 1478, '0553582135': 1479, '0553571702': 1480, '0060934417': 1481, '0140342621': 1482, '0747246262': 1483, '0811202070': 1484, '0440176190': 1485, '0395283493': 1486, '0373791062': 1487, '0505521814': 1488, '3451040220': 1489, '0394414683': 1490, '0345465083': 1491, '0517532530': 1492, '0060930535': 1493, '0451453328': 1494, '0553284118': 1495, '0385265700': 1496, '0805056491': 1497, '0571169341': 1498, '0701169303': 1499, '0966286030': 1500, '0805055908': 1501, '3822812862': 1502, '0446604100': 1503, '0764108484': 1504, '0451202279': 1505, '0451177010': 1506, '0140008535': 1507, '0156711427': 1508, '0451153634': 1509, '0515105643': 1510, '0061013927': 1511, '3608938052': 1512, '0061020613': 1513, '0849952484': 1514, '0425183971': 1515, '0385315309': 1516, '0425179648': 1517, '0553258362': 1518, '193148452X': 1519, '0879978503': 1520, '0345453409': 1521, '0060198125': 1522, '0140467270': 1523, '1858638852': 1524, '0671891510': 1525, '0862033616': 1526, '0553208845': 1527, '1931514984': 1528, '0399145702': 1529, '1557831785': 1530, '0140053204': 1531, '0064432270': 1532, '0706405390': 1533, '0804108528': 1534, '0345342968': 1535, '0747257620': 1536, '0140304452': 1537, '0439411874': 1538, '0425176312': 1539, '0671774670': 1540, '0316969443': 1541, '0451190572': 1542, '0452266777': 1543, '0819219126': 1544, '0312305311': 1545, '0451407539': 1546, '0446514063': 1547, '184149013X': 1548, '0345359941': 1549, '0786705418': 1550, '1573227749': 1551, '1573225126': 1552, '0345423402': 1553, '8432046361': 1554, '887782512X': 1555, '0671724819': 1556, '1860498833': 1557, '0440072484': 1558, '0330315838': 1559, '0451162331': 1560, '0446611808': 1561, '0446609323': 1562, '0786814934': 1563, '0064407683': 1564, '0671542133': 1565, '0891348417': 1566, '051513287X': 1567, '2.01.016221.8': 1568, '1897580428': 1569, '3.406420974': 1570, '0515132268': 1571, '2264006919': 1572, '0140269630': 1573, '0804114439': 1574, '0345433297': 1575, '0140282033': 1576, '082232220X': 1577, '074347032X': 1578, '2070407985': 1579, '0451205421': 1580, '0552138339': 1581, '0373107692': 1582, '3499261766': 1583, '082177221X': 1584, '0345347676': 1585, '0373263937': 1586, '0232519870': 1587, '0425148297': 1588, '0070227780': 1589, '0671776134': 1590, '0771086547': 1591, '074341232X': 1592, '1558612211': 1593, '0060931418': 1594, '0425163210': 1595, '0609809512': 1596, '1573225797': 1597, '8401466083': 1598, '0440241057': 1599, '0373030967': 1600, '0446520802': 1601, '1857027604': 1602, '0505522888': 1603, '0740743708': 1604, '0375728090': 1605, '1842230441': 1606, '0553112309': 1607, '037570177X': 1608, '0373833369': 1609, '0552770876': 1610, '0385313128': 1611, '0486406598': 1612, '0380732661': 1613, '0060187263': 1614, '0312179405': 1615, '0878577254': 1616, '3570006360': 1617, '3596215080': 1618, '0740719890': 1619, '0393314324': 1620, '9770390107900': 1621, '015694877X': 1622, '067188784X': 1623, '0553578359': 1624, '042514755X': 1625, '0679776338': 1626, '0451206002': 1627, '1887432981': 1628, '0886778581': 1629, '0345314255': 1630, '9724609995': 1631, '0380731231': 1632, '0486284999': 1633, '0316602906': 1634, '0345388593': 1635, '067180281X': 1636, '0792413180': 1637, '0395835852': 1638, '0425135020': 1639, '0517082373': 1640, '8807812576': 1641, '0374270325': 1642, '2877142248': 1643, '1588468178': 1644, '0486275574': 1645, '0671881612': 1646, '0440173701': 1647, '0517667746': 1648, '3442233070': 1649, '0425142485': 1650, '0671582704': 1651, '0446605360': 1652, '037322706X': 1653, '0743203399': 1654, '0345383818': 1655, '0262540428': 1656, '0373288972': 1657, '0380799383': 1658, '0380819635': 1659, '0375756981': 1660, '0062517856': 1661, '052594530X': 1662, '0373707142': 1663, '0747253102': 1664, '0679419462': 1665, '1576730824': 1666, '0373835868': 1667, '0712636102': 1668, '0743237188': 1669, '0375406530': 1670, '0345453395': 1671, '0671026305': 1672, '0523416083': 1673, '0747508755': 1674, '0345453549': 1675, '038079635X': 1676, '0671003593': 1677, '0451524667': 1678, '0553582127': 1679, '0684833492': 1680, '0373218397': 1681, '0894710737': 1682, '0312695276': 1683, '0452284287': 1684, '0671035630': 1685, '0743417682': 1686, '0312981457': 1687, '0805462716': 1688, '0553247239': 1689, '0553580078': 1690, '0140264795': 1691, '0312981260': 1692, '044661095X': 1693, '0671516922': 1694, '000651202X': 1695, '076615009998': 1696, '0440221099': 1697, '0802116094': 1698, '1558584536': 1699, '0786880953': 1700, '1585422762': 1701, '1551669315': 1702, '0671732277': 1703, '0684872153': 1704, '0345386108': 1705, '0517525380': 1706, '1885211066': 1707, '0330482165': 1708, '0330337394': 1709, '0314852999': 1710, '0140017917': 1711, '0765349671': 1712, '0307082806': 1713, '0446611778': 1714, '350251156X': 1715, '0394585852': 1716, '0380008130': 1717, '0140279806': 1718, '0312864590': 1719, '0553573136': 1720, '0312274920': 1721, '9516430929': 1722, '0671922548': 1723, '0440180201': 1724, '3404131606': 1725, '0316779075': 1726, '0399143165': 1727, '3492229700': 1728, '067944999X': 1729, '0441775594': 1730, '0843953098': 1731, '9724408957': 1732, '0590320068': 1733, '2038714509': 1734, '0879735775': 1735, '0525464417': 1736, '0895773953': 1737, '0679767398': 1738, '3596224284': 1739, '0688052851': 1740, '051764181X': 1741, '0894800159': 1742, '0812565959': 1743, '0886465346': 1744, '068984588X': 1745, '042517400X': 1746, '0440181259': 1747, '0449208281': 1748, '0375420975': 1749, '0140307044': 1750, '1551668696': 1751, '9722319345': 1752, '0312181728': 1753, '0451188039': 1754, '1560730013': 1755, '0451404416': 1756, '0671028448': 1757, '0823003345': 1758, '0380599236': 1759, '0671880314': 1760, '0060008032': 1761, '0441010091': 1762, '0448095297': 1763, '0451183681': 1764, '0380008378': 1765, '0671461494': 1766, '8484502864': 1767, '0061059730': 1768, '0099154102': 1769, '3518366467': 1770, '0441023800': 1771, '0345446860': 1772, '081181503X': 1773, '0821769839': 1774, '0765344963': 1775, '039923621X': 1776, '1570062145': 1777, '0373105533': 1778, '8830419788': 1779, '0312317751': 1780, '0312877706': 1781, '0553579274': 1782, '0933585071': 1783, '0684844753': 1784, '0345435168': 1785, '0812531353': 1786, '0679879242': 1787, '0312267177': 1788, '0553250426': 1789, '0778320375': 1790, '0871592614': 1791, '006095101X': 1792, '0789473631': 1793, '0515133302': 1794, '0044409281': 1795, '0671004565': 1796, '0913668273': 1797, '0312187459': 1798, '0312865783': 1799, '0752848062': 1800, '0395606497': 1801, '0340750626': 1802, '0373763387': 1803, '0449217264': 1804, '0515121843': 1805, '0070064520': 1806, '042516098X': 1807, '1566192943': 1808, '0061031070': 1809, '038070899X': 1810, '0446613266': 1811, '0370317300': 1812, '0679756760': 1813, '0192816209': 1814, '0345381017': 1815, '0395291305': 1816, '0515095826': 1817, '0141306971': 1818, '0373765304': 1819, '0316641723': 1820, '0375422072': 1821, '0201050714': 1822, '1558212574': 1823, '0525938265': 1824, '0842321942': 1825, '0446612545': 1826, '0373230176': 1827, '1853260452': 1828, '0380721643': 1829, '0140328238': 1830, '3404615247': 1831, '0553293281': 1832, '0385484518': 1833, '0380613255': 1834, '0156011603': 1835, '0451177096': 1836, '2070518426': 1837, '0451205685': 1838, '0743436210': 1839, '0425174271': 1840, '0345458303': 1841, '0312859279': 1842, '0441715923': 1843, '0345330315': 1844, '0099283360': 1845, '0316606081': 1846, '014230218X': 1847, '0805073205': 1848, '0373763980': 1849, '0590415069': 1850, '0553267663': 1851, '0688083390': 1852, '8401341558': 1853, '0553580191': 1854, '0006479898': 1855, '0380730375': 1856, '0671882678': 1857, '0061091316': 1858, '0515085154': 1859, '0671868365': 1860, '0515040460': 1861, '8434816903': 1862, '0373096216': 1863, '0062500260': 1864, '0747254001': 1865, '0312980140': 1866, '0737303875': 1867, '039486056X': 1868, '0671877437': 1869, '0060509570': 1870, '0590332104': 1871, '0451131398': 1872, '0373218036': 1873, '0520223047': 1874, '0399151273': 1875, '1568381891': 1876, '01420.01740': 1877, '0671002481': 1878, '0590350072': 1879, '0449236552': 1880, '0552135615': 1881, '0590996835': 1882, '0743400518': 1883, '0061091561': 1884, '0684837455': 1885, '0553569791': 1886, '0451156609': 1887, '0767915054': 1888, '0385720920': 1889, '0671439162': 1890, '0811819167': 1891, '0316289590': 1892, '0440502675': 1893, '0061015725': 1894, '0840790783': 1895, '0373484879': 1896, '0451208811': 1897, '352217092X': 1898, '0805042474': 1899, '3442161177': 1900, '0553230212': 1901, '1400031354': 1902, '0345404114': 1903, '006092859X': 1904, '0425071804': 1905, '184115458X': 1906, '0889711844': 1907, '0451170911': 1908, '0449002071': 1909, '081297106X': 1910, '0312169655': 1911, '0812571576': 1912, '1562828444': 1913, '0140348263': 1914, '0671738623': 1915, '0843949899': 1916, '3442442516': 1917, '0816745404': 1918, '0563551356': 1919, '9725645553': 1920, '902452346': 1921, '0930031741': 1922, '8401530423': 1923, '0684827107': 1924, '0441004768': 1925, '0373245459': 1926, '0671027123': 1927, '0866119574': 1928, '0312860552': 1929, '0446607193': 1930, '0965834581': 1931, '0553573837': 1932, '0064471101': 1933, '0441094147': 1934, '0767903579': 1935, '0743403819': 1936, '0553272535': 1937, '0446530891': 1938, '0440498058': 1939, '0440240751': 1940, '0671784161': 1941, '006093221X': 1942, '0671024035': 1943, '0553582526': 1944, '0380722607': 1945, '0842386882': 1946, '0440240875': 1947, '0453008739': 1948, '0425126064': 1949, '8870428915': 1950, '0590458949': 1951, '0140179496': 1952, '0345370775': 1953, '0451201736': 1954, '0060971177': 1955, '006447027X': 1956, '0395551137': 1957, '0373835825': 1958, '0373121458': 1959, '0140181881': 1960, '0912365307': 1961, '158542093X': 1962, '038097536X': 1963, '0060004746': 1964, '0440219035': 1965, '0440219078': 1966, '0753403919': 1967, '3453033825': 1968, '0425178765': 1969, '0140431209': 1970, '0821715704': 1971, '0575073055': 1972, '0380793660': 1973, '0590430149': 1974, '0671612689': 1975, '0340770449': 1976, '0385720955': 1977, '0380722275': 1978, '0201489988': 1979, '0312246528': 1980, '8879834835': 1981, '0385499345': 1982, '0345436121': 1983, '187052800X': 1984, '0553246070': 1985, '0943641187': 1986, '0882669273': 1987, '0743407083': 1988, '0807083178': 1989, '0099245027': 1990, '0425158616': 1991, '0684857014': 1992, '0804111898': 1993, '0809020483': 1994, '0805019359': 1995, '055325555X': 1996, '0899199089': 1997, '0451151224': 1998, '0385335237': 1999, '0786004150': 2000, '0060970790': 2001, '0486282147': 2002, '0060184949': 2003, '0345335465': 2004, '9706078649': 2005, '0896380645': 2006, '0375407375': 2007, '0786880007': 2008, '0373292538': 2009, '0721705626': 2010, '8401240301': 2011, '1892284898': 2012, '015611870X': 2013, '0553578944': 2014, '0786882662': 2015, '0345433491': 2016, '0749397543': 2017, '0671620991': 2018, '0385475721': 2019, '0440400759': 2020, '9176434362': 2021, '0062513095': 2022, '0140449302': 2023, '0446603503': 2024, '0553265520': 2025, '0671896768': 2026, '0345339738': 2027, '0373484100': 2028, '0394925718': 2029, '0743467523': 2030, '0684856220': 2031, '059045854X': 2032, '0552137189': 2033, '0425057623': 2034, '044652087X': 2035, '0871352451': 2036, '0385605870': 2037, '0743219562': 2038, '0375506233': 2039, '8408046055': 2040, '0373244290': 2041, '0440207770': 2042, '0440931800': 2043, '0811831620': 2044, '1551052377': 2045, '0380792486': 2046, '0439136350': 2047, '1931561648': 2048, '0380723816': 2049, '0570427690': 2050, '0385324081': 2051, '0141314869': 2052, '078688939X': 2053, '0373077408': 2054, '0373036884': 2055, '0884051366': 2056, '0060578955': 2057, '0451188543': 2058, '038001002X': 2059, '0515118230': 2060, '074323748X': 2061, '0553212710': 2062, '0142000205': 2063, '0451078721': 2064, '0380556812': 2065, '0425188132': 2066, '0803279337': 2067, '1551668912': 2068, '087930703X': 2069, '044022103X': 2070, '0880707798': 2071, '0449218929': 2072, '1863861807': 2073, '0385510438': 2074, '156282144X': 2075, '037570406X': 2076, '1558174354': 2077, '0340770112': 2078, '0385722206': 2079, '0451179765': 2080, '088029261X': 2081, '0676972411': 2082, '0446606960': 2083, '8495094096': 2084, '0553250698': 2085, '0440204933': 2086, '3404920481': 2087, '155874262X': 2088, '1562470760': 2089, '0007128568': 2090, '0743422287': 2091, '0345452003': 2092, '0886776260': 2093, '0671510053': 2094, '2253010316': 2095, '0451521730': 2096, '2842057120': 2097, '17224918': 2098, '0451403916': 2099, '0552998036': 2100, '0886777038': 2101, '0743411838': 2102, '0452280826': 2103, '1575663147': 2104, '344230442': 2105, '0590568795': 2106, '0811808173': 2107, '0140291091': 2108, '0060976845': 2109, '0812534050': 2110, '0451117298': 2111, '1576750337': 2112, '1555834310': 2113, '006019250X': 2114, '0385313667': 2115, '0439288886': 2116, '0060392452': 2117, '0440236703': 2118, '0552146080': 2119, '037325900X': 2120, '0671676350': 2121, '0440222052': 2122, '0451158164': 2123, '0312983417': 2124, '0425109720': 2125, '0373055285': 2126, '0373112262': 2127, '0152337016': 2128, '0465081991': 2129, '0375401598': 2130, '3596233704': 2131, '0425168697': 2132, '055357227X': 2133, '0761537295': 2134, '0747550999': 2135, '0306811049': 2136, '0590980335': 2137, '0425166112': 2138, '0140714545': 2139, '0140051244': 2140, 'N0553212583>>': 2141, '3442455286': 2142, '0671028367': 2143, '0451168690': 2144, '0345388429': 2145, '0062518054': 2146, '1573227331': 2147, '0899193145': 2148, '2253140872': 2149, '0449200531': 2150, '0553581856': 2151, '0345461983': 2152, '1551667231': 2153, '0385490992': 2154, '0520087550': 2155, '0821763792': 2156, '0891095004': 2157, '0749301015': 2158, '1862041164': 2159, '0807009180': 2160, '1551669021': 2161, '0373710429': 2162, '0758202725': 2163, '0312104235': 2164, '0831759291': 2165, '087113375X': 2166, '3404150554': 2167, '0804105820': 2168, '0671047515': 2169, '0767902836': 2170, '059043652X': 2171, '0395549701': 2172, '1551667916': 2173, '0873375661': 2174, '0688162827': 2175, '0751506761': 2176, '0380017555': 2177, '0399139125': 2178, '0345339703': 2179, '1567181686': 2180, '0515136824': 2181, '0770104835': 2182, '8402042414': 2183, '0449218201': 2184, '0553293567': 2185, '1570428581': 2186, '0822507099': 2187, '0865730393': 2188, '0061000027': 2189, '0671229265': 2190, '0140174664': 2191, '0969276818': 2192, '0316782505': 2193, '0345402871': 2194, '0380007509': 2195, '0393978818': 2196, '0451166582': 2197, '0380792559': 2198, '0449227545': 2199, '0312965338': 2200, '0670910236': 2201, '0396090788': 2202, '0425192733': 2203, '0399147373': 2204, '9001549209': 2205, '3257061269': 2206, '0525944885': 2207, '0671458132': 2208, '0553269453': 2209, '0316666009': 2210, '0671701592': 2211, '0449148734': 2212, '0671721623': 2213, '0553381512': 2214, '051512608X': 2215, '0684857162': 2216, '3551015023': 2217, '0670894508': 2218, '0394402294': 2219, '0679429220': 2220, '1561790419': 2221, '0761105417': 2222, '0671041789': 2223, '0445045965': 2224, '0380803232': 2225, '1551667959': 2226, '6941571098': 2227, '0553572423': 2228, '0671577050': 2229, '0451453573': 2230, '082173346X': 2231, '0553351370': 2232, '0684865742': 2233, '0786000031': 2234, '1564771989': 2235, '0842335978': 2236, '0517585154': 2237, '0064400808': 2238, '0060176075': 2239, '0446531413': 2240, '0061094595': 2241, '0553299662': 2242, '0312952813': 2243, '0373245556': 2244, '051510566X': 2245, '0590254677': 2246, '0804111154': 2247, '0451192338': 2248, '042507160X': 2249, '0132422077': 2250, '2912042615': 2251, '2207234398': 2252, '0915658119': 2253, '0671796607': 2254, '1880985055': 2255, '0140074902': 2256, '0006392172PBK': 2257, '355203921X': 2258, '0399151451': 2259, '0439271525': 2260, '0385157045': 2261, '0425062856': 2262, '0913668680': 2263, '0446515485': 2264, '1740590120': 2265, '0064472531': 2266, '042516019X': 2267, '0380797658': 2268, '0440226430': 2269, '0312959249': 2270, '080411868X': 2271, '0533269631': 2272, '0743247752': 2273, '0062737384': 2274, '1558175938': 2275, '0451197410': 2276, '9029041900': 2277, '0373825064': 2278, '0061054151': 2279, '0312867689': 2280, '0451210557': 2281, '0380820536': 2282, '8422645513': 2283, '0345342399': 2284, '0152012397': 2285, '0908990715': 2286, '2070367592': 2287, '0380754843': 2288, '1556112726': 2289, '0590691783': 2290, '0449221032': 2291, '0743474325': 2292, '0446670332': 2293, '0380771543': 2294, '0373291493': 2295, '0760732639': 2296, '075530022X': 2297, '0140100180': 2298, '0446365114': 2299, '0552128481': 2300, '0425175111': 2301, '0917726650': 2302, '0446512958': 2303, '3453032780': 2304, '0440170796': 2305, '0316726583': 2306, '0451526767': 2307, '0872261670': 2308, '0671672878': 2309, '0307119734': 2310, '0670899879': 2311, '067976657X': 2312, '0440066565': 2313, '0373218753': 2314, '1565650255': 2315, '0375751564': 2316, '0060513543': 2317, '1854105876': 2318, '0312140991': 2319, '0373094671': 2320, '1580170900': 2321, '0590972103': 2322, '0330271474': 2323, '1880323869': 2324, '031208188X': 2325, '0816727953': 2326, '0425178064': 2327, '0881849456': 2328, '0399147535': 2329, '0785310304': 2330, '0812543432': 2331, '0553581279': 2332, '0373871597': 2333, '0452277205': 2334, '0395977711': 2335, '0415900026': 2336, '1889893544': 2337, '0806524103': 2338, '1585673293': 2339, '0375401601': 2340, '0898793912': 2341, '0349103232': 2342, '0140275290': 2343, '0373273436': 2344, '0373625243': 2345, '0802139736': 2346, '0345404769': 2347, '0743255429': 2348, '0553579835': 2349, '1567189660': 2350, '0679416730': 2351, '3257200552': 2352, '06718995466': 2353, '0821750895': 2354, '044661064X': 2355, '0425052427': 2356, '0679454470': 2357, '0688009816': 2358, '3426630966': 2359, '0373092326': 2360, '0441790348': 2361, '0743463862': 2362, '0399148515': 2363, '0440225701': 2364, '0486275426': 2365, '3548256007': 2366, '0684814021': 2367, '0684832178': 2368, '0671502522': 2369, '0006176909': 2370, '0679734457': 2371, '0440236983': 2372, '0312141378': 2373, '0312950950': 2374, '0783500122': 2375, '0451208501': 2376, '0064400034': 2377, '0345443284': 2378, '0812515560': 2379, '031213150X': 2380, '1400031346': 2381, '0312119240': 2382, '037582233X': 2383, '3442430070': 2384, '0440211891': 2385, '0806125713': 2386, '0373706367': 2387, '051512088X': 2388, '0771089589': 2389, '0060987561': 2390, '067943559X': 2391, '0449223345': 2392, '0345417976': 2393, '1401300014': 2394, '0140622446': 2395, '0671883410': 2396, '0006512135': 2397, '0394729854': 2398, '0099460351': 2399, '0380698919': 2400, '0440552966': 2401, '0061092029': 2402, '0517565188': 2403, '0307101142': 2404, '0440183669': 2405, '0515122734': 2406, '0590456466': 2407, '0330285939': 2408, '0743482980': 2409, '0812535065': 2410, '0345400674': 2411, '1400060737': 2412, '087905963X': 2413, '0671778633': 2414, '0812570936': 2415, '1841952753': 2416, '0752842994': 2417, '0345362632': 2418, '0449204553': 2419, '0671027743': 2420, '0060555513': 2421, '0380731185': 2422, '3822504998': 2423, '3442711797': 2424, '0553569570': 2425, '8440632185': 2426, '0373289936': 2427, '0671795554': 2428, '0689866682': 2429, '0345431189': 2430, '0679312420': 2431, '0739307444': 2432, '0586045368': 2433, '0140186476': 2434, '1565070003': 2435, '0380710404': 2436, '3100102045': 2437, '0684841258': 2438, '0747242895': 2439, '0312421273': 2440, '0415110874': 2441, '0449146030': 2442, '0449003981': 2443, '0440217563': 2444, '0758200757': 2445, '055344056X': 2446, '0399144463': 2447, '0425197123': 2448, '039452389X': 2449, '0451141083': 2450, '0060505885': 2451, '0871138328': 2452, '0486245462': 2453, '0060007192': 2454, '0915132761': 2455, '0689828896': 2456, '0345364279': 2457, '0061054720': 2458, '0679752455': 2459, '0553579606': 2460, '0887390390': 2461, '0940625261': 2462, '0448095238': 2463, '1561450022': 2464, '0140389660': 2465, '0316707414': 2466, '068484267X': 2467, '0671042513': 2468, '0099356309': 2469, '8420441708': 2470, '0380704498': 2471, '038548951X': 2472, '3423128801': 2473, '0373195192': 2474, '0380802937': 2475, '0375821813': 2476, '0812550285': 2477, '2290319937': 2478, '0684842319': 2479, '2020580411': 2480, '0380709902': 2481, '0671648136': 2482, '0679448594': 2483, '3426608049': 2484, '0345346491': 2485, '1551667304': 2486, '0449909662': 2487, '033031582X': 2488, '0517185040': 2489, '8422622769': 2490, '0670878073': 2491, '0517574977': 2492, '0860074382': 2493, '2070712001': 2494, '031224262X': 2495, '0859695603': 2496, '0446608815': 2497, '0060187905': 2498, '0373610645': 2499, '0440509157': 2500, '0679420231': 2501, '0449221873': 2502, '0312144075': 2503, '0440241073': 2504, '0141001844': 2505, '1881098184': 2506, '0689838646': 2507, '0006174671': 2508, '051511264X': 2509, '0671247484': 2510, '0743206029': 2511, '0671578073': 2512, '0375412530': 2513, '0553482491': 2514, '0684195984': 2515, '0446403229': 2516, '0425178900': 2517, '0312983271': 2518, '0553074938': 2519, '0380810468': 2520, '0140447210': 2521, '0028604458': 2522, '0307100197': 2523, '0307070034': 2524, '0312925883': 2525, '074992277X': 2526, '0373653131': 2527, '0670031909': 2528, '0679456376': 2529, '067179938X': 2530, '3423130202': 2531, '8466616845': 2532, '0192828851': 2533, '0312966210': 2534, '0425175367': 2535, '0670031453': 2536, '0312979770': 2537, '8431522550': 2538, '0505525151': 2539, '063113896X': 2540, '0515130966': 2541, '9721034525': 2542, '0140029524': 2543, '0671041622': 2544, '0553055224': 2545, '0140445560': 2546, '067945540X': 2547, '1853260495': 2548, '0782119670': 2549, '0679745238': 2550, '3770145909': 2551, '1860243215': 2552, '0380756293': 2553, '0061030651': 2554, '0836213122': 2555, '0312924313': 2556, '0451169557': 2557, '006109286X': 2558, '0553209191': 2559, '077104206X': 2560, '0307602230': 2561, '0882704605': 2562, '0684801469': 2563, '0878572708': 2564, '039914062X': 2565, '039912764X': 2566, '0330029665': 2567, '0553051628': 2568, '0345409272': 2569, '0345327454': 2570, '0515132136': 2571, '0915765438': 2572, '0061041300': 2573, '0373095821': 2574, '0671027522': 2575, '0553569074': 2576, '0380808080': 2577, '2070378144': 2578, '0061054801': 2579, '0553210793': 2580, '8804328088': 2581, '9727595375': 2582, '0671026372': 2583, '0515133876': 2584, '0812065905': 2585, '8804366419': 2586, '0060195703': 2587, '0373707932': 2588, '0061098388': 2589, '0671028383': 2590, '0525947302': 2591, '0671042580': 2592, '0874776945': 2593, '0060928336': 2594, '0525448667': 2595, '0380818973': 2596, '0746026994': 2597, '0312982194': 2598, '8470176986': 2599, '0816710503': 2600, '0451401859': 2601, '0140390243': 2602, '0679752684': 2603, '0972016430': 2604, '0553280341': 2605, '3502391750': 2606, '0804101787': 2607, '0451210891': 2608, '0316777730': 2609, '0156762404': 2610, '0140620869': 2611, '0553213067': 2612, '0066621054': 2613, '0812585151': 2614, '0448089033': 2615, '97245146089': 2616, '0312134665': 2617, '0140066640': 2618, '0446358592': 2619, '0449221431': 2620, '0330392611': 2621, '3442245702': 2622, '0026885522': 2623, '0446602191': 2624, '0395732565': 2625, '0756400163': 2626, '0373271174': 2627, '0312150601': 2628, '0393319296': 2629, '0316110078': 2630, '0821714422': 2631, '0553573403': 2632, '0747260583': 2633, '3451042231': 2634, '0712602682': 2635, '0452259436': 2636, '0553382179': 2637, '0140239820': 2638, '1575001438': 2639, '0763608858': 2640, '0771099894': 2641, '0804111359': 2642, '0733539467': 2643, '0609601245': 2644, '0446365661': 2645, '8408043641': 2646, '0821772341': 2647, '0375401156': 2648, '0894840053': 2649, '0765703009': 2650, '0552526495': 2651, '0373029586': 2652, '0312980167': 2653, '0399148027': 2654, '0440212812': 2655, '1561449822': 2656, '0553299204': 2657, '0446360856': 2658, '0670886955': 2659, '0345327411': 2660, '0449225151': 2661, '0440110653495': 2662, '3499128624': 2663, '0446601241': 2664, '067165831X': 2665, '0374461554': 2666, '0385486804': 2667, '039457513X': 2668, '0449911845': 2669, '0141311312': 2670, '0140035206': 2671, '0375724834': 2672, '0446604658': 2673, '0449123871': 2674, '0440235464': 2675, '0373162510': 2676, '1551665859': 2677, '1551667118': 2678, '0590926675': 2679, '1852490632': 2680, '0385152183': 2681, '1570420297': 2682, '3423202327': 2683, '1573229385': 2684, '0831796197': 2685, '0142000663': 2686, '0708837298': 2687, '0446358754': 2688, '1400061776': 2689, '8440657579': 2690, '1581950179': 2691, '0553057456': 2692, '0345434943': 2693, '038515903X': 2694, '0517571889': 2695, '0449223043': 2696, '8838913382': 2697, '0843953101': 2698, '0812509250': 2699, '8433012045': 2700, '1551669498': 2701, '9724610667': 2702, '0943151031': 2703, '0590455788': 2704, '0307220095': 2705, '0553284673': 2706, '0446676500': 2707, '0373872089': 2708, '0743444493': 2709, '1853043133': 2710, '0312932081': 2711, '0840339402': 2712, '450023923': 2713, '3776621125': 2714, '1551580004': 2715, '0821766767': 2716, '0895771039': 2717, '038550926X': 2718, '0312154771': 2719, '0345311396': 2720, '0312318685': 2721, '0140563628': 2722, '0967905281': 2723, '887684760X': 2724, '0440227372': 2725, '0876058411': 2726, '0553277537': 2727, '0722509049': 2728, '0066209463': 2729, '0373872437': 2730, '3499115832': 2731, '9722011685': 2732, '0340734701': 2733, '0385511612': 2734, '0843942991': 2735, '0716601745': 2736, '3453863593': 2737, '0156006006': 2738, '0521293898': 2739, '067168972X': 2740, '0552131059': 2741, '0874180392': 2742, '0373440898': 2743, '0140437673': 2744, '0395252237': 2745, '0446323144': 2746, '0330284835': 2747, '0757300006': 2748, '0553171151': 2749, '342310905X': 2750, '0552991309': 2751, '0679426620': 2752, '0394525280': 2753, '0446520888': 2754, '88044999095': 2755, '8495359103': 2756, '1565999916': 2757, '058604468X': 2758, '0373241186': 2759, '8433912739': 2760, '0373218400': 2761, '0877054924': 2762, '0440206154': 2763, '0451200187': 2764, '0451176723': 2765, '186450062x': 2766, '055358023X': 2767, '0446356050': 2768, '042516876X': 2769, '8470411098': 2770, '1551662795': 2771, '0312876629': 2772, '0812540336': 2773, '0747401268': 2774, '0140042601': 2775, '1857090152': 2776, '0312983867': 2777, '000714346X': 2778, '0399144714': 2779, '0060191821': 2780, '0812574923': 2781, '0345340957': 2782, '0525947299': 2783, '3720516652': 2784, '0452266637': 2785, '8878246522': 2786, '0060959436': 2787, '0441005837': 2788, '0821776398': 2789, '0671502689': 2790, '0671698338': 2791, '3404142942': 2792, '0712623884': 2793, '8879830597': 2794, '0810907364': 2795, '0440211263': 2796, '1556610351': 2797, '0553278827': 2798, '0553282808': 2799, '0451197038': 2800, '0440234727': 2801, '44900466075': 2802, '0771087373': 2803, '0373168543': 2804, '0373288026': 2805, '0552996009': 2806, '0450571130': 2807, '0451160444': 2808, '8877820535': 2809, '0812550862': 2810, '0006473024': 2811, '0671568175': 2812, '039457656X': 2813, '0099485419': 2814, '081257639X': 2815, '2070407527': 2816, '0449147517': 2817, '0399150838': 2818, '0671529412': 2819, '0142002623': 2820, '0764120581': 2821, '0330375253': 2822, '140003065X': 2823, '1585421758': 2824, '0345333748': 2825, '3455042139': 2826, '3453160363': 2827, '1590888391': 2828, '0060262478': 2829, '0590452037': 2830, '0861637534': 2831, '0743411269': 2832, '0743410335': 2833, '0440400449': 2834, '0446356018': 2835, '0631221204': 2836, '0671021001': 2837, '0671011618': 2838, '0452281784': 2839, '0771087586': 2840, '0345296702': 2841, '8401491029': 2842, '8846818938': 2843, '0446600768': 2844, '0451524500': 2845, '0446600792': 2846, '0671007718': 2847, '0783548303': 2848, '0399147195': 2849, '0671024094': 2850, '0399215360': 2851, '0590460153': 2852, '0141309210': 2853, '0747267626': 2854, '0786015233': 2855, '0966891945': 2856, '092077525X': 2857, '0449701751': 2858, '193168605X': 2859, '0140124896': 2860, '0373226322': 2861, '0345385950': 2862, '1586480324': 2863, '0060935464': 2864, '0310284619': 2865, '067188414X': 2866, '0446608033': 2867, '0582003288': 2868, '0375703063': 2869, '0440800544': 2870, '3518112686': 2871, '0060199652': 2872, '0679723110': 2873, '0380762609': 2874, '0140292683': 2875, '0836221362': 2876, '0340187859': 2877, '0812589165': 2878, '1555031315': 2879, '1565890442': 2880, '0140279105': 2881, '0130815667': 2882, '226403629X': 2883, '0969419430': 2884, '0553142003': 2885, '0880382546': 2886, '044017161X': 2887, '0671034677': 2888, '0440214165': 2889, '080410526X': 2890, '0553572202': 2891, '0060294655': 2892, '0373153279': 2893, '0446610550': 2894, '055327838X': 2895, '1551667037': 2896, '055328942X': 2897, '0399149384': 2898, '0688167888': 2899, '0061011843': 2900, '0553801279': 2901, '0373218060': 2902, '0345403916': 2903, '0446674249': 2904, '1882723058': 2905, '0060263857': 2906, '0877017883': 2907, '1576731235': 2908, '0439130204': 2909, '0425180239': 2910, '050552466X': 2911, '0140067477': 2912, '190315510X': 2913, '0340793708': 2914, '0919345182': 2915, '0821776037': 2916, '0449147738': 2917, '1551665344': 2918, '0747521018': 2919, '0399136495': 2920, '0688146910': 2921, '0449906515': 2922, '0571209874': 2923, '039332303X': 2924, '0440213185': 2925, '0099482002': 2926, '1563891050': 2927, '0446600474': 2928, '3596223946': 2929, '0679761047': 2930, '0435910078': 2931, '0425113884': 2932, '002542730X': 2933, '00065146218': 2934, '0373077467': 2935, '1550135759': 2936, '0439222265': 2937, '0743257480': 2938, '0345444884': 2939, '2207238520': 2940, '0061099708': 2941, '1574301039': 2942, '0380806304': 2943, '0747274134': 2944, '0786885971': 2945, '0307171434': 2946, '0440222877': 2947, '0140430962': 2948, '0553375407': 2949, '0525243828': 2950, '0812571762': 2951, '0027092305': 2952, '0446602612': 2953, '9501512916': 2954, '0670030449': 2955, '0821768379': 2956, '070640985X': 2957, '0671726889': 2958, '0060264306': 2959, '1871744105': 2960, '8879830546': 2961, '0060987103': 2962, '0747249180': 2963, '1844262553': 2964, '3404257049': 2965, '0520046552': 2966, '0451450523': 2967, '0446608106': 2968, '0373114206': 2969, '0452276721': 2970, '0778320308': 2971, '0141013087': 2972, '8467004975': 2973, '0451455991': 2974, '0553581481': 2975, '0385334834': 2976, '0743235355': 2977, '0156787334': 2978, '0671898604': 2979, '0440200172': 2980, '037322583': 2981, '0380713985': 2982, '0671568183': 2983, '0446608262': 2984, '1551660717': 2985, '044651862X': 2986, '0671739786': 2987, '0439440629': 2988, '034542252X': 2989, '0312089295': 2990, '0452283035': 2991, '0553239341': 2992, '0842357912': 2993, '0060508302': 2994, '0773759069': 2995, '0553573616': 2996, '0451160533': 2997, '038049163X': 2998, '0840751877': 2999, '0590877518': 3000, '1886801096': 3001, '0060955775': 3002, '067152044X': 3003, '0965046907': 3004, '0691019339': 3005, '0425130711': 3006, '0451203453': 3007, '0553575384': 3008, '0765304856': 3009, '0679721827': 3010, '0515106402': 3011, '0373832958': 3012, '349913599X': 3013, '0821773976': 3014, '0451625676': 3015, '0586044345': 3016, '0671673688': 3017, '0689815158': 3018, '0142000361': 3019, '0689805985': 3020, '0345380479': 3021, '0884046532': 3022, '8432207330': 3023, '0553576798': 3024, '0843138092': 3025, '0394896254': 3026, '067187098X': 3027, '0486243338': 3028, '0140244824': 3029, '0553568728': 3030, '0345461711': 3031, '0440150795': 3032, '0440141168': 3033, '0349109435': 3034, '0440407079': 3035, '0449219550': 3036, '0890431337': 3037, '0142001384': 3038, '0385073534': 3039, '0070089698': 3040, '0385507941': 3041, '0521468760': 3042, '0441569595': 3043, '0345325605': 3044, '0821759450': 3045, '1578700418': 3046, '0373122160': 3047, '0747557918': 3048, '0590551930': 3049, '0140430083': 3050, '1875058060': 3051, '0345434692': 3052, '0553585177': 3053, '0064400557': 3054, '0451409736': 3055, '0553256459': 3056, '1573225517': 3057, '3462026545': 3058, '0486284670': 3059, '0380718340': 3060, '0812502493': 3061, '0446609943': 3062, '0030574862': 3063, '0842339760': 3064, '0843949333': 3065, '0590483528': 3066, '0060187409': 3067, '0446343455': 3068, '0345311078': 3069, '0201407221': 3070, '1853260282': 3071, '0895779323': 3072, '0553101943': 3073, '0800780418': 3074, '3442429552': 3075, '0670030643': 3076, '0712600019': 3077, '0156001918': 3078, '8845421457': 3079, '0449204324': 3080, '0679449116': 3081, '0375727345': 3082, '0553089242': 3083, '0312980345': 3084, '0618004076': 3085, '0515122564': 3086, '1552673057': 3087, '0385314280': 3088, '0451204301': 3089, '070894471X': 3090, '0140049975': 3091, '0451155750': 3092, '0425181014': 3093, '1551667908': 3094, '0060163976': 3095, '0440220734': 3096, '0886775809': 3097, '0374347972': 3098, '0316089699': 3099, '0671008285': 3100, '0425180905': 3101, '0439568455': 3102, '8474105706': 3103, '0515131563': 3104, '0304352411': 3105, '0390211532': 3106, '1580623034': 3107, '0791000648': 3108, '0446364282': 3109, '076455235X': 3110, '9768108126': 3111, '0873642651': 3112, '0441009336': 3113, '0140287019': 3114, '0028610989': 3115, '0778320790': 3116, '0520012984': 3117, '088029650X': 3118, '074931320X': 3119, '0373709374': 3120, '0152025030': 3121, '1877008400': 3122, '3596150655': 3123, '1565920422': 3124, '0345309979': 3125, '3453074971': 3126, '0553574558': 3127, '1573225789': 3128, '0345385977': 3129, '0060953748': 3130, '0451521676': 3131, '0451204565': 3132, '0449214982': 3133, '0553100157': 3134, '0451173317': 3135, '0380545020': 3136, '0395536804': 3137, '0860681467': 3138, '0689851979': 3139, '0671022997': 3140, '0142003557': 3141, '0749324392': 3142, '0393050297': 3143, '0553268120': 3144, '0446364789': 3145, '0446671002': 3146, '0441750184': 3147, '0671892673': 3148, '0439658543': 3149, '1740595939': 3150, '0446604275': 3151, '8882464695': 3152, '0312253265': 3153, '0061061360': 3154, '0380018179': 3155, '0425142078': 3156, '0345406931': 3157, '0879677856': 3158, '009944352X': 3159, '1575211777': 3160, '0028630238': 3161, '067697385X': 3162, '3499264161': 3163, '0670845213': 3164, '0786881356': 3165, '039480001X': 3166, '0099283840': 3167, '0027357813': 3168, '0061097101': 3169, '0671003410': 3170, '0600353214': 3171, '0440177073': 3172, '0345323211': 3173, '0749396067': 3174, '0440207622': 3175, '3442453534': 3176, '0345285980': 3177, '0425170306': 3178, '0345447867': 3179, '0486259250': 3180, '0812533313': 3181, '0446613193': 3182, '3440093360': 3183, '0373118864': 3184, '0451205987': 3185, '0895120402': 3186, '1551669552': 3187, '0553026135': 3188, '0553273914': 3189, '044922046X': 3190, '0060086246': 3191, '0553213652': 3192, '0451188470': 3193, '0525935908': 3194, '0813633133': 3195, '0679425268': 3196, '0590332163': 3197, '0553578529': 3198, '17121963': 3199, '0345423089': 3200, '0156007479': 3201, '0553135945': 3202, '0679760806': 3203, '0737303239': 3204, '0425181480': 3205, '0312970633': 3206, '0671639218': 3207, '0671881175': 3208, '0679452281': 3209, '0743418735': 3210, '0670870951': 3211, '1559583665': 3212, '0452276764': 3213, '0060915803': 3214, '0140362505': 3215, '0140271813': 3216, '0140298452': 3217, '0671690590': 3218, '8472453723': 3219, '0670031321': 3220, '0345350170': 3221, '0671776975': 3222, '0446360716': 3223, '0380798956': 3224, '8423918262': 3225, '0805071563': 3226, '0868194778': 3227, '1869503589': 3228, '0671722891': 3229, '0609804138': 3230, '0804107386': 3231, '0425163407': 3232, '0880299053': 3233, '0373056567': 3234, '0830819118': 3235, '3570204642': 3236, '0060915544': 3237, '0373035284': 3238, '0425165353': 3239, '0515130613': 3240, '0446672211': 3241, '0743451430': 3242, '0684867974': 3243, '1556615620': 3244, '1575663236': 3245, '0439136369': 3246, '0758206135': 3247, '0140058338': 3248, '0099233010': 3249, '0373057113': 3250, '0812553632': 3251, '0385426151': 3252, '0385187858': 3253, '0452263565': 3254, '0440211298': 3255, '1902260333': 3256, '0373272375': 3257, '0684834723': 3258, '0140120556': 3259, '0553213342': 3260, '1842430327': 3261, '0743202007': 3262, '0385497946': 3263, '037308384X': 3264, '1583487840': 3265, '0871136317': 3266, '0399127984': 3267, '1857232046': 3268, '0440189438': 3269, '0486270556': 3270, '0671520474': 3271, '0140390448': 3272, '0380973464': 3273, '1551665948': 3274, '0743244788': 3275, '0590090755': 3276, '0671551043': 3277, '0812570626': 3278, '0373291663': 3279, '0195049067': 3280, '0060081961': 3281, '3423205660': 3282, '0572014015': 3283, '0877799040': 3284, '0062503669': 3285, '0743418891': 3286, '0553111337': 3287, '8432221848': 3288, '055327418X': 3289, '037379066X': 3290, '0679444920': 3291, 'FROMPUBLISHER': 3292, '0842332340': 3293, '0671721763': 3294, '0345447840': 3295, '0446519006': 3296, '1880966042': 3297, '0099297701': 3298, '0060177217': 3299, '0553204963': 3300, '0312265867': 3301, '034536550X': 3302, '0345419979': 3303, '0590099132': 3304, '0671034243': 3305, '3423072342': 3306, '0394800168': 3307, '1570424535': 3308, '039914210X': 3309, '0786889322': 3310, '0446525502': 3311, '3442151473': 3312, '0141439556': 3313, '0064472272': 3314, '8838917442': 3315, '0446603716': 3316, '0380703130': 3317, '038542471X': 3318, '0373118880': 3319, '0373243006': 3320, '031242227X': 3321, '0060198338': 3322, '8401327199': 3323, '1878044885': 3324, '0345447409': 3325, '0345439104': 3326, '1585421359': 3327, '0375826688': 3328, '0192833952': 3329, '0380755467': 3330, '0312863829': 3331, '0141007338': 3332, '0061042943': 3333, '1551665026': 3334, '0425115097': 3335, '0060927216': 3336, '0449146855': 3337, '0590418858': 3338, '0930330471': 3339, '0394717058': 3340, '0671758527': 3341, '031286874X': 3342, '0688126596': 3343, '0345346971': 3344, '0380730847': 3345, '0375413596': 3346, '0373057555': 3347, '0671673661': 3348, '0738703192': 3349, '0670892971': 3350, '081673710X': 3351, '1870041364': 3352, '0934601712': 3353, '1574881515': 3354, '0553579908': 3355, '053107112X': 3356, '9511114891': 3357, '0425166619': 3358, '0060188707': 3359, '0061083593': 3360, '0553229818': 3361, '0679764119': 3362, '0440216745': 3363, '1573229571': 3364, '0330334026': 3365, '5620220578': 3366, '0896936341': 3367, '0312954212': 3368, '0520024788': 3369, '0920852386': 3370, '0553256920': 3371, '1561711543': 3372, '0312925174': 3373, '0048231142': 3374, '0380754134': 3375, '0192833863': 3376, '0425192725': 3377, '0822434628': 3378, '0812579259': 3379, '0843920351': 3380, '0002226642': 3381, '0671744585': 3382, '3442355907': 3383, '0849934958': 3384, '0802137989': 3385, '0812509811': 3386, '0440203279': 3387, '0345272609': 3388, '0764221760': 3389, '9726952670': 3390, '0712670394': 3391, '0515119652': 3392, '0763603538': 3393, '0525940464': 3394, '0373242972': 3395, '0316313068': 3396, '0590486861': 3397, '0061058270': 3398, '1558537449': 3399, '0385482493': 3400, '0515110973': 3401, '0586047654': 3402, '903884543X': 3403, '1558535527': 3404, '0445402296': 3405, '0440145465': 3406, '0425105725': 3407, '671471813': 3408, '006105481X': 3409, '0446607444': 3410, '1591164354': 3411, '0767902866': 3412, '1857920082': 3413, '038550120X': 3414, '0330335723': 3415, '1551663058': 3416, '1579542913': 3417, '0805062262': 3418, '0786708395': 3419, '050552516X': 3420, '0091882745': 3421, '0679885854': 3422, '0440414539': 3423, '0393322599': 3424, '0671704184': 3425, '0446604941': 3426, '0345393007': 3427, '1562054481': 3428, '037541181X': 3429, '2253000841': 3430, '1580624383': 3431, '1857978013': 3432, '0399147365': 3433, '0440200563495': 3434, '8845252906': 3435, '0380603764': 3436, '0312890001': 3437, '0943020077': 3438, '0373243073': 3439, '0060503580': 3440, '0553571656': 3441, '0505525682': 3442, '0767901428': 3443, '0821739913': 3444, '0140437312': 3445, '0385306032': 3446, '0140139974': 3447, '1573221112': 3448, '0425143600': 3449, '067156773X': 3450, '0373483422': 3451, '0515117242': 3452, '0441783058': 3453, '158579029X': 3454, '0739405179': 3455, '0192100386': 3456, '8495426609': 3457, '0373790309': 3458, '0373054750': 3459, '0553583158': 3460, '1580171443': 3461, '0002243806': 3462, '1558176454': 3463, '0553278916': 3464, '7992753550': 3465, '0006754147': 3466, '0553297988': 3467, '0743419170': 3468, '0141002077': 3469, '0333600584': 3470, '8423977439': 3471, '0373441320': 3472, '0874849098': 3473, '1573227889': 3474, '2830207904': 3475, '0440404541': 3476, '0743245520': 3477, '0451178017': 3478, '1841954551': 3479, '0679767193': 3480, '3499605554': 3481, '0870440047': 3482, '1853260207': 3483, '0670030635': 3484, '0671867113': 3485, '037324469X': 3486, '9726102863': 3487, '067102535X': 3488, '0671687743': 3489, '0027435008': 3490, '0451179285': 3491, '0767908511': 3492, '8807814099': 3493, '0525946284': 3494, '0765343266': 3495, '0486264564': 3496, '0879516283': 3497, '0312291388': 3498, '0373171366': 3499, '1853260533': 3500, '0312143060': 3501, '156173411X': 3502, '000651264X': 3503, '0385501404': 3504, '0312978766': 3505, '0451188454': 3506, '0812969650': 3507, '0848703596': 3508, '0373790643': 3509, '0709169329': 3510, '0517882124': 3511, '0449703983': 3512, '8472794180': 3513, '0590476866': 3514, '03333365321': 3515, '074322227X': 3516, '0340393130': 3517, '1566194016': 3518, '0316171530': 3519, '11238356': 3520, '0140193669': 3521, '0140055932': 3522, '0385337116': 3523, '0064400964': 3524, '0140276017': 3525, '0226500578': 3526, '3596505968': 3527, '042518403X': 3528, '051513290X': 3529, '0553156411': 3530, '0345358031': 3531, '014027927X': 3532, '8401328128': 3533, '0385304900': 3534, '0866228098': 3535, '0765341697': 3536, '0590436309': 3537, '3927568201': 3538, '0283072792': 3539, '0375505857': 3540, '0345424654': 3541, '0385333412': 3542, '0751501085': 3543, '0553257994': 3544, '0425097722': 3545, '04403431904': 3546, '0061081809': 3547, '0134681339': 3548, '0394823370': 3549, '0689826494': 3550, '0571209769': 3551, '1573920363': 3552, '3551551936': 3553, '0553298178': 3554, '0385496095': 3555, '0140342907': 3556, '0671722816': 3557, '0931674085': 3558, '8878240192': 3559, '0708881203': 3560, '0440295661': 3561, '0553263579': 3562, '0446328456': 3563, '0552143243': 3564, '0061099805': 3565, '0446403377': 3566, '8472234363': 3567, '0373250282': 3568, '0345313151': 3569, '0385513089': 3570, '0552117552': 3571, '0671735551': 3572, '0449700712': 3573, '8487507301': 3574, '038542017X': 3575, '0553800914': 3576, '0192833715': 3577, '0394756967': 3578, '0880299185': 3579, '0340339659': 3580, '0060012781': 3581, '0515133418': 3582, '0345318862': 3583, '006101351X': 3584, '0393092933': 3585, '0330253603': 3586, '0399138994': 3587, '0385497555': 3588, '2277302686': 3589, '0571153747': 3590, '1571201203': 3591, '0415077087': 3592, '0875421369': 3593, '0521781884': 3594, '0395866502': 3595, '3612650025': 3596, '0451206940': 3597, '842263824X': 3598, '0688174035': 3599, '0373169469': 3600, '0375502025': 3601, '0688063314': 3602, '1551660520': 3603, '1862070040': 3604, '0380804727': 3605, '074939188X': 3606, '0070503192': 3607, '0517703939': 3608, '0373484771': 3609, '3423204753': 3610, '0743237196': 3611, '0553233998': 3612, '0590494333': 3613, '0671468510': 3614, '0393957608': 3615, '0440208556': 3616, '0679429891': 3617, '0312991460': 3618, '0451163966': 3619, '3746612411': 3620, '080410753X': 3621, '0448117517': 3622, '0890811512': 3623, '0671532251': 3624, '0871315572': 3625, '0446344281': 3626, '0821713876': 3627, '068484639X': 3628, '0394569873': 3629, '0749309466': 3630, '3596144965': 3631, '0743451538': 3632, '080410946X': 3633, '3518367773': 3634, '1590592565': 3635, '0767902831': 3636, '0684801221': 3637, '1860339085': 3638, '0887764983': 3639, '0671028375': 3640, '0812528042': 3641, '1863307443': 3642, '0671766163': 3643, '0590477412': 3644, '0671870874': 3645, '0312966954': 3646, '0842329129': 3647, '0330323695': 3648, '0061095559': 3649, '0805068341': 3650, '8440679858': 3651, '0373110871': 3652, '0842335986': 3653, '044023722X': 3654, '0679744398': 3655, '0743418549': 3656, '0062507877': 3657, '0060975008': 3658, '0374281947': 3659, '0449210901': 3660, '0789495929': 3661, '0140309586': 3662, '0345363582': 3663, '0764122967': 3664, '0312970307': 3665, '0451523415': 3666, '0590437976': 3667, '0140042172': 3668, '0373289081': 3669, '0375704248': 3670, '0070212570': 3671, '8420646105': 3672, '851231085': 3673, '0892131349': 3674, '8402090443': 3675, '0553213148': 3676, '0452268060': 3677, '0590453858': 3678, '1551922703': 3679, '0122008502': 3680, '0385720106': 3681, '0061082708': 3682, '8845247414': 3683, '8882896714': 3684, '0375802916': 3685, '0689804423': 3686, '9726080045': 3687, '0515106070': 3688, '0836217012': 3689, '0671036505': 3690, '0515132039': 3691, '0804119996': 3692, '0446607711': 3693, '0898795966': 3694, '0843931442': 3695, '3442135338': 3696, '0375502238': 3697, '0451184394': 3698, '0812540328': 3699, '0486287262': 3700, '0345328396': 3701, '0380006456': 3702, '1551661780': 3703, '0767915062': 3704, '067973807X': 3705, '0671027514': 3706, '0663461634': 3707, '034544325X': 3708, '1893224546': 3709, '0879676566': 3710, '0380727021': 3711, '0843950498': 3712, '8845251829': 3713, '057500150X': 3714, '0233996214': 3715, '8431705302': 3716, '0471143529': 3717, '0451151259': 3718, '0743418174': 3719, '1572700351': 3720, '0006928137': 3721, '0449218414': 3722, '0375703861': 3723, '0445209666': 3724, '0871316390': 3725, '0330020765': 3726, '0066214440': 3727, '0425143341': 3728, '0553567675': 3729, '0451204336': 3730, '0304345350': 3731, '0394578759': 3732, '0345353145': 3733, '0741407612': 3734, '0441240941': 3735, '0440237300': 3736, '0451408977': 3737, '1880656329': 3738, '1573222038': 3739, '0880385359': 3740, '0030965268': 3741, '2260013899': 3742, '8440670796': 3743, '0374204772': 3744, '0307020711': 3745, '0061054763': 3746, '0671217291': 3747, '0449007383': 3748, '0816745382': 3749, '0312983298': 3750, '0575048700': 3751, '0449001962': 3752, '3548256171': 3753, '0425177009': 3754, '0553575015': 3755, '0198200730': 3756, '039302007X': 3757, '0671662163': 3758, '0552999458': 3759, '0312315228': 3760, '0425178951': 3761, '0671797301': 3762, '0441070698': 3763, '1570981590': 3764, '0446607339': 3765, '089480698X': 3766, '1566196884': 3767, '031230739X': 3768, '052524901X': 3769, '1585670162': 3770, '0671722859': 3771, '0765340747': 3772, '0451175190': 3773, '067976674X': 3774, '0679507841': 3775, '0375500510': 3776, '0140258418': 3777, '0451190157': 3778, '0571212956': 3779, '0446602620': 3780, '8435016285': 3781, '0449909735': 3782, '0888390777': 3783, '042515999X': 3784, '0373223706': 3785, '0399139206': 3786, '0446364703': 3787, '3442069696': 3788, '0825672597': 3789, '0515125601': 3790, '0394851307': 3791, '0812545990': 3792, '0345446429': 3793, '0192800337': 3794, '0373765193': 3795, '0064400018': 3796, '0441694543': 3797, '0446310786': 3798, '0140177396': 3799, '076455168X': 3800, '0316107387': 3801, '1562825038': 3802, '1559212438': 3803, '0679891412': 3804, '0785300430': 3805, '0263148866': 3806, '0373762984': 3807, '0312976275': 3808, '3442245567': 3809, '0590435124': 3810, '0671000349': 3811, '0099421267': 3812, '0441011020': 3813, '0671045512': 3814, '1580628362': 3815, '0002232901': 3816, '0451411633': 3817, '0373264011': 3818, '0517884534': 3819, '0583112315': 3820, '0671869671': 3821, '0553568884': 3822, '0446605239': 3823, '0061099341': 3824, '0767912268': 3825, '0764566202': 3826, '031205436X': 3827, '0441005748': 3828, '1569317917': 3829, '8807814935': 3830, '0688177743': 3831, '2742744444': 3832, '031298328X': 3833, '067187120X': 3834, '0060675292': 3835, '0345297709': 3836, '0345409329': 3837, '0312300638': 3838, '0345401565': 3839, '0373833466': 3840, '0553569910': 3841, '0330332767': 3842, '0559352604': 3843, '0671037382': 3844, '0399151060': 3845, '0385264453': 3846, '0140373365': 3847, '0373255012': 3848, '0002226162': 3849, '0140067485': 3850, '039951936X': 3851, '1551665794': 3852, '1578565677': 3853, '0345350499': 3854, '0425146812': 3855, '0553346687': 3856, '0676972152': 3857, '0140501983': 3858, '8440672055': 3859, '3499263599': 3860, '0805041400': 3861, '0446394521': 3862, '0373292147': 3863, '155166710X': 3864, '073700049X': 3865, '8804305479': 3866, '0812515609': 3867, '0451166876': 3868, '1885356552': 3869, '0553563106': 3870, '0771061099': 3871, '0312422156': 3872, '0821742523': 3873, '0905483839': 3874, '0425194612': 3875, '0330330276': 3876, '0689704232': 3877, '8479601590': 3878, '0590423541': 3879, '0446516988': 3880, '0140621679': 3881, '0843944706': 3882, '0821748173': 3883, '0373032900': 3884, '185326167X': 3885, '0099771519': 3886, '031286101X': 3887, '0843940328': 3888, '0451188489': 3889, '0451169530': 3890, '0517163446': 3891, '1573228397': 3892, '0380781220': 3893, '0425124866': 3894, '0449901017': 3895, '0426203348': 3896, '0006511120': 3897, '037303279X': 3898, '3786720835': 3899, '0441317626': 3900, '0892819006': 3901, '0373264674': 3902, '0679722661': 3903, '0440216974': 3904, '0671693816': 3905, '0312964323': 3906, '0752584820': 3907, '052512800X': 3908, '0446610399': 3909, '0380977788': 3910, '0689828772': 3911, '0742522458': 3912, '014043268X': 3913, '0425131769': 3914, '01400.5925.3': 3915, '0451176464': 3916, '0394747704': 3917, '0449223450': 3918, '0312978448': 3919, '055358118X': 3920, '0060242361': 3921, '0140276904': 3922, '0689716850': 3923, '0345425707': 3924, '0670866229': 3925, '0060122498': 3926, '030371706': 3927, '2226086366': 3928, '0765196875': 3929, '1551520559': 3930, '043920786X': 3931, '0553289691': 3932, '0515130990': 3933, '0895867990': 3934, '0373078579': 3935, '0345334302': 3936, '1568843844': 3937, '0446612790': 3938, '0312958455': 3939, '0553586335': 3940, '0786014423': 3941, '0810909650': 3942, '0684803534': 3943, '0786885416': 3944, '0385335121': 3945, '0140621806': 3946, '0843934131': 3947, '0316776963': 3948, '0600566854': 3949, '0330484648': 3950, '0375503765': 3951, '0345435249': 3952, '0316782009': 3953, '0064460606': 3954, '0671644661': 3955, '0345354648': 3956, '0345301110': 3957, '0446609633': 3958, '0451186362': 3959, '0449141349': 3960, '0451405382': 3961, '3442437407': 3962, '0520008960': 3963, '0439327660': 3964, '0553096834': 3965, '0553094416': 3966, '0192833642': 3967, '0028604032': 3968, '0802139248': 3969, '0875421180': 3970, '0671876775': 3971, '0345458958': 3972, '1561893676': 3973, '0812510666': 3974, '0061012467': 3975, '0312263120': 3976, '0670852139': 3977, '0747403902': 3978, '0842337539': 3979, '1586605232': 3980, '0786916362': 3981, '1570750262': 3982, '0886771854': 3983, '0449205983': 3984, '0345369947': 3985, '1878257862': 3986, '0345423658': 3987, '0201329697': 3988, '0515124893': 3989, '0849917050': 3990, '0425051617': 3991, '0440240891': 3992, '006029521X': 3993, '1551663155': 3994, '0717284832': 3995, '034529873X': 3996, '0425140040': 3997, '0553099590': 3998, '0440229502': 3999, '0802139612': 4000, '0373262175': 4001, '8876846174': 4002, '0394725883': 4003, '0679406832': 4004, '0062502891': 4005, '0312993536': 4006, '0721403468': 4007, '0060240245': 4008, '3442545706': 4009, '0809229889': 4010, '0671047450': 4011, '0451522397': 4012, '0060208007': 4013, '0380756269': 4014, '055329783X': 4015, '0670849057': 4016, '0446311901': 4017, '0156899604': 4018, '042518613X': 4019, '0671793489': 4020, '3257251017': 4021, '0821763784': 4022, '1551662914': 4023, '0553478257': 4024, '3499227339': 4025, '0743406583': 4026, '8370755275': 4027, '023111544X': 4028, '0671690566': 4029, '0821720619': 4030, '8811738717': 4031, '0671891715': 4032, '0385490879': 4033, '0060529148': 4034, '0679003797': 4035, '0743406176': 4036, '0771055706': 4037, '0821759868': 4038, '0425191311': 4039, '0913367141': 4040, '0425172546': 4041, '1550376330': 4042, '0671692674': 4043, '0060973595': 4044, '0140176616': 4045, '0060934700': 4046, '0681007982': 4047, '155166514X': 4048, '0061080349': 4049, '0140252738': 4050, '037370691X': 4051, '0553275976': 4052, '0886777631': 4053, '1567315844': 4054, '0440146577': 4055, '0804422079': 4056, '0525944001': 4057, '0312420021': 4058, '0679772677': 4059, '3462015648': 4060, '0380702878': 4061, '0804119783': 4062, '0721421989': 4063, '0679601996': 4064, '0773731199': 4065, '0839828225': 4066, '9724112756': 4067, '3791513265': 4068, '0439376106': 4069, '8467201444': 4070, '0345303644': 4071, '0679731369': 4072, '0553287346': 4073, '0809478110': 4074, '0061030201': 4075, '0451204948': 4076, '0140238131': 4077, '0671769820': 4078, '0525946241': 4079, '0393020495': 4080, '0061054240': 4081, '0553564528': 4082, '2207247554': 4083, '0330309552': 4084, '006019443X': 4085, '0451527747': 4086, '0452283442': 4087, '0151004951': 4088, '1551665824': 4089, '0886772214': 4090, '0517188244': 4091, '0679409920': 4092, '0373709544': 4093, '0884943240': 4094, '0553284789': 4095, '0515119202': 4096, '1551664380': 4097, '0671008803': 4098, '0345288556': 4099, '0764518003': 4100, '0440504953': 4101, '8420613126': 4102, '0140620192': 4103, '1552783081': 4104, '0373077521': 4105, '2266111396': 4106, '1551664704': 4107, '0765305224': 4108, '0449220176': 4109, '0765346125': 4110, '0553288202': 4111, '0671526715': 4112, '0140340203': 4113, '1551668602': 4114, '8422662523': 4115, '0451404319': 4116, '3423118652': 4117, '0446404144': 4118, '0440208130': 4119, '0684867621': 4120, '0553230360': 4121, '0671003119': 4122, '0517122707': 4123, '3257228007': 4124, '0517661756': 4125, '0380789612': 4126, '0060959037': 4127, '1401088945': 4128, '0918273838': 4129, '0375750223': 4130, '0449239152': 4131, '0373077882': 4132, '0786927089': 4133, '0373201818': 4134, '0375506039': 4135, '0449000885': 4136, '0735613826': 4137, '0738861618': 4138, '0553028227': 4139, '0671541501': 4140, '0553211757': 4141, '0385498411': 4142, '055357292X': 4143, '0375508627': 4144, '0671887963': 4145, '0451205758': 4146, '0523417489': 4147, '0345337662': 4148, '0312960344': 4149, '0802775004': 4150, '1853260800': 4151, '038550117X': 4152, '0966193105': 4153, '8521902069': 4154, '0346123062': 4155, '0689710518': 4156, '002864896X': 4157, '0345396936': 4158, '0874771935': 4159, '0439368529': 4160, '0553277006': 4161, '0671003682': 4162, '0062517716': 4163, '9029507780': 4164, '0393970426': 4165, '0671519816': 4166, '0060924837': 4167, '0375505695': 4168, '0452261368': 4169, '0373691602': 4170, '0786885688': 4171, '2.02.000585.9': 4172, '8445904116': 4173, '0060186526': 4174, '0894718207': 4175, '0590404075': 4176, '0446603856': 4177, '0807119466': 4178, '0571148166': 4179, '0146001435': 4180, '3785540159': 4181, '0373291027': 4182, '0553271644': 4183, '0451457765': 4184, '0671669230': 4185, '0515126772': 4186, '1588720756': 4187, '0807023086': 4188, '0553377876': 4189, '0761507280': 4190, '7506015463': 4191, '074345068X': 4192, '0312066384': 4193, '0812564871': 4194, '0805042024': 4195, '006092991X': 4196, '0440228476': 4197, '0679725513': 4198, '0440574358': 4199, '0671799045': 4200, '0590452584': 4201, '0130305367': 4202, '0440910811': 4203, '0060976454': 4204, '0804104549': 4205, '0141301147': 4206, '8878193526': 4207, '0375418830': 4208, '0553293370': 4209, '0894803441': 4210, '3453024370': 4211, '0952415348': 4212, '0140442081': 4213, '3493600372': 4214, '0679412611': 4215, '8488413750': 4216, '0394561619': 4217, '0486282228': 4218, '0373825749': 4219, '3922028004': 4220, '0895773678': 4221, '0810918684': 4222, '0399151435': 4223, '0373638078': 4224, '0394925602': 4225, '0380792478': 4226, '3596258758': 4227, '9728257163': 4228, '0345351738': 4229, '0373288654': 4230, '8871334914': 4231, '8574023477': 4232, '0747544603': 4233, '0373104677': 4234, '0743470915': 4235, '0140186522': 4236, '1571690506': 4237, '0373121482': 4238, '0141303743': 4239, '0877423814': 4240, '0671680781': 4241, '084394546X': 4242, '0446600466': 4243, '0312867875': 4244, '1557482675': 4245, '0440217466': 4246, '8804489448': 4247, '034538184X': 4248, '0451179900': 4249, '0486999521': 4250, '0743423682': 4251, '0316286869': 4252, '0764112198': 4253, '0451119932': 4254, 'B00005R2BG': 4255, '0747240752': 4256, '0373271220': 4257, '2070407756': 4258, '2070374610': 4259, '0312319517': 4260, '0373761910': 4261, '842268215X': 4262, '0380773155': 4263, '2844050328': 4264, '0060241756': 4265, '0812562836': 4266, '0226848620': 4267, '0060512806': 4268, '0671042556': 4269, '0452283086': 4270, '0671204971': 4271, '0941188108': 4272, '0385482515': 4273, '0515123471': 4274, '0809464128': 4275, '0586081321': 4276, '0525937676': 4277, '0373112270': 4278, '0061082031': 4279, '0385336004': 4280, '055326253X': 4281, '0155037714': 4282, '068485760X': 4283, '0446521582': 4284, '0316735736': 4285, '1558702334': 4286, '0373451636': 4287, '0385244002': 4288, '1551669277': 4289, '0738204307': 4290, '037302309X': 4291, '0440203430': 4292, '077042029x': 4293, '0393312461': 4294, '8804325038': 4295, '0743448189': 4296, '06080290X': 4297, '0449902854': 4298, '0440225442': 4299, '0061094226': 4300, '0590466631': 4301, '0806512717': 4302, '0099463601': 4303, '9176428214': 4304, '0515132756': 4305, '0349106533': 4306, '0380978172': 4307, '0345467566': 4308, '0380754509': 4309, '0425145638': 4310, '0553271636': 4311, '0380723387': 4312, '0373098189': 4313, '9041701214': 4314, '0812500725': 4315, '009943184X': 4316, '0345417186': 4317, '0531071421': 4318, '0749398574': 4319, '0441009239': 4320, '0375702709': 4321, '8439598122': 4322, '0132176130': 4323, '0452263018': 4324, '0060532149': 4325, '0913299545': 4326, '0553232495': 4327, '0452283736': 4328, '0399141324': 4329, '2070360423': 4330, '0060955937': 4331, '0373871759': 4332, '0670814164': 4333, '0300001479': 4334, '0399133844': 4335, '0451408888': 4336, '0030591724': 4337, '0060932139': 4338, '1557100047': 4339, '0515136530': 4340, '1880032376': 4341, '038080722X': 4342, '0670813028': 4343, '0767901819': 4344, '0385497288': 4345, '0380365251': 4346, '0006547834': 4347, '888451049': 4348, '0865474273': 4349, '0393312356': 4350, '0590457225': 4351, '0201626705': 4352, '0449002640': 4353, '0425185710': 4354, '0751338834': 4355, '0553576801': 4356, '0553292439': 4357, '0871568063': 4358, '0142004235': 4359, '1558173331': 4360, '0312155433': 4361, '0671656155': 4362, '1558743316': 4363, '0552995371': 4364, '0312288115': 4365, '067188803X': 4366, '3499220946': 4367, '0671729411': 4368, '0671451820': 4369, '0380003821': 4370, '0141000198': 4371, '0006512801': 4372, '0631197346': 4373, '0590449648': 4374, '0843111976': 4375, '0874067952': 4376, '8471483769': 4377, '8804341971': 4378, '0553381520': 4379, '0373071299': 4380, '0373270704': 4381, '0590435698': 4382, '0439202701': 4383, '0385418213': 4384, '0449001946': 4385, '0440166497': 4386, '0312132204': 4387, '0553584049': 4388, '0440147956': 4389, '0812561589': 4390, '0875423108': 4391, '0316852570': 4392, '0137530382': 4393, '0751512990': 4394, '014011632X': 4395, '8871060008': 4396, '3442452643': 4397, '0671026259': 4398, '0312319142': 4399, '0345425537': 4400, '0375501851': 4401, '0452282764': 4402, '0812520920': 4403, '0785283013': 4404, '0767902076': 4405, '0525432922': 4406, '0688177859': 4407, '325723273X': 4408, '0380730790': 4409, '3548330223': 4410, '0821736612': 4411, '0330254103': 4412, '0316850497': 4413, '1558747109': 4414, '0425179451': 4415, '0816717176': 4416, '3896393723': 4417, '0874775191': 4418, '0770424961': 4419, '1567187285': 4420, '0380815931': 4421, '0553211412': 4422, '8806158341': 4423, '0684835959': 4424, '0375705856': 4425, '0679449310': 4426, '0515111317': 4427, '034528299X': 4428, '0826321933': 4429, '0446400513': 4430, '0312983212': 4431, '3445103820': 4432, '0380729342': 4433, '0446672289': 4434, '0449237826': 4435, '2221002822': 4436, '0688084923': 4437, '0440184053': 4438, '0385333463': 4439, '0064403688': 4440, '0449906787': 4441, '0006548180': 4442, '0373483945': 4443, '002860497': 4444, '1414033435': 4445, '0425137007': 4446, '1850573751': 4447, '0441783309': 4448, '0804830088': 4449, '0375763317': 4450, '0373250169': 4451, '0552140287': 4452, '0451455789': 4453, '0399143130': 4454, '014019536X': 4455, '0312289871': 4456, '038077352X': 4457, '2246548810': 4458, '0415130352': 4459, '039595617X': 4460, '0877222401': 4461, '006101351': 4462, '0440485525': 4463, '0374148600': 4464, '0312202911': 4465, '9060054156': 4466, '0373243642': 4467, '0451410807': 4468, '0349117004': 4469, '0316693200': 4470, '0140272658': 4471, '0380731851': 4472, '074342798X': 4473, '0345378881': 4474, '0816769370': 4475, '1575662280': 4476, '082172262X': 4477, '0679015396': 4478, '0152045643': 4479, '0140130209': 4480, '0307231240': 4481, '0155658115': 4482, '1585422118': 4483, '3518392867': 4484, '1575662191': 4485, '0345369351': 4486, '0553283936': 4487, '0714530808': 4488, '0767901762': 4489, '0312148259': 4490, '0060989238': 4491, '0805036504': 4492, '034544177X': 4493, '0373691254': 4494, '0316899984': 4495, '0449221490': 4496, '0345428285': 4497, '0515069469': 4498, '3451187930': 4499, '0156007754': 4500, '0670892300': 4501, '0066214122': 4502, '038097519X': 4503, '006109918X': 4504, '0446608076': 4505, '0451403355': 4506, '3499230305': 4507, '1858288967': 4508, '0679767185': 4509, '0140042326': 4510, '074347709X': 4511, '0870541617': 4512, '0375708316': 4513, '0590424777': 4514, '0449217183': 4515, '0441008216': 4516, '0805029281': 4517, '0460882171': 4518, '0553527371': 4519, '0590444301': 4520, '3453173287': 4521, '0340377720': 4522, '0786002735': 4523, '0440223237': 4524, '0486268667': 4525, '0060930179': 4526, '0758203004': 4527, '0853810158': 4528, '0515132187': 4529, '0192822292': 4530, '1551050722': 4531, '0553569902': 4532, '1551664828': 4533, '3518372742': 4534, '3471772510': 4535, '1551660512': 4536, '0919345174': 4537, '0670856495': 4538, '0441011101': 4539, '078688567X': 4540, '0373451776': 4541, '0785315497': 4542, '0786817089': 4543, '0671709828': 4544, '0449134482': 4545, '0671646958': 4546, '0425191192': 4547, '0449147657': 4548, '0842329269': 4549, '1851588418': 4550, '0671534718': 4551, '0373224400': 4552, '0380777169': 4553, '0679746757': 4554, '0671892347': 4555, '055357275X': 4556, '0843111658': 4557, '055356451X': 4558, '8574024856': 4559, '0312252951': 4560, '0393324761': 4561, '0385468709': 4562, '2266000489': 4563, '0140374248': 4564, '0373810202': 4565, '0843946644': 4566, '0786010924': 4567, '907433671X': 4568, '0671825291275': 4569, '0553568760': 4570, '0451182030': 4571, '0141303131': 4572, '0671870939': 4573, '0060984333': 4574, '342311536X': 4575, '0345391829': 4576, '0020427115': 4577, '0451192001': 4578, '0333386019': 4579, '0140171738': 4580, '052166618X': 4581, '0671450492': 4582, '2264025956': 4583, '9177093569': 4584, '1561480711': 4585, '0671067990': 4586, '0886775639': 4587, '1559723505': 4588, '0333750381': 4589, '0810322951': 4590, '0880297697': 4591, '0688139574': 4592, '0375412824': 4593, '0451169034': 4594, '038081093X': 4595, '0449212858': 4596, '9029001291': 4597, '0449225313': 4598, '0373289952': 4599, '0929605594': 4600, '0670876550': 4601, '0440224764': 4602, '0060191988': 4603, '0375700757': 4604, '0345361989': 4605, '3250600555': 4606, '0312964951': 4607, '0804830126': 4608, '8435034526': 4609, '0380815583': 4610, '0618045678': 4611, '1931850054': 4612, '0553109588': 4613, '0340770724': 4614, '0385730586': 4615, '0684848287': 4616, '0590412515': 4617, '0446302066': 4618, '0812551109': 4619, '3828400647': 4620, '1582430853': 4621, '0684835983': 4622, '052594527X': 4623, '0671797042': 4624, '8806157957': 4625, '0380814803': 4626, '8807809907': 4627, '9710805207': 4628, '185458281X': 4629, '0425169081': 4630, '0553572997': 4631, '0446673382': 4632, '0805063897': 4633, '0345335082': 4634, '0486408930': 4635, '156138450X': 4636, '0681100230': 4637, '0892839066': 4638}\n",
            "encoded angka ke ISBN:  {0: '0886774012', 1: '0441787541', 2: '0312276885', 3: '0886776686', 4: '1851680659', 5: '9026103441', 6: '0671865277', 7: '0440111811', 8: '1850159203', 9: '0912083980', 10: '185326055X', 11: '0439228905', 12: '2253153982', 13: '0380750988', 14: '0446517224', 15: '0425188809', 16: '0440226104', 17: '0515124524', 18: '0446603651', 19: '0694514527', 20: '0552146102', 21: '0373166362', 22: '0876044429', 23: '0373707592', 24: '9681322908', 25: '1559707135', 26: '0802138098', 27: '0345372085', 28: '0671670646', 29: '037326013X', 30: '0192827618', 31: '0380704587', 32: '0679444815', 33: '0385336179', 34: '0425135462', 35: '0345389980', 36: '0375411550', 37: '067162783X', 38: '034536998X', 39: '0758204531', 40: '0449005836', 41: '0451190149', 42: '0312978863', 43: '0416866666301', 44: '1562475894', 45: '3822889199', 46: '0373218737', 47: '0373153260', 48: '0786928751', 49: '0515136379', 50: '0345339681', 51: '1580110053', 52: '8433912542', 53: '055321313X', 54: '0143300598', 55: '0715630954', 56: '1931696993', 57: '0446530239', 58: '0810008971', 59: '051512317X', 60: '0679745203', 61: '0140188266', 62: '0821776118', 63: '0877016690', 64: '0426197488', 65: '0385496052', 66: '015601288X', 67: '3404148665', 68: '0812508351', 69: '0553576445', 70: '0892832290', 71: '0684863472', 72: '0821754149', 73: '0099196514', 74: '0316154075', 75: '0802117546', 76: '0553801821', 77: '044021145X', 78: '0373226462', 79: '0671577980', 80: '0446611212', 81: '0380761483', 82: '07335075', 83: '0380789035', 84: '038079845X', 85: '0962197963', 86: '0396082181', 87: '0751502464', 88: '0140621091', 89: '0425031470', 90: '0061042315', 91: '0679851011', 92: '0425158497', 93: '0425051730', 94: '0312970048', 95: '416158501', 96: '1551669382', 97: '0449002632', 98: '0671727583', 99: '0804114986', 100: '0747248087', 101: '0312312431', 102: '0441809332', 103: '0712678077', 104: '0553225413', 105: '3492260896', 106: '0312913788', 107: '1401301061', 108: '0345382293', 109: '1575668998', 110: '073352687X', 111: '0316816353', 112: '0767902521', 113: '1576736563', 114: '0373078188', 115: '3892680132', 116: '0316782262', 117: '0425154084', 118: '0425189031', 119: '055299619X', 120: '0891346244', 121: '0812694120', 122: '0671027360', 123: '0684848783', 124: '8420633119', 125: '0380814390', 126: '0440212952', 127: '0849932343', 128: '0062734792', 129: '0380868768', 130: '157322202X', 131: '0061013145', 132: '0449223604', 133: '0380733358', 134: '0395907020', 135: '0515127833', 136: '0553253778', 137: '0671003755', 138: '0517591979', 139: '0380807343', 140: '0743212002', 141: '0373835264', 142: '0375725784', 143: '0399146113', 144: '1400047714', 145: '0671528904', 146: '0553580035', 147: '084312914X', 148: '0312518633', 149: '0445408642', 150: '0393048896', 151: '014131088X', 152: '0452011817', 153: '0743251148', 154: '0330297538', 155: '3257218478', 156: '0743410068', 157: '0965693260', 158: '067101532X', 159: '0440236630', 160: '0451168089', 161: '0441003257', 162: '0060164239', 163: '0142002267', 164: '0345384369', 165: '037325993X', 166: '006109515X', 167: '0679768157', 168: '0310228638', 169: '3442355915', 170: '0140621210', 171: '0385404867', 172: '0373032056', 173: '0871312611', 174: '0380978016', 175: '0553212478', 176: '0140430571', 177: '0312979088', 178: '0375704965', 179: '0446613444', 180: '0671867156', 181: '0373484178', 182: '0312865031', 183: '0345316991', 184: '0440112052', 185: '0804900795', 186: '0440236665', 187: '067168289X', 188: '0553565370', 189: '0441783589', 190: '0440180295', 191: '0373441096', 192: '0375404643', 193: '0812970802', 194: '0937295477', 195: '0312199430', 196: '0766602451', 197: '1550372343', 198: '0373115326', 199: '0060933283', 200: '189205101X', 201: '0385335881', 202: '0345382323', 203: '0345342534', 204: '0553571486', 205: '8873122933', 206: '0679753109', 207: '0679455876', 208: '0671027387', 209: '0441328008', 210: '0446602698', 211: '1573229725', 212: '0486266850', 213: '0689829302', 214: '2253039128', 215: '349961619X', 216: '0899683789', 217: '0451194861', 218: '0756401372', 219: '0440214920', 220: '0060166231', 221: '0345383230', 222: '0830817204', 223: '0425150143', 224: '1550547593', 225: '0140250948', 226: '0449223442', 227: '0486270610', 228: '0451204956', 229: '0060959355', 230: '067088300X', 231: '0828102813', 232: '1890621102', 233: '0842373195', 234: '0886773776', 235: '0515131229', 236: '1585674818', 237: '2264035951', 238: '1559029838', 239: '0671680080', 240: '0425074994', 241: '0812576071', 242: '0446802204', 243: '3596220831', 244: '3453146956', 245: '0060910445', 246: '0345312139', 247: '038549081X', 248: '0380711974', 249: '0312306326', 250: '3925898905', 251: '0553802747', 252: '0553273736', 253: '8838429103', 254: '0880016884', 255: '0688163165', 256: '0380002930', 257: '0553564668', 258: '0886775507', 259: '0373226357', 260: '0816728097', 261: '0446529788', 262: '044000925', 263: '0736900640', 264: '0425135063', 265: '440181275', 266: '0425180964', 267: '0971880107', 268: '0805010947', 269: '0373077858', 270: '0517706601', 271: '0451160312', 272: '0451517636', 273: '2070301028', 274: '0451453964', 275: '0439139600', 276: '8834403088', 277: '0609610597', 278: '0451521250', 279: '0552134651', 280: '189957901X', 281: '7800055655', 282: '0345413903', 283: '0312982518', 284: '1573221937', 285: '0717283437', 286: '3423126434', 287: '0553122940', 288: '0553219200', 289: '0141302038', 290: '0446519138', 291: '0446519723', 292: '082177462X', 293: '0312009941', 294: '9724131319', 295: '1570643385', 296: '1892213974', 297: '2020509105', 298: '0156004402', 299: '0809435144', 300: '0385240406', 301: '0805051805', 302: '0425151247', 303: '0425096343', 304: '0963270702', 305: '849759200X', 306: '8401491169', 307: '0425130312', 308: '026167398X', 309: '0440207835', 310: '0440220602', 311: '2207305481', 312: '0451405145', 313: '0439417672', 314: '0553105264', 315: '0312278586', 316: '0553803409', 317: '0060175400', 318: '1551669374', 319: '0312034415', 320: '0821768328', 321: '0553209671', 322: '0140092846', 323: '067976402X', 324: '0446610038', 325: '1551669153', 326: '0385301308', 327: '9724614565', 328: '3492237754', 329: '0061054089', 330: '0451522222', 331: '0345461916', 332: '0671660187', 333: '1572970065', 334: '0060598611', 335: '0061000043', 336: '0676972969', 337: '0375753206', 338: '0375755586', 339: '0006730515', 340: '0671038184', 341: '0380789590', 342: '0140288023', 343: '0151008116', 344: '1853260169', 345: '0684848066', 346: '0671003348', 347: '0671456393', 348: '0525945121', 349: '0340596163', 350: '0374525749', 351: '088184389X', 352: '034544034X', 353: '0440214041', 354: '9001955711', 355: '0440126894', 356: '0440131480', 357: '1551667452', 358: '0373510225', 359: '1569470154', 360: '0816713146', 361: '0451097386', 362: '0967303516', 363: '0684825406', 364: '0802112188', 365: '0553268880', 366: '0553278398', 367: '068746384X', 368: '0671430149', 369: '884620090', 370: '0671690574', 371: '0425152251', 372: '0590409433', 373: '0740713949', 374: '0394805720', 375: '0517556278', 376: '0743239261', 377: '0448412853', 378: '9719214872', 379: '0425115801', 380: '186066153X', 381: '0330285521', 382: '0373222998', 383: '0806957050', 384: '0688155847', 385: '0140297405', 386: '0553117459', 387: '044651652X', 388: '1569473706', 389: '0552146641', 390: '0671537881', 391: '0312973055', 392: '0553381393', 393: '1590580885', 394: '0761517855', 395: '0786210745', 396: '1578631211', 397: '0425179885', 398: '0553583980', 399: '1884910432', 400: '0060191929', 401: '0373290055', 402: '04192811100', 403: '0064409430', 404: '0380724073', 405: '0380806312', 406: '0451191889', 407: '0385504209', 408: '0440102731', 409: '014029855X', 410: '089283112X', 411: '0060916303', 412: '055213533', 413: '0373691092', 414: '067152951X', 415: '0895050293', 416: '0373225474', 417: '0733533590', 418: '0425077047', 419: '0140621466', 420: '0671721380', 421: '0440211727', 422: '8817150541', 423: '1884235298', 424: '0060929790', 425: '0875843999', 426: '074341134X', 427: '0330373838', 428: '0439064872', 429: '9174486748', 430: '0553206648', 431: '0500201021', 432: '067945960X', 433: '0553802496', 434: '0679731725', 435: '0345450663', 436: '0449215296', 437: '0292738692', 438: '8820438763', 439: '0340279141', 440: '0312195516', 441: '0570041945', 442: '0061095869', 443: '0451164938', 444: '0380784130', 445: '0684847450', 446: '0684801884', 447: '0425133516', 448: '1565124006', 449: '0312989709', 450: '080411336X', 451: '3257232608', 452: '0689800304', 453: '0531045269', 454: '3404142624', 455: '3453180151', 456: '844733161X', 457: '0375760911', 458: '0373117876', 459: '0029066867', 460: '1860196276', 461: '0880015861', 462: '0505523752', 463: '055299670X', 464: '0060199598', 465: '082177428X', 466: '1857987462', 467: '048627053X', 468: '1572970111', 469: '0373250274', 470: '0156027321', 471: '0688171877', 472: '0671874330', 473: '067087146X', 474: '0671525743', 475: '0684801523', 476: '0345386132', 477: '0812543262', 478: '0789441160', 479: '0449212602', 480: '0312192436', 481: '0425162443', 482: '3895070254', 483: '0425188280', 484: '0679410325', 485: '0553298798', 486: '0140033521', 487: '0679749519', 488: '0316314927', 489: '0704339501', 490: '0375407340', 491: '0446387878', 492: '0590697781', 493: '0312952066', 494: '3404613082', 495: '0061011983', 496: '0886876478', 497: '0201419998', 498: '0435150790', 499: '006019622X', 500: '0312253044', 501: '0373036736', 502: '0312029608', 503: '0380802600', 504: '0671684256', 505: '0843949945', 506: '8489669600', 507: '0786890436', 508: '0192815326', 509: '0449208672', 510: '0070715335', 511: '0380776324', 512: '0060987529', 513: '0671047434', 514: '080411997X', 515: '157143013X', 516: '0553270931', 517: '1400052408', 518: '8481303577', 519: '0486218309', 520: '0380790718', 521: '0684825457', 522: '0425140032', 523: '0553246755', 524: '0446322644', 525: '0449004422', 526: '3596215226', 527: '0812550544', 528: '0743403436', 529: '0449209148', 530: '091516695X', 531: '0517161109', 532: '0380978849', 533: '0380815257', 534: '042510107X', 535: '0812517725', 536: '0446400157', 537: '0451192575', 538: '9513508978', 539: '0380873877', 540: '0525946446', 541: '0440236800', 542: '0373250215', 543: '0380731150', 544: '0385311109', 545: '0312979541', 546: '0451521285', 547: '1562948962', 548: '0679781587', 549: '8447333264', 550: '0684853035', 551: '8878245798', 552: '0394564324', 553: '3434540466', 554: '0393315819', 555: '0373790694', 556: '0679746048', 557: '843391443X', 558: '0590222333', 559: '067172262X', 560: '3257233701', 561: '400323071X', 562: '0451208765', 563: '0590620096', 564: '0449219461', 565: '0345390458', 566: '0969518757', 567: '0849935040', 568: '8495501651', 569: '0373764863', 570: '8445073826', 571: '0671683780', 572: '2080674889', 573: '0590353403', 574: '0877013489', 575: '0788789821', 576: '0441001971', 577: '0425178366', 578: '0316666343', 579: '0886779227', 580: '0743486226', 581: '0312955510', 582: '0060195444', 583: '9728598130', 584: '0312305060', 585: '0684802082', 586: '0393312917', 587: '074320607X', 588: '0515104175', 589: '1863863265', 590: '0425189414', 591: '0156439611', 592: '8850202105', 593: '1576737330', 594: '0385491816', 595: '0553213806', 596: '0743428188', 597: '006019538X', 598: '0688039898', 599: '0399136703', 600: '0836217691', 601: '0875093663', 602: '8449503825', 603: '0451526554', 604: '8483061066', 605: '0553274503', 606: '0060198346', 607: '0340370238', 608: '0373079613', 609: '0345361792', 610: '2253054747', 611: '2038700141', 612: '0345384466', 613: 'B00006H3BO', 614: '0345455711', 615: '0842377506', 616: '3458329072', 617: '0446606812', 618: '0836230809', 619: '0029256208', 620: '0684812274', 621: '0721451063', 622: '0140253602', 623: '0415106001', 624: '0292776292', 625: '0399144706', 626: '2020525747', 627: '0505524473', 628: '0316639982', 629: '0679601597', 630: '0752837680', 631: '0394756983', 632: '0440218098', 633: '0425154092', 634: '0887307876', 635: '0425178102', 636: '3462015753', 637: '0373709846', 638: '0553801341', 639: '0586072586', 640: '0689716605', 641: '8432039756', 642: '0451450876', 643: '009927583X', 644: '0821772252', 645: '0345347951', 646: '1564761584', 647: '0449221229', 648: '8477022631', 649: '0449219364', 650: '0966339762', 651: '0245547215', 652: '0883684152', 653: '1558744150', 654: '3499151499', 655: '0515127213', 656: '0140105662', 657: '3596118042', 658: '0886778441', 659: '0399145087', 660: '0452284449', 661: '0375758267', 662: '0811812618', 663: '0679723161', 664: '0441009832', 665: '037319045X', 666: '0770428940', 667: '0156028778', 668: '0865470545', 669: '0553251023', 670: '0671769421', 671: '0440178002', 672: '0553278029', 673: '0345378261', 674: '0786888067', 675: '0375504141', 676: '0380720175', 677: '0394507630', 678: '0142000396', 679: '0140430148', 680: '0345311922', 681: '1863597735', 682: '0373259883', 683: '0451452615', 684: '0553571818', 685: '3442454255', 686: '0886774616', 687: '351836605X', 688: '3492227694', 689: '0140303812', 690: '034543479X', 691: '0099218216', 692: '0425177173', 693: '084392389X', 694: '0394800893', 695: '0385312520', 696: '0786901462', 697: '3453009967', 698: '0192827588', 699: '0446363251', 700: '0812516478', 701: '0671010964', 702: '0684809311', 703: '0440122090', 704: '0823030148', 705: '0137450001', 706: '0671745069', 707: '0375706410', 708: '0671689762', 709: '0451408179', 710: '0515113816', 711: '0471133264', 712: '0440224780', 713: '036108000X', 714: '0679744479', 715: '0345459202', 716: '0515076279', 717: '0060187468', 718: '091847728X', 719: '0425167283', 720: '1575660504', 721: '0671746081', 722: '0553277936', 723: '0451411277', 724: '0722150849', 725: '0441132456', 726: '0394828186', 727: '0060531231', 728: '0671605364', 729: '0375703438', 730: '0399138226', 731: '0590433474', 732: '0440472016', 733: '0553379658', 734: '0821733877', 735: '0140186409', 736: '0689824351', 737: '0948661593', 738: '0553280570', 739: '0786703857', 740: '9512052873', 741: '3596148464', 742: '0882404822', 743: '044651912X', 744: '067101191X', 745: '0345378490', 746: 'B00009EF82', 747: '0671886665', 748: '0440221471', 749: '1551660148', 750: '0425167313', 751: '0352310901', 752: '0399134506', 753: '0316153982', 754: '0345350685', 755: '0440402913', 756: '0590477331', 757: '0380804697', 758: '0395647266', 759: '0385302304', 760: '0385258577', 761: '0689844077', 762: '0805007202', 763: '1400041732', 764: '0446610968', 765: '0373108656', 766: '0385504470', 767: '0821729861', 768: '0515132020', 769: '0821772872', 770: '0060092661', 771: '0515122491', 772: '3404147472', 773: '0380714418', 774: '0505523892', 775: '0609803700', 776: '059035342X', 777: '0393321983', 778: '0060971444', 779: '0395453909', 780: '0525943048', 781: '0449005615', 782: '2253059536', 783: '0486272818', 784: '0671875914', 785: '0676971954', 786: '0262220547', 787: '3492223818', 788: '0002713713', 789: '0385424728', 790: '0425105334', 791: '0515120006', 792: '0449003787', 793: '0330270001', 794: '0440907020', 795: '3423361808', 796: '0060508663', 797: '0345423097', 798: '0679642323', 799: '0446387207', 800: '1903402042', 801: '0515129941', 802: '0373790945', 803: '0836220854', 804: '0771592558', 805: '0312252250', 806: '0060168013', 807: '0671645412', 808: '0553278649', 809: '0140430059', 810: '289430.025.5', 811: '1565073541', 812: '1840186348', 813: '0618246940', 814: '0446364193', 815: '0380732688', 816: '0425181979', 817: '3803225108', 818: '0751305162', 819: '0380733390', 820: '0451207874', 821: '0312063776', 822: '0896227170', 823: '0393051250', 824: '0099739518', 825: '0892966610', 826: '1560760605', 827: '0373250142', 828: '0440208416', 829: '0060009225', 830: '0394742745', 831: '0671004549', 832: '0836218353', 833: '044651747X', 834: '0345427637', 835: '0871782294', 836: '0671041460', 837: '0451195922', 838: '0749319291', 839: '0553271466', 840: '0425137872', 841: '1573229326', 842: '038072118X', 843: '0836232615', 844: '0446606324', 845: '0345404319', 846: '0330318403', 847: '0064472876', 848: '0440407591', 849: '0440236053', 850: '9029528893', 851: '0786864133', 852: '0140328696', 853: '0553295780', 854: '0425188221', 855: '0425077837', 856: '0749395990', 857: '089471273X', 858: '0333375726', 859: '0743222245', 860: '3746616360', 861: '0671741187', 862: '1591160766', 863: '037312001X', 864: '1932080139', 865: '0521357306', 866: '0553029746', 867: '0758201346', 868: '0709702884', 869: '0452282152', 870: '0553291955', 871: '0805062734', 872: '078686351X', 873: '0425166929', 874: '8476344317', 875: '22773004602', 876: '0380007789', 877: '0446602736', 878: '0446670561', 879: '0385503822', 880: '051513628X', 881: '043965548X', 882: '0399141464', 883: '0812544404', 884: '0415909910', 885: '1563260220', 886: '0439147735', 887: '8476695543', 888: '0375707972', 889: '0553813285', 890: '080411109X', 891: '1234560302010', 892: '0345443683', 893: '0749309784', 894: '0425175405', 895: '037376474X', 896: '0440220742', 897: '0373074638', 898: '0142001740', 899: '0679454748', 900: '0345314980', 901: '0060290994', 902: '0877730431', 903: '0671777351', 904: '0688129625', 905: '0140441093', 906: '0373250657', 907: '0836220676', 908: '067102308X', 909: '0743417909', 910: '0671695126', 911: '0670032891', 912: '0743427742', 913: '0451203070', 914: '0679450432', 915: '9021494019', 916: '0373484429', 917: '849624699X', 918: '0553153153', 919: '0671501070', 920: '0440484332', 921: '0061099015', 922: '0380727609', 923: '0441000916', 924: '0060801921', 925: '0531300633', 926: '0316693006', 927: '0061093327', 928: '0312291639', 929: '1558744525', 930: '0452282829', 931: '1555610900', 932: '0425133249', 933: '0449006530', 934: '067152609X', 935: '0515134120', 936: '0671016652', 937: '1840235128', 938: '0345387023', 939: '671774859', 940: '0140119809', 941: '0440209633', 942: '0452280621', 943: '0151002630', 944: '0385334036', 945: '0671792806', 946: '0060520507', 947: '0802762743', 948: '0452283914', 949: '0440998050', 950: '0380012863', 951: '1569319014', 952: '354832021X', 953: '0764224301', 954: '0373706987', 955: '0375703055', 956: '0451209273', 957: '067101417X', 958: '0441068642', 959: '0310227542', 960: '0671661035', 961: '055357230X', 962: '0451450124', 963: '0070444226', 964: '0679748172', 965: '9727722458', 966: '0373288808', 967: '1893183025', 968: '0440213282', 969: '0671004530', 970: '1556700318', 971: '1864470119', 972: '006008460X', 973: '0060809337', 974: '0340429739', 975: '0345331605', 976: '1886444013', 977: '0870529161', 978: '0671648772', 979: '0451150937', 980: '0312859880', 981: '0061043915', 982: '0843947632', 983: '1857029402', 984: '0425129586', 985: '3407782438', 986: '044819094X', 987: '0345298616', 988: '0140321276', 989: '0425154882', 990: '0531157490', 991: '3505095834', 992: '0380525550', 993: '0552134619', 994: '0064462080', 995: '0670892742', 996: '0671001302', 997: '0451459067', 998: '0373227892', 999: '0425187403', 1000: '0842375066', 1001: '0395560012', 1002: '0373111029', 1003: '0785307907', 1004: '0552546933', 1005: '8817153567', 1006: '0140071768', 1007: '0449204138', 1008: '0449205878', 1009: '0060274069', 1010: '0671670409', 1011: '0446525774', 1012: '157673045X', 1013: '2070373703', 1014: '0812519671', 1015: '4234758691', 1016: '0394755588', 1017: '0316735027', 1018: '0451409159', 1019: '0061090301', 1020: '0312265859', 1021: '0373259549', 1022: '0375703764', 1023: '1560728914', 1024: '0821768417', 1025: '3548601863', 1026: '0312308639', 1027: '0789401746', 1028: '0140431268', 1029: '1841721522', 1030: '0966077814', 1031: '0380792494', 1032: '0831711868', 1033: '0439139597', 1034: '0688121195', 1035: '0590424394', 1036: '0373243286', 1037: '0141181230', 1038: '0553270060', 1039: '0064405710', 1040: '0385307888', 1041: '0449003701', 1042: '0393029980', 1043: '0385508042', 1044: '0060925787', 1045: '0060975547', 1046: '0373072449', 1047: '0671746065', 1048: '0140170480', 1049: '0553260804', 1050: '0972172335', 1051: '3471775609', 1052: '0440224101', 1053: '0515115630', 1054: '0671663143', 1055: '0590411365', 1056: '0385335555', 1057: '0842335684', 1058: '0515125628', 1059: '0553581295', 1060: '0345424050', 1061: '055325278X', 1062: '2277302112', 1063: '0891073906', 1064: '0396068278', 1065: '0060739444', 1066: '5602227300809', 1067: '0553267027', 1068: '0451135199', 1069: '0743225805', 1070: '0553299441', 1071: '0886777844', 1072: '0688165141', 1073: '0373166788', 1074: '0394859561', 1075: '0671007912', 1076: '0767918908', 1077: '0671797050', 1078: '0394223802', 1079: '0915811332', 1080: '0446357383', 1081: '0345392825', 1082: '8472230082', 1083: '0689825943', 1084: '0375504397', 1085: '0749316837', 1086: '0590720252', 1087: '0553279912', 1088: '0433396199', 1089: '055321246x', 1090: '0919591957', 1091: '0880704705', 1092: '0805012478', 1093: '0316861014', 1094: '0440224047', 1095: '0425182908', 1096: '0671027069', 1097: '9022304795', 1098: '0140263357', 1099: '0671028545', 1100: '0375727132', 1101: '0515118362', 1102: '0515118249', 1103: '0425191184', 1104: '1562054147', 1105: '0800611144', 1106: '0446823198', 1107: '0449003582', 1108: '0618065695', 1109: '0515090166', 1110: '2070392619', 1111: '0446679364', 1112: '0486218260', 1113: '0316815837', 1114: '0953589501', 1115: '0802138616', 1116: '0749306351', 1117: '0679410341', 1118: '1400034779', 1119: '0743480694', 1120: '0505524651', 1121: '0425147584', 1122: '0156004801', 1123: '0451203895', 1124: '1561440302', 1125: '0006137121', 1126: '0140112456', 1127: '081120118X', 1128: '0393034054', 1129: '0804108447', 1130: '0060916087', 1131: '0385141602', 1132: '0312983301', 1133: '0345391802', 1134: '0671011375', 1135: '0671880187', 1136: '0452264715', 1137: '3442725607', 1138: '082172987X', 1139: '8423310124', 1140: '0425180085', 1141: '0440224705', 1142: '0842329277', 1143: '0553258915', 1144: '0425182886', 1145: '0552771104', 1146: '158574185X', 1147: '0060171316', 1148: '0380818655', 1149: '1579547451', 1150: '0671670913', 1151: '0394890507', 1152: '0440162688', 1153: '006020883X', 1154: '0552996289', 1155: '0373708130', 1156: '1400032806', 1157: '0140441573', 1158: '0224018698', 1159: '1590520386', 1160: '0374129983', 1161: '0749397365', 1162: '0345441036', 1163: '067102437X', 1164: '042518286X', 1165: '0060192488', 1166: '0440213525', 1167: '0060509066', 1168: '0812921933', 1169: '0517883384', 1170: '0140187405', 1171: '1551668084', 1172: '0731800540', 1173: '0425098842', 1174: '0345423135', 1175: '0553580930', 1176: '0385242972', 1177: '0207189331', 1178: '0316107298', 1179: '043935806X', 1180: '0399149155', 1181: '0373115938', 1182: '0373098006', 1183: '0679419829', 1184: '0345348036', 1185: '0880389052', 1186: '0345433092', 1187: '037570485X', 1188: '0140280677', 1189: '0060525193', 1190: '0375707492', 1191: '0590448315', 1192: '0440234743', 1193: '0451197534', 1194: '0553250531', 1195: '8882271250', 1196: '006621470X', 1197: '0099282194', 1198: '0375714472', 1199: '0446601640', 1200: '0749733667', 1201: '0553294032', 1202: '0440224861', 1203: '0140293469', 1204: '0345339509', 1205: '0312985207', 1206: '0816708010', 1207: '0733534155', 1208: '0380720191', 1209: '0060153083', 1210: '067180720X', 1211: '0373825013', 1212: '0316142573', 1213: '0425181995', 1214: '0373168705', 1215: '051513175X', 1216: '0312979487', 1217: '0385418868', 1218: '0553576194', 1219: '0786707496', 1220: '0061057363', 1221: '9580600031', 1222: '0451408845', 1223: '0886775035', 1224: '0816720215', 1225: '0373290195', 1226: '0553577719', 1227: '0805029222', 1228: '0385484054', 1229: '0553584898', 1230: '3499100355', 1231: '0345298349', 1232: '0140041079', 1233: '0801061458', 1234: '1567314163', 1235: '0440131855', 1236: '0733517633', 1237: '0140481389', 1238: '044040665X', 1239: '0380717018', 1240: '0385313136', 1241: '1582341222', 1242: '0553562614', 1243: '0140865543', 1244: '1592798780', 1245: '0399146857', 1246: '185326041X', 1247: '0345343581', 1248: '0767916069', 1249: '3442447038', 1250: '0688066143', 1251: '0440995779', 1252: '0553296108', 1253: '0713638672', 1254: '0698118243', 1255: '0446607657', 1256: '0374292035', 1257: '0679455116', 1258: '0671000314', 1259: '0425081818', 1260: '1551666138', 1261: '0821741179', 1262: '3822814962', 1263: '0684822911', 1264: '0006545084', 1265: '0552142379', 1266: '0060977035', 1267: '0671039350', 1268: '0671527215', 1269: '0752843338', 1270: '0312968973', 1271: '8420427845', 1272: '0345408810', 1273: '0671684264', 1274: '0786889845', 1275: '067697175X', 1276: '0806961198', 1277: '0345333578', 1278: '0842384065', 1279: '0671543296', 1280: '0671705091', 1281: '0373123086', 1282: '0806625732', 1283: '0385297661', 1284: '0671578189', 1285: '0373762585', 1286: '0553802976', 1287: '0007144415', 1288: '055356174X', 1289: '034525855X', 1290: '055214276X', 1291: '0864923716', 1292: '0373226519', 1293: '0747563020', 1294: '0142800821', 1295: '0345371135', 1296: '0380726246', 1297: '0552997862', 1298: '0449907481', 1299: '0446675776', 1300: '3404149424', 1301: '0440784743', 1302: '006103004X', 1303: '0553578278', 1304: '0684829460', 1305: '0425173593', 1306: '0070485461', 1307: '1558176543', 1308: '2226035397', 1309: '0884416070', 1310: '0439409381', 1311: '0451192974', 1312: '0425136981', 1313: '044011408X', 1314: '0345404777', 1315: '0747542945', 1316: '1400041341', 1317: '0453008046', 1318: '8428901597', 1319: '141401354X', 1320: '0140113428', 1321: '0140293248', 1322: '1860541372', 1323: '0375505261', 1324: '0375507086', 1325: '0688166407', 1326: '0060937904', 1327: '0385335830', 1328: '0446677671', 1329: '042513525X', 1330: '0192823795', 1331: '1400031362', 1332: '0449704165', 1333: '3442452457', 1334: '0553089218', 1335: '0061098256', 1336: '0671867091', 1337: '0316601950', 1338: '1893964027', 1339: '0671319485', 1340: '0684868768', 1341: '0425153789', 1342: '0871138018', 1343: '0345314573', 1344: '0553287303', 1345: '0060179562', 1346: '0425161242', 1347: '1892051001', 1348: '0946238170', 1349: '8420633291', 1350: '0006531768', 1351: '0380732289', 1352: '0140433627', 1353: '0312980159', 1354: '0671854909', 1355: '0061092886', 1356: '0874495768', 1357: '070434100X', 1358: '0671698079', 1359: '0060502258', 1360: '0446602086', 1361: '0590437194', 1362: '0891076182', 1363: '0345389417', 1364: '0446519960', 1365: '0670260770', 1366: '2070384233', 1367: '0452274540', 1368: '9728423179', 1369: '0553574957', 1370: '028606639', 1371: '0553382225', 1372: '8845906876', 1373: '0906969778', 1374: '1555919669', 1375: '0345442822', 1376: '0553211951', 1377: '1575665727', 1378: '0312979886', 1379: '0330489461', 1380: '0345384911', 1381: '3453115937', 1382: '0316517305', 1383: '0385491832', 1384: '0155034731', 1385: '0064471837', 1386: '0679735259', 1387: '0743249925', 1388: '0151007829', 1389: '0345409264', 1390: '078671106X', 1391: '0062509594', 1392: '0380710218', 1393: '1853260789', 1394: '0345422511', 1395: '0743400755', 1396: '0440224853', 1397: '0064473627', 1398: '0316769487', 1399: '0373272960', 1400: '015668568X', 1401: '0553265741', 1402: '0060012331', 1403: '0440130913', 1404: '1577312112', 1405: '0553281933', 1406: '0373243790', 1407: '3451049023', 1408: '0316779237', 1409: '2070416801', 1410: '0451403789', 1411: '0684841347', 1412: '0061020060', 1413: '3936544166', 1414: '0446608955', 1415: '0425132951', 1416: '0061051578', 1417: '0449213447', 1418: '0156814161', 1419: '0590460560', 1420: '0753804700', 1421: '0425184226', 1422: '0385259417', 1423: '0140449159', 1424: '0446670324', 1425: '0812555104', 1426: '0345434110', 1427: '0440200563', 1428: '0394734157', 1429: '0385493800', 1430: '0345333810', 1431: '067176991X', 1432: '8472918777', 1433: '0553260960', 1434: '033026902X', 1435: '0399501487', 1436: '0771576439', 1437: '1559210354', 1438: '0446675903', 1439: '0805067523', 1440: '0771086636', 1441: '0786702729', 1442: '039914563X', 1443: '0671665987', 1444: '0345417623', 1445: '0425148270', 1446: '084395048X', 1447: '3885207001', 1448: '0373151861', 1449: '0061031143', 1450: '8807811936', 1451: '0812545206', 1452: '0028604199', 1453: '0373287690', 1454: '0425133540', 1455: '3404129210', 1456: '076790351X', 1457: '0373262221', 1458: '0451202503', 1459: '8483107945', 1460: '0446390380', 1461: '8501012076', 1462: '3404242106', 1463: '000647618X', 1464: '0718105141', 1465: '0804106304', 1466: '0316096199', 1467: '1552781291', 1468: '082171824X', 1469: '1582880751', 1470: '0373440936', 1471: '1840460962', 1472: '9721028800', 1473: '0671319760', 1474: '0440496039', 1475: '8877829060', 1476: '0345295250', 1477: '0486296466', 1478: '0151001006', 1479: '0553582135', 1480: '0553571702', 1481: '0060934417', 1482: '0140342621', 1483: '0747246262', 1484: '0811202070', 1485: '0440176190', 1486: '0395283493', 1487: '0373791062', 1488: '0505521814', 1489: '3451040220', 1490: '0394414683', 1491: '0345465083', 1492: '0517532530', 1493: '0060930535', 1494: '0451453328', 1495: '0553284118', 1496: '0385265700', 1497: '0805056491', 1498: '0571169341', 1499: '0701169303', 1500: '0966286030', 1501: '0805055908', 1502: '3822812862', 1503: '0446604100', 1504: '0764108484', 1505: '0451202279', 1506: '0451177010', 1507: '0140008535', 1508: '0156711427', 1509: '0451153634', 1510: '0515105643', 1511: '0061013927', 1512: '3608938052', 1513: '0061020613', 1514: '0849952484', 1515: '0425183971', 1516: '0385315309', 1517: '0425179648', 1518: '0553258362', 1519: '193148452X', 1520: '0879978503', 1521: '0345453409', 1522: '0060198125', 1523: '0140467270', 1524: '1858638852', 1525: '0671891510', 1526: '0862033616', 1527: '0553208845', 1528: '1931514984', 1529: '0399145702', 1530: '1557831785', 1531: '0140053204', 1532: '0064432270', 1533: '0706405390', 1534: '0804108528', 1535: '0345342968', 1536: '0747257620', 1537: '0140304452', 1538: '0439411874', 1539: '0425176312', 1540: '0671774670', 1541: '0316969443', 1542: '0451190572', 1543: '0452266777', 1544: '0819219126', 1545: '0312305311', 1546: '0451407539', 1547: '0446514063', 1548: '184149013X', 1549: '0345359941', 1550: '0786705418', 1551: '1573227749', 1552: '1573225126', 1553: '0345423402', 1554: '8432046361', 1555: '887782512X', 1556: '0671724819', 1557: '1860498833', 1558: '0440072484', 1559: '0330315838', 1560: '0451162331', 1561: '0446611808', 1562: '0446609323', 1563: '0786814934', 1564: '0064407683', 1565: '0671542133', 1566: '0891348417', 1567: '051513287X', 1568: '2.01.016221.8', 1569: '1897580428', 1570: '3.406420974', 1571: '0515132268', 1572: '2264006919', 1573: '0140269630', 1574: '0804114439', 1575: '0345433297', 1576: '0140282033', 1577: '082232220X', 1578: '074347032X', 1579: '2070407985', 1580: '0451205421', 1581: '0552138339', 1582: '0373107692', 1583: '3499261766', 1584: '082177221X', 1585: '0345347676', 1586: '0373263937', 1587: '0232519870', 1588: '0425148297', 1589: '0070227780', 1590: '0671776134', 1591: '0771086547', 1592: '074341232X', 1593: '1558612211', 1594: '0060931418', 1595: '0425163210', 1596: '0609809512', 1597: '1573225797', 1598: '8401466083', 1599: '0440241057', 1600: '0373030967', 1601: '0446520802', 1602: '1857027604', 1603: '0505522888', 1604: '0740743708', 1605: '0375728090', 1606: '1842230441', 1607: '0553112309', 1608: '037570177X', 1609: '0373833369', 1610: '0552770876', 1611: '0385313128', 1612: '0486406598', 1613: '0380732661', 1614: '0060187263', 1615: '0312179405', 1616: '0878577254', 1617: '3570006360', 1618: '3596215080', 1619: '0740719890', 1620: '0393314324', 1621: '9770390107900', 1622: '015694877X', 1623: '067188784X', 1624: '0553578359', 1625: '042514755X', 1626: '0679776338', 1627: '0451206002', 1628: '1887432981', 1629: '0886778581', 1630: '0345314255', 1631: '9724609995', 1632: '0380731231', 1633: '0486284999', 1634: '0316602906', 1635: '0345388593', 1636: '067180281X', 1637: '0792413180', 1638: '0395835852', 1639: '0425135020', 1640: '0517082373', 1641: '8807812576', 1642: '0374270325', 1643: '2877142248', 1644: '1588468178', 1645: '0486275574', 1646: '0671881612', 1647: '0440173701', 1648: '0517667746', 1649: '3442233070', 1650: '0425142485', 1651: '0671582704', 1652: '0446605360', 1653: '037322706X', 1654: '0743203399', 1655: '0345383818', 1656: '0262540428', 1657: '0373288972', 1658: '0380799383', 1659: '0380819635', 1660: '0375756981', 1661: '0062517856', 1662: '052594530X', 1663: '0373707142', 1664: '0747253102', 1665: '0679419462', 1666: '1576730824', 1667: '0373835868', 1668: '0712636102', 1669: '0743237188', 1670: '0375406530', 1671: '0345453395', 1672: '0671026305', 1673: '0523416083', 1674: '0747508755', 1675: '0345453549', 1676: '038079635X', 1677: '0671003593', 1678: '0451524667', 1679: '0553582127', 1680: '0684833492', 1681: '0373218397', 1682: '0894710737', 1683: '0312695276', 1684: '0452284287', 1685: '0671035630', 1686: '0743417682', 1687: '0312981457', 1688: '0805462716', 1689: '0553247239', 1690: '0553580078', 1691: '0140264795', 1692: '0312981260', 1693: '044661095X', 1694: '0671516922', 1695: '000651202X', 1696: '076615009998', 1697: '0440221099', 1698: '0802116094', 1699: '1558584536', 1700: '0786880953', 1701: '1585422762', 1702: '1551669315', 1703: '0671732277', 1704: '0684872153', 1705: '0345386108', 1706: '0517525380', 1707: '1885211066', 1708: '0330482165', 1709: '0330337394', 1710: '0314852999', 1711: '0140017917', 1712: '0765349671', 1713: '0307082806', 1714: '0446611778', 1715: '350251156X', 1716: '0394585852', 1717: '0380008130', 1718: '0140279806', 1719: '0312864590', 1720: '0553573136', 1721: '0312274920', 1722: '9516430929', 1723: '0671922548', 1724: '0440180201', 1725: '3404131606', 1726: '0316779075', 1727: '0399143165', 1728: '3492229700', 1729: '067944999X', 1730: '0441775594', 1731: '0843953098', 1732: '9724408957', 1733: '0590320068', 1734: '2038714509', 1735: '0879735775', 1736: '0525464417', 1737: '0895773953', 1738: '0679767398', 1739: '3596224284', 1740: '0688052851', 1741: '051764181X', 1742: '0894800159', 1743: '0812565959', 1744: '0886465346', 1745: '068984588X', 1746: '042517400X', 1747: '0440181259', 1748: '0449208281', 1749: '0375420975', 1750: '0140307044', 1751: '1551668696', 1752: '9722319345', 1753: '0312181728', 1754: '0451188039', 1755: '1560730013', 1756: '0451404416', 1757: '0671028448', 1758: '0823003345', 1759: '0380599236', 1760: '0671880314', 1761: '0060008032', 1762: '0441010091', 1763: '0448095297', 1764: '0451183681', 1765: '0380008378', 1766: '0671461494', 1767: '8484502864', 1768: '0061059730', 1769: '0099154102', 1770: '3518366467', 1771: '0441023800', 1772: '0345446860', 1773: '081181503X', 1774: '0821769839', 1775: '0765344963', 1776: '039923621X', 1777: '1570062145', 1778: '0373105533', 1779: '8830419788', 1780: '0312317751', 1781: '0312877706', 1782: '0553579274', 1783: '0933585071', 1784: '0684844753', 1785: '0345435168', 1786: '0812531353', 1787: '0679879242', 1788: '0312267177', 1789: '0553250426', 1790: '0778320375', 1791: '0871592614', 1792: '006095101X', 1793: '0789473631', 1794: '0515133302', 1795: '0044409281', 1796: '0671004565', 1797: '0913668273', 1798: '0312187459', 1799: '0312865783', 1800: '0752848062', 1801: '0395606497', 1802: '0340750626', 1803: '0373763387', 1804: '0449217264', 1805: '0515121843', 1806: '0070064520', 1807: '042516098X', 1808: '1566192943', 1809: '0061031070', 1810: '038070899X', 1811: '0446613266', 1812: '0370317300', 1813: '0679756760', 1814: '0192816209', 1815: '0345381017', 1816: '0395291305', 1817: '0515095826', 1818: '0141306971', 1819: '0373765304', 1820: '0316641723', 1821: '0375422072', 1822: '0201050714', 1823: '1558212574', 1824: '0525938265', 1825: '0842321942', 1826: '0446612545', 1827: '0373230176', 1828: '1853260452', 1829: '0380721643', 1830: '0140328238', 1831: '3404615247', 1832: '0553293281', 1833: '0385484518', 1834: '0380613255', 1835: '0156011603', 1836: '0451177096', 1837: '2070518426', 1838: '0451205685', 1839: '0743436210', 1840: '0425174271', 1841: '0345458303', 1842: '0312859279', 1843: '0441715923', 1844: '0345330315', 1845: '0099283360', 1846: '0316606081', 1847: '014230218X', 1848: '0805073205', 1849: '0373763980', 1850: '0590415069', 1851: '0553267663', 1852: '0688083390', 1853: '8401341558', 1854: '0553580191', 1855: '0006479898', 1856: '0380730375', 1857: '0671882678', 1858: '0061091316', 1859: '0515085154', 1860: '0671868365', 1861: '0515040460', 1862: '8434816903', 1863: '0373096216', 1864: '0062500260', 1865: '0747254001', 1866: '0312980140', 1867: '0737303875', 1868: '039486056X', 1869: '0671877437', 1870: '0060509570', 1871: '0590332104', 1872: '0451131398', 1873: '0373218036', 1874: '0520223047', 1875: '0399151273', 1876: '1568381891', 1877: '01420.01740', 1878: '0671002481', 1879: '0590350072', 1880: '0449236552', 1881: '0552135615', 1882: '0590996835', 1883: '0743400518', 1884: '0061091561', 1885: '0684837455', 1886: '0553569791', 1887: '0451156609', 1888: '0767915054', 1889: '0385720920', 1890: '0671439162', 1891: '0811819167', 1892: '0316289590', 1893: '0440502675', 1894: '0061015725', 1895: '0840790783', 1896: '0373484879', 1897: '0451208811', 1898: '352217092X', 1899: '0805042474', 1900: '3442161177', 1901: '0553230212', 1902: '1400031354', 1903: '0345404114', 1904: '006092859X', 1905: '0425071804', 1906: '184115458X', 1907: '0889711844', 1908: '0451170911', 1909: '0449002071', 1910: '081297106X', 1911: '0312169655', 1912: '0812571576', 1913: '1562828444', 1914: '0140348263', 1915: '0671738623', 1916: '0843949899', 1917: '3442442516', 1918: '0816745404', 1919: '0563551356', 1920: '9725645553', 1921: '902452346', 1922: '0930031741', 1923: '8401530423', 1924: '0684827107', 1925: '0441004768', 1926: '0373245459', 1927: '0671027123', 1928: '0866119574', 1929: '0312860552', 1930: '0446607193', 1931: '0965834581', 1932: '0553573837', 1933: '0064471101', 1934: '0441094147', 1935: '0767903579', 1936: '0743403819', 1937: '0553272535', 1938: '0446530891', 1939: '0440498058', 1940: '0440240751', 1941: '0671784161', 1942: '006093221X', 1943: '0671024035', 1944: '0553582526', 1945: '0380722607', 1946: '0842386882', 1947: '0440240875', 1948: '0453008739', 1949: '0425126064', 1950: '8870428915', 1951: '0590458949', 1952: '0140179496', 1953: '0345370775', 1954: '0451201736', 1955: '0060971177', 1956: '006447027X', 1957: '0395551137', 1958: '0373835825', 1959: '0373121458', 1960: '0140181881', 1961: '0912365307', 1962: '158542093X', 1963: '038097536X', 1964: '0060004746', 1965: '0440219035', 1966: '0440219078', 1967: '0753403919', 1968: '3453033825', 1969: '0425178765', 1970: '0140431209', 1971: '0821715704', 1972: '0575073055', 1973: '0380793660', 1974: '0590430149', 1975: '0671612689', 1976: '0340770449', 1977: '0385720955', 1978: '0380722275', 1979: '0201489988', 1980: '0312246528', 1981: '8879834835', 1982: '0385499345', 1983: '0345436121', 1984: '187052800X', 1985: '0553246070', 1986: '0943641187', 1987: '0882669273', 1988: '0743407083', 1989: '0807083178', 1990: '0099245027', 1991: '0425158616', 1992: '0684857014', 1993: '0804111898', 1994: '0809020483', 1995: '0805019359', 1996: '055325555X', 1997: '0899199089', 1998: '0451151224', 1999: '0385335237', 2000: '0786004150', 2001: '0060970790', 2002: '0486282147', 2003: '0060184949', 2004: '0345335465', 2005: '9706078649', 2006: '0896380645', 2007: '0375407375', 2008: '0786880007', 2009: '0373292538', 2010: '0721705626', 2011: '8401240301', 2012: '1892284898', 2013: '015611870X', 2014: '0553578944', 2015: '0786882662', 2016: '0345433491', 2017: '0749397543', 2018: '0671620991', 2019: '0385475721', 2020: '0440400759', 2021: '9176434362', 2022: '0062513095', 2023: '0140449302', 2024: '0446603503', 2025: '0553265520', 2026: '0671896768', 2027: '0345339738', 2028: '0373484100', 2029: '0394925718', 2030: '0743467523', 2031: '0684856220', 2032: '059045854X', 2033: '0552137189', 2034: '0425057623', 2035: '044652087X', 2036: '0871352451', 2037: '0385605870', 2038: '0743219562', 2039: '0375506233', 2040: '8408046055', 2041: '0373244290', 2042: '0440207770', 2043: '0440931800', 2044: '0811831620', 2045: '1551052377', 2046: '0380792486', 2047: '0439136350', 2048: '1931561648', 2049: '0380723816', 2050: '0570427690', 2051: '0385324081', 2052: '0141314869', 2053: '078688939X', 2054: '0373077408', 2055: '0373036884', 2056: '0884051366', 2057: '0060578955', 2058: '0451188543', 2059: '038001002X', 2060: '0515118230', 2061: '074323748X', 2062: '0553212710', 2063: '0142000205', 2064: '0451078721', 2065: '0380556812', 2066: '0425188132', 2067: '0803279337', 2068: '1551668912', 2069: '087930703X', 2070: '044022103X', 2071: '0880707798', 2072: '0449218929', 2073: '1863861807', 2074: '0385510438', 2075: '156282144X', 2076: '037570406X', 2077: '1558174354', 2078: '0340770112', 2079: '0385722206', 2080: '0451179765', 2081: '088029261X', 2082: '0676972411', 2083: '0446606960', 2084: '8495094096', 2085: '0553250698', 2086: '0440204933', 2087: '3404920481', 2088: '155874262X', 2089: '1562470760', 2090: '0007128568', 2091: '0743422287', 2092: '0345452003', 2093: '0886776260', 2094: '0671510053', 2095: '2253010316', 2096: '0451521730', 2097: '2842057120', 2098: '17224918', 2099: '0451403916', 2100: '0552998036', 2101: '0886777038', 2102: '0743411838', 2103: '0452280826', 2104: '1575663147', 2105: '344230442', 2106: '0590568795', 2107: '0811808173', 2108: '0140291091', 2109: '0060976845', 2110: '0812534050', 2111: '0451117298', 2112: '1576750337', 2113: '1555834310', 2114: '006019250X', 2115: '0385313667', 2116: '0439288886', 2117: '0060392452', 2118: '0440236703', 2119: '0552146080', 2120: '037325900X', 2121: '0671676350', 2122: '0440222052', 2123: '0451158164', 2124: '0312983417', 2125: '0425109720', 2126: '0373055285', 2127: '0373112262', 2128: '0152337016', 2129: '0465081991', 2130: '0375401598', 2131: '3596233704', 2132: '0425168697', 2133: '055357227X', 2134: '0761537295', 2135: '0747550999', 2136: '0306811049', 2137: '0590980335', 2138: '0425166112', 2139: '0140714545', 2140: '0140051244', 2141: 'N0553212583>>', 2142: '3442455286', 2143: '0671028367', 2144: '0451168690', 2145: '0345388429', 2146: '0062518054', 2147: '1573227331', 2148: '0899193145', 2149: '2253140872', 2150: '0449200531', 2151: '0553581856', 2152: '0345461983', 2153: '1551667231', 2154: '0385490992', 2155: '0520087550', 2156: '0821763792', 2157: '0891095004', 2158: '0749301015', 2159: '1862041164', 2160: '0807009180', 2161: '1551669021', 2162: '0373710429', 2163: '0758202725', 2164: '0312104235', 2165: '0831759291', 2166: '087113375X', 2167: '3404150554', 2168: '0804105820', 2169: '0671047515', 2170: '0767902836', 2171: '059043652X', 2172: '0395549701', 2173: '1551667916', 2174: '0873375661', 2175: '0688162827', 2176: '0751506761', 2177: '0380017555', 2178: '0399139125', 2179: '0345339703', 2180: '1567181686', 2181: '0515136824', 2182: '0770104835', 2183: '8402042414', 2184: '0449218201', 2185: '0553293567', 2186: '1570428581', 2187: '0822507099', 2188: '0865730393', 2189: '0061000027', 2190: '0671229265', 2191: '0140174664', 2192: '0969276818', 2193: '0316782505', 2194: '0345402871', 2195: '0380007509', 2196: '0393978818', 2197: '0451166582', 2198: '0380792559', 2199: '0449227545', 2200: '0312965338', 2201: '0670910236', 2202: '0396090788', 2203: '0425192733', 2204: '0399147373', 2205: '9001549209', 2206: '3257061269', 2207: '0525944885', 2208: '0671458132', 2209: '0553269453', 2210: '0316666009', 2211: '0671701592', 2212: '0449148734', 2213: '0671721623', 2214: '0553381512', 2215: '051512608X', 2216: '0684857162', 2217: '3551015023', 2218: '0670894508', 2219: '0394402294', 2220: '0679429220', 2221: '1561790419', 2222: '0761105417', 2223: '0671041789', 2224: '0445045965', 2225: '0380803232', 2226: '1551667959', 2227: '6941571098', 2228: '0553572423', 2229: '0671577050', 2230: '0451453573', 2231: '082173346X', 2232: '0553351370', 2233: '0684865742', 2234: '0786000031', 2235: '1564771989', 2236: '0842335978', 2237: '0517585154', 2238: '0064400808', 2239: '0060176075', 2240: '0446531413', 2241: '0061094595', 2242: '0553299662', 2243: '0312952813', 2244: '0373245556', 2245: '051510566X', 2246: '0590254677', 2247: '0804111154', 2248: '0451192338', 2249: '042507160X', 2250: '0132422077', 2251: '2912042615', 2252: '2207234398', 2253: '0915658119', 2254: '0671796607', 2255: '1880985055', 2256: '0140074902', 2257: '0006392172PBK', 2258: '355203921X', 2259: '0399151451', 2260: '0439271525', 2261: '0385157045', 2262: '0425062856', 2263: '0913668680', 2264: '0446515485', 2265: '1740590120', 2266: '0064472531', 2267: '042516019X', 2268: '0380797658', 2269: '0440226430', 2270: '0312959249', 2271: '080411868X', 2272: '0533269631', 2273: '0743247752', 2274: '0062737384', 2275: '1558175938', 2276: '0451197410', 2277: '9029041900', 2278: '0373825064', 2279: '0061054151', 2280: '0312867689', 2281: '0451210557', 2282: '0380820536', 2283: '8422645513', 2284: '0345342399', 2285: '0152012397', 2286: '0908990715', 2287: '2070367592', 2288: '0380754843', 2289: '1556112726', 2290: '0590691783', 2291: '0449221032', 2292: '0743474325', 2293: '0446670332', 2294: '0380771543', 2295: '0373291493', 2296: '0760732639', 2297: '075530022X', 2298: '0140100180', 2299: '0446365114', 2300: '0552128481', 2301: '0425175111', 2302: '0917726650', 2303: '0446512958', 2304: '3453032780', 2305: '0440170796', 2306: '0316726583', 2307: '0451526767', 2308: '0872261670', 2309: '0671672878', 2310: '0307119734', 2311: '0670899879', 2312: '067976657X', 2313: '0440066565', 2314: '0373218753', 2315: '1565650255', 2316: '0375751564', 2317: '0060513543', 2318: '1854105876', 2319: '0312140991', 2320: '0373094671', 2321: '1580170900', 2322: '0590972103', 2323: '0330271474', 2324: '1880323869', 2325: '031208188X', 2326: '0816727953', 2327: '0425178064', 2328: '0881849456', 2329: '0399147535', 2330: '0785310304', 2331: '0812543432', 2332: '0553581279', 2333: '0373871597', 2334: '0452277205', 2335: '0395977711', 2336: '0415900026', 2337: '1889893544', 2338: '0806524103', 2339: '1585673293', 2340: '0375401601', 2341: '0898793912', 2342: '0349103232', 2343: '0140275290', 2344: '0373273436', 2345: '0373625243', 2346: '0802139736', 2347: '0345404769', 2348: '0743255429', 2349: '0553579835', 2350: '1567189660', 2351: '0679416730', 2352: '3257200552', 2353: '06718995466', 2354: '0821750895', 2355: '044661064X', 2356: '0425052427', 2357: '0679454470', 2358: '0688009816', 2359: '3426630966', 2360: '0373092326', 2361: '0441790348', 2362: '0743463862', 2363: '0399148515', 2364: '0440225701', 2365: '0486275426', 2366: '3548256007', 2367: '0684814021', 2368: '0684832178', 2369: '0671502522', 2370: '0006176909', 2371: '0679734457', 2372: '0440236983', 2373: '0312141378', 2374: '0312950950', 2375: '0783500122', 2376: '0451208501', 2377: '0064400034', 2378: '0345443284', 2379: '0812515560', 2380: '031213150X', 2381: '1400031346', 2382: '0312119240', 2383: '037582233X', 2384: '3442430070', 2385: '0440211891', 2386: '0806125713', 2387: '0373706367', 2388: '051512088X', 2389: '0771089589', 2390: '0060987561', 2391: '067943559X', 2392: '0449223345', 2393: '0345417976', 2394: '1401300014', 2395: '0140622446', 2396: '0671883410', 2397: '0006512135', 2398: '0394729854', 2399: '0099460351', 2400: '0380698919', 2401: '0440552966', 2402: '0061092029', 2403: '0517565188', 2404: '0307101142', 2405: '0440183669', 2406: '0515122734', 2407: '0590456466', 2408: '0330285939', 2409: '0743482980', 2410: '0812535065', 2411: '0345400674', 2412: '1400060737', 2413: '087905963X', 2414: '0671778633', 2415: '0812570936', 2416: '1841952753', 2417: '0752842994', 2418: '0345362632', 2419: '0449204553', 2420: '0671027743', 2421: '0060555513', 2422: '0380731185', 2423: '3822504998', 2424: '3442711797', 2425: '0553569570', 2426: '8440632185', 2427: '0373289936', 2428: '0671795554', 2429: '0689866682', 2430: '0345431189', 2431: '0679312420', 2432: '0739307444', 2433: '0586045368', 2434: '0140186476', 2435: '1565070003', 2436: '0380710404', 2437: '3100102045', 2438: '0684841258', 2439: '0747242895', 2440: '0312421273', 2441: '0415110874', 2442: '0449146030', 2443: '0449003981', 2444: '0440217563', 2445: '0758200757', 2446: '055344056X', 2447: '0399144463', 2448: '0425197123', 2449: '039452389X', 2450: '0451141083', 2451: '0060505885', 2452: '0871138328', 2453: '0486245462', 2454: '0060007192', 2455: '0915132761', 2456: '0689828896', 2457: '0345364279', 2458: '0061054720', 2459: '0679752455', 2460: '0553579606', 2461: '0887390390', 2462: '0940625261', 2463: '0448095238', 2464: '1561450022', 2465: '0140389660', 2466: '0316707414', 2467: '068484267X', 2468: '0671042513', 2469: '0099356309', 2470: '8420441708', 2471: '0380704498', 2472: '038548951X', 2473: '3423128801', 2474: '0373195192', 2475: '0380802937', 2476: '0375821813', 2477: '0812550285', 2478: '2290319937', 2479: '0684842319', 2480: '2020580411', 2481: '0380709902', 2482: '0671648136', 2483: '0679448594', 2484: '3426608049', 2485: '0345346491', 2486: '1551667304', 2487: '0449909662', 2488: '033031582X', 2489: '0517185040', 2490: '8422622769', 2491: '0670878073', 2492: '0517574977', 2493: '0860074382', 2494: '2070712001', 2495: '031224262X', 2496: '0859695603', 2497: '0446608815', 2498: '0060187905', 2499: '0373610645', 2500: '0440509157', 2501: '0679420231', 2502: '0449221873', 2503: '0312144075', 2504: '0440241073', 2505: '0141001844', 2506: '1881098184', 2507: '0689838646', 2508: '0006174671', 2509: '051511264X', 2510: '0671247484', 2511: '0743206029', 2512: '0671578073', 2513: '0375412530', 2514: '0553482491', 2515: '0684195984', 2516: '0446403229', 2517: '0425178900', 2518: '0312983271', 2519: '0553074938', 2520: '0380810468', 2521: '0140447210', 2522: '0028604458', 2523: '0307100197', 2524: '0307070034', 2525: '0312925883', 2526: '074992277X', 2527: '0373653131', 2528: '0670031909', 2529: '0679456376', 2530: '067179938X', 2531: '3423130202', 2532: '8466616845', 2533: '0192828851', 2534: '0312966210', 2535: '0425175367', 2536: '0670031453', 2537: '0312979770', 2538: '8431522550', 2539: '0505525151', 2540: '063113896X', 2541: '0515130966', 2542: '9721034525', 2543: '0140029524', 2544: '0671041622', 2545: '0553055224', 2546: '0140445560', 2547: '067945540X', 2548: '1853260495', 2549: '0782119670', 2550: '0679745238', 2551: '3770145909', 2552: '1860243215', 2553: '0380756293', 2554: '0061030651', 2555: '0836213122', 2556: '0312924313', 2557: '0451169557', 2558: '006109286X', 2559: '0553209191', 2560: '077104206X', 2561: '0307602230', 2562: '0882704605', 2563: '0684801469', 2564: '0878572708', 2565: '039914062X', 2566: '039912764X', 2567: '0330029665', 2568: '0553051628', 2569: '0345409272', 2570: '0345327454', 2571: '0515132136', 2572: '0915765438', 2573: '0061041300', 2574: '0373095821', 2575: '0671027522', 2576: '0553569074', 2577: '0380808080', 2578: '2070378144', 2579: '0061054801', 2580: '0553210793', 2581: '8804328088', 2582: '9727595375', 2583: '0671026372', 2584: '0515133876', 2585: '0812065905', 2586: '8804366419', 2587: '0060195703', 2588: '0373707932', 2589: '0061098388', 2590: '0671028383', 2591: '0525947302', 2592: '0671042580', 2593: '0874776945', 2594: '0060928336', 2595: '0525448667', 2596: '0380818973', 2597: '0746026994', 2598: '0312982194', 2599: '8470176986', 2600: '0816710503', 2601: '0451401859', 2602: '0140390243', 2603: '0679752684', 2604: '0972016430', 2605: '0553280341', 2606: '3502391750', 2607: '0804101787', 2608: '0451210891', 2609: '0316777730', 2610: '0156762404', 2611: '0140620869', 2612: '0553213067', 2613: '0066621054', 2614: '0812585151', 2615: '0448089033', 2616: '97245146089', 2617: '0312134665', 2618: '0140066640', 2619: '0446358592', 2620: '0449221431', 2621: '0330392611', 2622: '3442245702', 2623: '0026885522', 2624: '0446602191', 2625: '0395732565', 2626: '0756400163', 2627: '0373271174', 2628: '0312150601', 2629: '0393319296', 2630: '0316110078', 2631: '0821714422', 2632: '0553573403', 2633: '0747260583', 2634: '3451042231', 2635: '0712602682', 2636: '0452259436', 2637: '0553382179', 2638: '0140239820', 2639: '1575001438', 2640: '0763608858', 2641: '0771099894', 2642: '0804111359', 2643: '0733539467', 2644: '0609601245', 2645: '0446365661', 2646: '8408043641', 2647: '0821772341', 2648: '0375401156', 2649: '0894840053', 2650: '0765703009', 2651: '0552526495', 2652: '0373029586', 2653: '0312980167', 2654: '0399148027', 2655: '0440212812', 2656: '1561449822', 2657: '0553299204', 2658: '0446360856', 2659: '0670886955', 2660: '0345327411', 2661: '0449225151', 2662: '0440110653495', 2663: '3499128624', 2664: '0446601241', 2665: '067165831X', 2666: '0374461554', 2667: '0385486804', 2668: '039457513X', 2669: '0449911845', 2670: '0141311312', 2671: '0140035206', 2672: '0375724834', 2673: '0446604658', 2674: '0449123871', 2675: '0440235464', 2676: '0373162510', 2677: '1551665859', 2678: '1551667118', 2679: '0590926675', 2680: '1852490632', 2681: '0385152183', 2682: '1570420297', 2683: '3423202327', 2684: '1573229385', 2685: '0831796197', 2686: '0142000663', 2687: '0708837298', 2688: '0446358754', 2689: '1400061776', 2690: '8440657579', 2691: '1581950179', 2692: '0553057456', 2693: '0345434943', 2694: '038515903X', 2695: '0517571889', 2696: '0449223043', 2697: '8838913382', 2698: '0843953101', 2699: '0812509250', 2700: '8433012045', 2701: '1551669498', 2702: '9724610667', 2703: '0943151031', 2704: '0590455788', 2705: '0307220095', 2706: '0553284673', 2707: '0446676500', 2708: '0373872089', 2709: '0743444493', 2710: '1853043133', 2711: '0312932081', 2712: '0840339402', 2713: '450023923', 2714: '3776621125', 2715: '1551580004', 2716: '0821766767', 2717: '0895771039', 2718: '038550926X', 2719: '0312154771', 2720: '0345311396', 2721: '0312318685', 2722: '0140563628', 2723: '0967905281', 2724: '887684760X', 2725: '0440227372', 2726: '0876058411', 2727: '0553277537', 2728: '0722509049', 2729: '0066209463', 2730: '0373872437', 2731: '3499115832', 2732: '9722011685', 2733: '0340734701', 2734: '0385511612', 2735: '0843942991', 2736: '0716601745', 2737: '3453863593', 2738: '0156006006', 2739: '0521293898', 2740: '067168972X', 2741: '0552131059', 2742: '0874180392', 2743: '0373440898', 2744: '0140437673', 2745: '0395252237', 2746: '0446323144', 2747: '0330284835', 2748: '0757300006', 2749: '0553171151', 2750: '342310905X', 2751: '0552991309', 2752: '0679426620', 2753: '0394525280', 2754: '0446520888', 2755: '88044999095', 2756: '8495359103', 2757: '1565999916', 2758: '058604468X', 2759: '0373241186', 2760: '8433912739', 2761: '0373218400', 2762: '0877054924', 2763: '0440206154', 2764: '0451200187', 2765: '0451176723', 2766: '186450062x', 2767: '055358023X', 2768: '0446356050', 2769: '042516876X', 2770: '8470411098', 2771: '1551662795', 2772: '0312876629', 2773: '0812540336', 2774: '0747401268', 2775: '0140042601', 2776: '1857090152', 2777: '0312983867', 2778: '000714346X', 2779: '0399144714', 2780: '0060191821', 2781: '0812574923', 2782: '0345340957', 2783: '0525947299', 2784: '3720516652', 2785: '0452266637', 2786: '8878246522', 2787: '0060959436', 2788: '0441005837', 2789: '0821776398', 2790: '0671502689', 2791: '0671698338', 2792: '3404142942', 2793: '0712623884', 2794: '8879830597', 2795: '0810907364', 2796: '0440211263', 2797: '1556610351', 2798: '0553278827', 2799: '0553282808', 2800: '0451197038', 2801: '0440234727', 2802: '44900466075', 2803: '0771087373', 2804: '0373168543', 2805: '0373288026', 2806: '0552996009', 2807: '0450571130', 2808: '0451160444', 2809: '8877820535', 2810: '0812550862', 2811: '0006473024', 2812: '0671568175', 2813: '039457656X', 2814: '0099485419', 2815: '081257639X', 2816: '2070407527', 2817: '0449147517', 2818: '0399150838', 2819: '0671529412', 2820: '0142002623', 2821: '0764120581', 2822: '0330375253', 2823: '140003065X', 2824: '1585421758', 2825: '0345333748', 2826: '3455042139', 2827: '3453160363', 2828: '1590888391', 2829: '0060262478', 2830: '0590452037', 2831: '0861637534', 2832: '0743411269', 2833: '0743410335', 2834: '0440400449', 2835: '0446356018', 2836: '0631221204', 2837: '0671021001', 2838: '0671011618', 2839: '0452281784', 2840: '0771087586', 2841: '0345296702', 2842: '8401491029', 2843: '8846818938', 2844: '0446600768', 2845: '0451524500', 2846: '0446600792', 2847: '0671007718', 2848: '0783548303', 2849: '0399147195', 2850: '0671024094', 2851: '0399215360', 2852: '0590460153', 2853: '0141309210', 2854: '0747267626', 2855: '0786015233', 2856: '0966891945', 2857: '092077525X', 2858: '0449701751', 2859: '193168605X', 2860: '0140124896', 2861: '0373226322', 2862: '0345385950', 2863: '1586480324', 2864: '0060935464', 2865: '0310284619', 2866: '067188414X', 2867: '0446608033', 2868: '0582003288', 2869: '0375703063', 2870: '0440800544', 2871: '3518112686', 2872: '0060199652', 2873: '0679723110', 2874: '0380762609', 2875: '0140292683', 2876: '0836221362', 2877: '0340187859', 2878: '0812589165', 2879: '1555031315', 2880: '1565890442', 2881: '0140279105', 2882: '0130815667', 2883: '226403629X', 2884: '0969419430', 2885: '0553142003', 2886: '0880382546', 2887: '044017161X', 2888: '0671034677', 2889: '0440214165', 2890: '080410526X', 2891: '0553572202', 2892: '0060294655', 2893: '0373153279', 2894: '0446610550', 2895: '055327838X', 2896: '1551667037', 2897: '055328942X', 2898: '0399149384', 2899: '0688167888', 2900: '0061011843', 2901: '0553801279', 2902: '0373218060', 2903: '0345403916', 2904: '0446674249', 2905: '1882723058', 2906: '0060263857', 2907: '0877017883', 2908: '1576731235', 2909: '0439130204', 2910: '0425180239', 2911: '050552466X', 2912: '0140067477', 2913: '190315510X', 2914: '0340793708', 2915: '0919345182', 2916: '0821776037', 2917: '0449147738', 2918: '1551665344', 2919: '0747521018', 2920: '0399136495', 2921: '0688146910', 2922: '0449906515', 2923: '0571209874', 2924: '039332303X', 2925: '0440213185', 2926: '0099482002', 2927: '1563891050', 2928: '0446600474', 2929: '3596223946', 2930: '0679761047', 2931: '0435910078', 2932: '0425113884', 2933: '002542730X', 2934: '00065146218', 2935: '0373077467', 2936: '1550135759', 2937: '0439222265', 2938: '0743257480', 2939: '0345444884', 2940: '2207238520', 2941: '0061099708', 2942: '1574301039', 2943: '0380806304', 2944: '0747274134', 2945: '0786885971', 2946: '0307171434', 2947: '0440222877', 2948: '0140430962', 2949: '0553375407', 2950: '0525243828', 2951: '0812571762', 2952: '0027092305', 2953: '0446602612', 2954: '9501512916', 2955: '0670030449', 2956: '0821768379', 2957: '070640985X', 2958: '0671726889', 2959: '0060264306', 2960: '1871744105', 2961: '8879830546', 2962: '0060987103', 2963: '0747249180', 2964: '1844262553', 2965: '3404257049', 2966: '0520046552', 2967: '0451450523', 2968: '0446608106', 2969: '0373114206', 2970: '0452276721', 2971: '0778320308', 2972: '0141013087', 2973: '8467004975', 2974: '0451455991', 2975: '0553581481', 2976: '0385334834', 2977: '0743235355', 2978: '0156787334', 2979: '0671898604', 2980: '0440200172', 2981: '037322583', 2982: '0380713985', 2983: '0671568183', 2984: '0446608262', 2985: '1551660717', 2986: '044651862X', 2987: '0671739786', 2988: '0439440629', 2989: '034542252X', 2990: '0312089295', 2991: '0452283035', 2992: '0553239341', 2993: '0842357912', 2994: '0060508302', 2995: '0773759069', 2996: '0553573616', 2997: '0451160533', 2998: '038049163X', 2999: '0840751877', 3000: '0590877518', 3001: '1886801096', 3002: '0060955775', 3003: '067152044X', 3004: '0965046907', 3005: '0691019339', 3006: '0425130711', 3007: '0451203453', 3008: '0553575384', 3009: '0765304856', 3010: '0679721827', 3011: '0515106402', 3012: '0373832958', 3013: '349913599X', 3014: '0821773976', 3015: '0451625676', 3016: '0586044345', 3017: '0671673688', 3018: '0689815158', 3019: '0142000361', 3020: '0689805985', 3021: '0345380479', 3022: '0884046532', 3023: '8432207330', 3024: '0553576798', 3025: '0843138092', 3026: '0394896254', 3027: '067187098X', 3028: '0486243338', 3029: '0140244824', 3030: '0553568728', 3031: '0345461711', 3032: '0440150795', 3033: '0440141168', 3034: '0349109435', 3035: '0440407079', 3036: '0449219550', 3037: '0890431337', 3038: '0142001384', 3039: '0385073534', 3040: '0070089698', 3041: '0385507941', 3042: '0521468760', 3043: '0441569595', 3044: '0345325605', 3045: '0821759450', 3046: '1578700418', 3047: '0373122160', 3048: '0747557918', 3049: '0590551930', 3050: '0140430083', 3051: '1875058060', 3052: '0345434692', 3053: '0553585177', 3054: '0064400557', 3055: '0451409736', 3056: '0553256459', 3057: '1573225517', 3058: '3462026545', 3059: '0486284670', 3060: '0380718340', 3061: '0812502493', 3062: '0446609943', 3063: '0030574862', 3064: '0842339760', 3065: '0843949333', 3066: '0590483528', 3067: '0060187409', 3068: '0446343455', 3069: '0345311078', 3070: '0201407221', 3071: '1853260282', 3072: '0895779323', 3073: '0553101943', 3074: '0800780418', 3075: '3442429552', 3076: '0670030643', 3077: '0712600019', 3078: '0156001918', 3079: '8845421457', 3080: '0449204324', 3081: '0679449116', 3082: '0375727345', 3083: '0553089242', 3084: '0312980345', 3085: '0618004076', 3086: '0515122564', 3087: '1552673057', 3088: '0385314280', 3089: '0451204301', 3090: '070894471X', 3091: '0140049975', 3092: '0451155750', 3093: '0425181014', 3094: '1551667908', 3095: '0060163976', 3096: '0440220734', 3097: '0886775809', 3098: '0374347972', 3099: '0316089699', 3100: '0671008285', 3101: '0425180905', 3102: '0439568455', 3103: '8474105706', 3104: '0515131563', 3105: '0304352411', 3106: '0390211532', 3107: '1580623034', 3108: '0791000648', 3109: '0446364282', 3110: '076455235X', 3111: '9768108126', 3112: '0873642651', 3113: '0441009336', 3114: '0140287019', 3115: '0028610989', 3116: '0778320790', 3117: '0520012984', 3118: '088029650X', 3119: '074931320X', 3120: '0373709374', 3121: '0152025030', 3122: '1877008400', 3123: '3596150655', 3124: '1565920422', 3125: '0345309979', 3126: '3453074971', 3127: '0553574558', 3128: '1573225789', 3129: '0345385977', 3130: '0060953748', 3131: '0451521676', 3132: '0451204565', 3133: '0449214982', 3134: '0553100157', 3135: '0451173317', 3136: '0380545020', 3137: '0395536804', 3138: '0860681467', 3139: '0689851979', 3140: '0671022997', 3141: '0142003557', 3142: '0749324392', 3143: '0393050297', 3144: '0553268120', 3145: '0446364789', 3146: '0446671002', 3147: '0441750184', 3148: '0671892673', 3149: '0439658543', 3150: '1740595939', 3151: '0446604275', 3152: '8882464695', 3153: '0312253265', 3154: '0061061360', 3155: '0380018179', 3156: '0425142078', 3157: '0345406931', 3158: '0879677856', 3159: '009944352X', 3160: '1575211777', 3161: '0028630238', 3162: '067697385X', 3163: '3499264161', 3164: '0670845213', 3165: '0786881356', 3166: '039480001X', 3167: '0099283840', 3168: '0027357813', 3169: '0061097101', 3170: '0671003410', 3171: '0600353214', 3172: '0440177073', 3173: '0345323211', 3174: '0749396067', 3175: '0440207622', 3176: '3442453534', 3177: '0345285980', 3178: '0425170306', 3179: '0345447867', 3180: '0486259250', 3181: '0812533313', 3182: '0446613193', 3183: '3440093360', 3184: '0373118864', 3185: '0451205987', 3186: '0895120402', 3187: '1551669552', 3188: '0553026135', 3189: '0553273914', 3190: '044922046X', 3191: '0060086246', 3192: '0553213652', 3193: '0451188470', 3194: '0525935908', 3195: '0813633133', 3196: '0679425268', 3197: '0590332163', 3198: '0553578529', 3199: '17121963', 3200: '0345423089', 3201: '0156007479', 3202: '0553135945', 3203: '0679760806', 3204: '0737303239', 3205: '0425181480', 3206: '0312970633', 3207: '0671639218', 3208: '0671881175', 3209: '0679452281', 3210: '0743418735', 3211: '0670870951', 3212: '1559583665', 3213: '0452276764', 3214: '0060915803', 3215: '0140362505', 3216: '0140271813', 3217: '0140298452', 3218: '0671690590', 3219: '8472453723', 3220: '0670031321', 3221: '0345350170', 3222: '0671776975', 3223: '0446360716', 3224: '0380798956', 3225: '8423918262', 3226: '0805071563', 3227: '0868194778', 3228: '1869503589', 3229: '0671722891', 3230: '0609804138', 3231: '0804107386', 3232: '0425163407', 3233: '0880299053', 3234: '0373056567', 3235: '0830819118', 3236: '3570204642', 3237: '0060915544', 3238: '0373035284', 3239: '0425165353', 3240: '0515130613', 3241: '0446672211', 3242: '0743451430', 3243: '0684867974', 3244: '1556615620', 3245: '1575663236', 3246: '0439136369', 3247: '0758206135', 3248: '0140058338', 3249: '0099233010', 3250: '0373057113', 3251: '0812553632', 3252: '0385426151', 3253: '0385187858', 3254: '0452263565', 3255: '0440211298', 3256: '1902260333', 3257: '0373272375', 3258: '0684834723', 3259: '0140120556', 3260: '0553213342', 3261: '1842430327', 3262: '0743202007', 3263: '0385497946', 3264: '037308384X', 3265: '1583487840', 3266: '0871136317', 3267: '0399127984', 3268: '1857232046', 3269: '0440189438', 3270: '0486270556', 3271: '0671520474', 3272: '0140390448', 3273: '0380973464', 3274: '1551665948', 3275: '0743244788', 3276: '0590090755', 3277: '0671551043', 3278: '0812570626', 3279: '0373291663', 3280: '0195049067', 3281: '0060081961', 3282: '3423205660', 3283: '0572014015', 3284: '0877799040', 3285: '0062503669', 3286: '0743418891', 3287: '0553111337', 3288: '8432221848', 3289: '055327418X', 3290: '037379066X', 3291: '0679444920', 3292: 'FROMPUBLISHER', 3293: '0842332340', 3294: '0671721763', 3295: '0345447840', 3296: '0446519006', 3297: '1880966042', 3298: '0099297701', 3299: '0060177217', 3300: '0553204963', 3301: '0312265867', 3302: '034536550X', 3303: '0345419979', 3304: '0590099132', 3305: '0671034243', 3306: '3423072342', 3307: '0394800168', 3308: '1570424535', 3309: '039914210X', 3310: '0786889322', 3311: '0446525502', 3312: '3442151473', 3313: '0141439556', 3314: '0064472272', 3315: '8838917442', 3316: '0446603716', 3317: '0380703130', 3318: '038542471X', 3319: '0373118880', 3320: '0373243006', 3321: '031242227X', 3322: '0060198338', 3323: '8401327199', 3324: '1878044885', 3325: '0345447409', 3326: '0345439104', 3327: '1585421359', 3328: '0375826688', 3329: '0192833952', 3330: '0380755467', 3331: '0312863829', 3332: '0141007338', 3333: '0061042943', 3334: '1551665026', 3335: '0425115097', 3336: '0060927216', 3337: '0449146855', 3338: '0590418858', 3339: '0930330471', 3340: '0394717058', 3341: '0671758527', 3342: '031286874X', 3343: '0688126596', 3344: '0345346971', 3345: '0380730847', 3346: '0375413596', 3347: '0373057555', 3348: '0671673661', 3349: '0738703192', 3350: '0670892971', 3351: '081673710X', 3352: '1870041364', 3353: '0934601712', 3354: '1574881515', 3355: '0553579908', 3356: '053107112X', 3357: '9511114891', 3358: '0425166619', 3359: '0060188707', 3360: '0061083593', 3361: '0553229818', 3362: '0679764119', 3363: '0440216745', 3364: '1573229571', 3365: '0330334026', 3366: '5620220578', 3367: '0896936341', 3368: '0312954212', 3369: '0520024788', 3370: '0920852386', 3371: '0553256920', 3372: '1561711543', 3373: '0312925174', 3374: '0048231142', 3375: '0380754134', 3376: '0192833863', 3377: '0425192725', 3378: '0822434628', 3379: '0812579259', 3380: '0843920351', 3381: '0002226642', 3382: '0671744585', 3383: '3442355907', 3384: '0849934958', 3385: '0802137989', 3386: '0812509811', 3387: '0440203279', 3388: '0345272609', 3389: '0764221760', 3390: '9726952670', 3391: '0712670394', 3392: '0515119652', 3393: '0763603538', 3394: '0525940464', 3395: '0373242972', 3396: '0316313068', 3397: '0590486861', 3398: '0061058270', 3399: '1558537449', 3400: '0385482493', 3401: '0515110973', 3402: '0586047654', 3403: '903884543X', 3404: '1558535527', 3405: '0445402296', 3406: '0440145465', 3407: '0425105725', 3408: '671471813', 3409: '006105481X', 3410: '0446607444', 3411: '1591164354', 3412: '0767902866', 3413: '1857920082', 3414: '038550120X', 3415: '0330335723', 3416: '1551663058', 3417: '1579542913', 3418: '0805062262', 3419: '0786708395', 3420: '050552516X', 3421: '0091882745', 3422: '0679885854', 3423: '0440414539', 3424: '0393322599', 3425: '0671704184', 3426: '0446604941', 3427: '0345393007', 3428: '1562054481', 3429: '037541181X', 3430: '2253000841', 3431: '1580624383', 3432: '1857978013', 3433: '0399147365', 3434: '0440200563495', 3435: '8845252906', 3436: '0380603764', 3437: '0312890001', 3438: '0943020077', 3439: '0373243073', 3440: '0060503580', 3441: '0553571656', 3442: '0505525682', 3443: '0767901428', 3444: '0821739913', 3445: '0140437312', 3446: '0385306032', 3447: '0140139974', 3448: '1573221112', 3449: '0425143600', 3450: '067156773X', 3451: '0373483422', 3452: '0515117242', 3453: '0441783058', 3454: '158579029X', 3455: '0739405179', 3456: '0192100386', 3457: '8495426609', 3458: '0373790309', 3459: '0373054750', 3460: '0553583158', 3461: '1580171443', 3462: '0002243806', 3463: '1558176454', 3464: '0553278916', 3465: '7992753550', 3466: '0006754147', 3467: '0553297988', 3468: '0743419170', 3469: '0141002077', 3470: '0333600584', 3471: '8423977439', 3472: '0373441320', 3473: '0874849098', 3474: '1573227889', 3475: '2830207904', 3476: '0440404541', 3477: '0743245520', 3478: '0451178017', 3479: '1841954551', 3480: '0679767193', 3481: '3499605554', 3482: '0870440047', 3483: '1853260207', 3484: '0670030635', 3485: '0671867113', 3486: '037324469X', 3487: '9726102863', 3488: '067102535X', 3489: '0671687743', 3490: '0027435008', 3491: '0451179285', 3492: '0767908511', 3493: '8807814099', 3494: '0525946284', 3495: '0765343266', 3496: '0486264564', 3497: '0879516283', 3498: '0312291388', 3499: '0373171366', 3500: '1853260533', 3501: '0312143060', 3502: '156173411X', 3503: '000651264X', 3504: '0385501404', 3505: '0312978766', 3506: '0451188454', 3507: '0812969650', 3508: '0848703596', 3509: '0373790643', 3510: '0709169329', 3511: '0517882124', 3512: '0449703983', 3513: '8472794180', 3514: '0590476866', 3515: '03333365321', 3516: '074322227X', 3517: '0340393130', 3518: '1566194016', 3519: '0316171530', 3520: '11238356', 3521: '0140193669', 3522: '0140055932', 3523: '0385337116', 3524: '0064400964', 3525: '0140276017', 3526: '0226500578', 3527: '3596505968', 3528: '042518403X', 3529: '051513290X', 3530: '0553156411', 3531: '0345358031', 3532: '014027927X', 3533: '8401328128', 3534: '0385304900', 3535: '0866228098', 3536: '0765341697', 3537: '0590436309', 3538: '3927568201', 3539: '0283072792', 3540: '0375505857', 3541: '0345424654', 3542: '0385333412', 3543: '0751501085', 3544: '0553257994', 3545: '0425097722', 3546: '04403431904', 3547: '0061081809', 3548: '0134681339', 3549: '0394823370', 3550: '0689826494', 3551: '0571209769', 3552: '1573920363', 3553: '3551551936', 3554: '0553298178', 3555: '0385496095', 3556: '0140342907', 3557: '0671722816', 3558: '0931674085', 3559: '8878240192', 3560: '0708881203', 3561: '0440295661', 3562: '0553263579', 3563: '0446328456', 3564: '0552143243', 3565: '0061099805', 3566: '0446403377', 3567: '8472234363', 3568: '0373250282', 3569: '0345313151', 3570: '0385513089', 3571: '0552117552', 3572: '0671735551', 3573: '0449700712', 3574: '8487507301', 3575: '038542017X', 3576: '0553800914', 3577: '0192833715', 3578: '0394756967', 3579: '0880299185', 3580: '0340339659', 3581: '0060012781', 3582: '0515133418', 3583: '0345318862', 3584: '006101351X', 3585: '0393092933', 3586: '0330253603', 3587: '0399138994', 3588: '0385497555', 3589: '2277302686', 3590: '0571153747', 3591: '1571201203', 3592: '0415077087', 3593: '0875421369', 3594: '0521781884', 3595: '0395866502', 3596: '3612650025', 3597: '0451206940', 3598: '842263824X', 3599: '0688174035', 3600: '0373169469', 3601: '0375502025', 3602: '0688063314', 3603: '1551660520', 3604: '1862070040', 3605: '0380804727', 3606: '074939188X', 3607: '0070503192', 3608: '0517703939', 3609: '0373484771', 3610: '3423204753', 3611: '0743237196', 3612: '0553233998', 3613: '0590494333', 3614: '0671468510', 3615: '0393957608', 3616: '0440208556', 3617: '0679429891', 3618: '0312991460', 3619: '0451163966', 3620: '3746612411', 3621: '080410753X', 3622: '0448117517', 3623: '0890811512', 3624: '0671532251', 3625: '0871315572', 3626: '0446344281', 3627: '0821713876', 3628: '068484639X', 3629: '0394569873', 3630: '0749309466', 3631: '3596144965', 3632: '0743451538', 3633: '080410946X', 3634: '3518367773', 3635: '1590592565', 3636: '0767902831', 3637: '0684801221', 3638: '1860339085', 3639: '0887764983', 3640: '0671028375', 3641: '0812528042', 3642: '1863307443', 3643: '0671766163', 3644: '0590477412', 3645: '0671870874', 3646: '0312966954', 3647: '0842329129', 3648: '0330323695', 3649: '0061095559', 3650: '0805068341', 3651: '8440679858', 3652: '0373110871', 3653: '0842335986', 3654: '044023722X', 3655: '0679744398', 3656: '0743418549', 3657: '0062507877', 3658: '0060975008', 3659: '0374281947', 3660: '0449210901', 3661: '0789495929', 3662: '0140309586', 3663: '0345363582', 3664: '0764122967', 3665: '0312970307', 3666: '0451523415', 3667: '0590437976', 3668: '0140042172', 3669: '0373289081', 3670: '0375704248', 3671: '0070212570', 3672: '8420646105', 3673: '851231085', 3674: '0892131349', 3675: '8402090443', 3676: '0553213148', 3677: '0452268060', 3678: '0590453858', 3679: '1551922703', 3680: '0122008502', 3681: '0385720106', 3682: '0061082708', 3683: '8845247414', 3684: '8882896714', 3685: '0375802916', 3686: '0689804423', 3687: '9726080045', 3688: '0515106070', 3689: '0836217012', 3690: '0671036505', 3691: '0515132039', 3692: '0804119996', 3693: '0446607711', 3694: '0898795966', 3695: '0843931442', 3696: '3442135338', 3697: '0375502238', 3698: '0451184394', 3699: '0812540328', 3700: '0486287262', 3701: '0345328396', 3702: '0380006456', 3703: '1551661780', 3704: '0767915062', 3705: '067973807X', 3706: '0671027514', 3707: '0663461634', 3708: '034544325X', 3709: '1893224546', 3710: '0879676566', 3711: '0380727021', 3712: '0843950498', 3713: '8845251829', 3714: '057500150X', 3715: '0233996214', 3716: '8431705302', 3717: '0471143529', 3718: '0451151259', 3719: '0743418174', 3720: '1572700351', 3721: '0006928137', 3722: '0449218414', 3723: '0375703861', 3724: '0445209666', 3725: '0871316390', 3726: '0330020765', 3727: '0066214440', 3728: '0425143341', 3729: '0553567675', 3730: '0451204336', 3731: '0304345350', 3732: '0394578759', 3733: '0345353145', 3734: '0741407612', 3735: '0441240941', 3736: '0440237300', 3737: '0451408977', 3738: '1880656329', 3739: '1573222038', 3740: '0880385359', 3741: '0030965268', 3742: '2260013899', 3743: '8440670796', 3744: '0374204772', 3745: '0307020711', 3746: '0061054763', 3747: '0671217291', 3748: '0449007383', 3749: '0816745382', 3750: '0312983298', 3751: '0575048700', 3752: '0449001962', 3753: '3548256171', 3754: '0425177009', 3755: '0553575015', 3756: '0198200730', 3757: '039302007X', 3758: '0671662163', 3759: '0552999458', 3760: '0312315228', 3761: '0425178951', 3762: '0671797301', 3763: '0441070698', 3764: '1570981590', 3765: '0446607339', 3766: '089480698X', 3767: '1566196884', 3768: '031230739X', 3769: '052524901X', 3770: '1585670162', 3771: '0671722859', 3772: '0765340747', 3773: '0451175190', 3774: '067976674X', 3775: '0679507841', 3776: '0375500510', 3777: '0140258418', 3778: '0451190157', 3779: '0571212956', 3780: '0446602620', 3781: '8435016285', 3782: '0449909735', 3783: '0888390777', 3784: '042515999X', 3785: '0373223706', 3786: '0399139206', 3787: '0446364703', 3788: '3442069696', 3789: '0825672597', 3790: '0515125601', 3791: '0394851307', 3792: '0812545990', 3793: '0345446429', 3794: '0192800337', 3795: '0373765193', 3796: '0064400018', 3797: '0441694543', 3798: '0446310786', 3799: '0140177396', 3800: '076455168X', 3801: '0316107387', 3802: '1562825038', 3803: '1559212438', 3804: '0679891412', 3805: '0785300430', 3806: '0263148866', 3807: '0373762984', 3808: '0312976275', 3809: '3442245567', 3810: '0590435124', 3811: '0671000349', 3812: '0099421267', 3813: '0441011020', 3814: '0671045512', 3815: '1580628362', 3816: '0002232901', 3817: '0451411633', 3818: '0373264011', 3819: '0517884534', 3820: '0583112315', 3821: '0671869671', 3822: '0553568884', 3823: '0446605239', 3824: '0061099341', 3825: '0767912268', 3826: '0764566202', 3827: '031205436X', 3828: '0441005748', 3829: '1569317917', 3830: '8807814935', 3831: '0688177743', 3832: '2742744444', 3833: '031298328X', 3834: '067187120X', 3835: '0060675292', 3836: '0345297709', 3837: '0345409329', 3838: '0312300638', 3839: '0345401565', 3840: '0373833466', 3841: '0553569910', 3842: '0330332767', 3843: '0559352604', 3844: '0671037382', 3845: '0399151060', 3846: '0385264453', 3847: '0140373365', 3848: '0373255012', 3849: '0002226162', 3850: '0140067485', 3851: '039951936X', 3852: '1551665794', 3853: '1578565677', 3854: '0345350499', 3855: '0425146812', 3856: '0553346687', 3857: '0676972152', 3858: '0140501983', 3859: '8440672055', 3860: '3499263599', 3861: '0805041400', 3862: '0446394521', 3863: '0373292147', 3864: '155166710X', 3865: '073700049X', 3866: '8804305479', 3867: '0812515609', 3868: '0451166876', 3869: '1885356552', 3870: '0553563106', 3871: '0771061099', 3872: '0312422156', 3873: '0821742523', 3874: '0905483839', 3875: '0425194612', 3876: '0330330276', 3877: '0689704232', 3878: '8479601590', 3879: '0590423541', 3880: '0446516988', 3881: '0140621679', 3882: '0843944706', 3883: '0821748173', 3884: '0373032900', 3885: '185326167X', 3886: '0099771519', 3887: '031286101X', 3888: '0843940328', 3889: '0451188489', 3890: '0451169530', 3891: '0517163446', 3892: '1573228397', 3893: '0380781220', 3894: '0425124866', 3895: '0449901017', 3896: '0426203348', 3897: '0006511120', 3898: '037303279X', 3899: '3786720835', 3900: '0441317626', 3901: '0892819006', 3902: '0373264674', 3903: '0679722661', 3904: '0440216974', 3905: '0671693816', 3906: '0312964323', 3907: '0752584820', 3908: '052512800X', 3909: '0446610399', 3910: '0380977788', 3911: '0689828772', 3912: '0742522458', 3913: '014043268X', 3914: '0425131769', 3915: '01400.5925.3', 3916: '0451176464', 3917: '0394747704', 3918: '0449223450', 3919: '0312978448', 3920: '055358118X', 3921: '0060242361', 3922: '0140276904', 3923: '0689716850', 3924: '0345425707', 3925: '0670866229', 3926: '0060122498', 3927: '030371706', 3928: '2226086366', 3929: '0765196875', 3930: '1551520559', 3931: '043920786X', 3932: '0553289691', 3933: '0515130990', 3934: '0895867990', 3935: '0373078579', 3936: '0345334302', 3937: '1568843844', 3938: '0446612790', 3939: '0312958455', 3940: '0553586335', 3941: '0786014423', 3942: '0810909650', 3943: '0684803534', 3944: '0786885416', 3945: '0385335121', 3946: '0140621806', 3947: '0843934131', 3948: '0316776963', 3949: '0600566854', 3950: '0330484648', 3951: '0375503765', 3952: '0345435249', 3953: '0316782009', 3954: '0064460606', 3955: '0671644661', 3956: '0345354648', 3957: '0345301110', 3958: '0446609633', 3959: '0451186362', 3960: '0449141349', 3961: '0451405382', 3962: '3442437407', 3963: '0520008960', 3964: '0439327660', 3965: '0553096834', 3966: '0553094416', 3967: '0192833642', 3968: '0028604032', 3969: '0802139248', 3970: '0875421180', 3971: '0671876775', 3972: '0345458958', 3973: '1561893676', 3974: '0812510666', 3975: '0061012467', 3976: '0312263120', 3977: '0670852139', 3978: '0747403902', 3979: '0842337539', 3980: '1586605232', 3981: '0786916362', 3982: '1570750262', 3983: '0886771854', 3984: '0449205983', 3985: '0345369947', 3986: '1878257862', 3987: '0345423658', 3988: '0201329697', 3989: '0515124893', 3990: '0849917050', 3991: '0425051617', 3992: '0440240891', 3993: '006029521X', 3994: '1551663155', 3995: '0717284832', 3996: '034529873X', 3997: '0425140040', 3998: '0553099590', 3999: '0440229502', 4000: '0802139612', 4001: '0373262175', 4002: '8876846174', 4003: '0394725883', 4004: '0679406832', 4005: '0062502891', 4006: '0312993536', 4007: '0721403468', 4008: '0060240245', 4009: '3442545706', 4010: '0809229889', 4011: '0671047450', 4012: '0451522397', 4013: '0060208007', 4014: '0380756269', 4015: '055329783X', 4016: '0670849057', 4017: '0446311901', 4018: '0156899604', 4019: '042518613X', 4020: '0671793489', 4021: '3257251017', 4022: '0821763784', 4023: '1551662914', 4024: '0553478257', 4025: '3499227339', 4026: '0743406583', 4027: '8370755275', 4028: '023111544X', 4029: '0671690566', 4030: '0821720619', 4031: '8811738717', 4032: '0671891715', 4033: '0385490879', 4034: '0060529148', 4035: '0679003797', 4036: '0743406176', 4037: '0771055706', 4038: '0821759868', 4039: '0425191311', 4040: '0913367141', 4041: '0425172546', 4042: '1550376330', 4043: '0671692674', 4044: '0060973595', 4045: '0140176616', 4046: '0060934700', 4047: '0681007982', 4048: '155166514X', 4049: '0061080349', 4050: '0140252738', 4051: '037370691X', 4052: '0553275976', 4053: '0886777631', 4054: '1567315844', 4055: '0440146577', 4056: '0804422079', 4057: '0525944001', 4058: '0312420021', 4059: '0679772677', 4060: '3462015648', 4061: '0380702878', 4062: '0804119783', 4063: '0721421989', 4064: '0679601996', 4065: '0773731199', 4066: '0839828225', 4067: '9724112756', 4068: '3791513265', 4069: '0439376106', 4070: '8467201444', 4071: '0345303644', 4072: '0679731369', 4073: '0553287346', 4074: '0809478110', 4075: '0061030201', 4076: '0451204948', 4077: '0140238131', 4078: '0671769820', 4079: '0525946241', 4080: '0393020495', 4081: '0061054240', 4082: '0553564528', 4083: '2207247554', 4084: '0330309552', 4085: '006019443X', 4086: '0451527747', 4087: '0452283442', 4088: '0151004951', 4089: '1551665824', 4090: '0886772214', 4091: '0517188244', 4092: '0679409920', 4093: '0373709544', 4094: '0884943240', 4095: '0553284789', 4096: '0515119202', 4097: '1551664380', 4098: '0671008803', 4099: '0345288556', 4100: '0764518003', 4101: '0440504953', 4102: '8420613126', 4103: '0140620192', 4104: '1552783081', 4105: '0373077521', 4106: '2266111396', 4107: '1551664704', 4108: '0765305224', 4109: '0449220176', 4110: '0765346125', 4111: '0553288202', 4112: '0671526715', 4113: '0140340203', 4114: '1551668602', 4115: '8422662523', 4116: '0451404319', 4117: '3423118652', 4118: '0446404144', 4119: '0440208130', 4120: '0684867621', 4121: '0553230360', 4122: '0671003119', 4123: '0517122707', 4124: '3257228007', 4125: '0517661756', 4126: '0380789612', 4127: '0060959037', 4128: '1401088945', 4129: '0918273838', 4130: '0375750223', 4131: '0449239152', 4132: '0373077882', 4133: '0786927089', 4134: '0373201818', 4135: '0375506039', 4136: '0449000885', 4137: '0735613826', 4138: '0738861618', 4139: '0553028227', 4140: '0671541501', 4141: '0553211757', 4142: '0385498411', 4143: '055357292X', 4144: '0375508627', 4145: '0671887963', 4146: '0451205758', 4147: '0523417489', 4148: '0345337662', 4149: '0312960344', 4150: '0802775004', 4151: '1853260800', 4152: '038550117X', 4153: '0966193105', 4154: '8521902069', 4155: '0346123062', 4156: '0689710518', 4157: '002864896X', 4158: '0345396936', 4159: '0874771935', 4160: '0439368529', 4161: '0553277006', 4162: '0671003682', 4163: '0062517716', 4164: '9029507780', 4165: '0393970426', 4166: '0671519816', 4167: '0060924837', 4168: '0375505695', 4169: '0452261368', 4170: '0373691602', 4171: '0786885688', 4172: '2.02.000585.9', 4173: '8445904116', 4174: '0060186526', 4175: '0894718207', 4176: '0590404075', 4177: '0446603856', 4178: '0807119466', 4179: '0571148166', 4180: '0146001435', 4181: '3785540159', 4182: '0373291027', 4183: '0553271644', 4184: '0451457765', 4185: '0671669230', 4186: '0515126772', 4187: '1588720756', 4188: '0807023086', 4189: '0553377876', 4190: '0761507280', 4191: '7506015463', 4192: '074345068X', 4193: '0312066384', 4194: '0812564871', 4195: '0805042024', 4196: '006092991X', 4197: '0440228476', 4198: '0679725513', 4199: '0440574358', 4200: '0671799045', 4201: '0590452584', 4202: '0130305367', 4203: '0440910811', 4204: '0060976454', 4205: '0804104549', 4206: '0141301147', 4207: '8878193526', 4208: '0375418830', 4209: '0553293370', 4210: '0894803441', 4211: '3453024370', 4212: '0952415348', 4213: '0140442081', 4214: '3493600372', 4215: '0679412611', 4216: '8488413750', 4217: '0394561619', 4218: '0486282228', 4219: '0373825749', 4220: '3922028004', 4221: '0895773678', 4222: '0810918684', 4223: '0399151435', 4224: '0373638078', 4225: '0394925602', 4226: '0380792478', 4227: '3596258758', 4228: '9728257163', 4229: '0345351738', 4230: '0373288654', 4231: '8871334914', 4232: '8574023477', 4233: '0747544603', 4234: '0373104677', 4235: '0743470915', 4236: '0140186522', 4237: '1571690506', 4238: '0373121482', 4239: '0141303743', 4240: '0877423814', 4241: '0671680781', 4242: '084394546X', 4243: '0446600466', 4244: '0312867875', 4245: '1557482675', 4246: '0440217466', 4247: '8804489448', 4248: '034538184X', 4249: '0451179900', 4250: '0486999521', 4251: '0743423682', 4252: '0316286869', 4253: '0764112198', 4254: '0451119932', 4255: 'B00005R2BG', 4256: '0747240752', 4257: '0373271220', 4258: '2070407756', 4259: '2070374610', 4260: '0312319517', 4261: '0373761910', 4262: '842268215X', 4263: '0380773155', 4264: '2844050328', 4265: '0060241756', 4266: '0812562836', 4267: '0226848620', 4268: '0060512806', 4269: '0671042556', 4270: '0452283086', 4271: '0671204971', 4272: '0941188108', 4273: '0385482515', 4274: '0515123471', 4275: '0809464128', 4276: '0586081321', 4277: '0525937676', 4278: '0373112270', 4279: '0061082031', 4280: '0385336004', 4281: '055326253X', 4282: '0155037714', 4283: '068485760X', 4284: '0446521582', 4285: '0316735736', 4286: '1558702334', 4287: '0373451636', 4288: '0385244002', 4289: '1551669277', 4290: '0738204307', 4291: '037302309X', 4292: '0440203430', 4293: '077042029x', 4294: '0393312461', 4295: '8804325038', 4296: '0743448189', 4297: '06080290X', 4298: '0449902854', 4299: '0440225442', 4300: '0061094226', 4301: '0590466631', 4302: '0806512717', 4303: '0099463601', 4304: '9176428214', 4305: '0515132756', 4306: '0349106533', 4307: '0380978172', 4308: '0345467566', 4309: '0380754509', 4310: '0425145638', 4311: '0553271636', 4312: '0380723387', 4313: '0373098189', 4314: '9041701214', 4315: '0812500725', 4316: '009943184X', 4317: '0345417186', 4318: '0531071421', 4319: '0749398574', 4320: '0441009239', 4321: '0375702709', 4322: '8439598122', 4323: '0132176130', 4324: '0452263018', 4325: '0060532149', 4326: '0913299545', 4327: '0553232495', 4328: '0452283736', 4329: '0399141324', 4330: '2070360423', 4331: '0060955937', 4332: '0373871759', 4333: '0670814164', 4334: '0300001479', 4335: '0399133844', 4336: '0451408888', 4337: '0030591724', 4338: '0060932139', 4339: '1557100047', 4340: '0515136530', 4341: '1880032376', 4342: '038080722X', 4343: '0670813028', 4344: '0767901819', 4345: '0385497288', 4346: '0380365251', 4347: '0006547834', 4348: '888451049', 4349: '0865474273', 4350: '0393312356', 4351: '0590457225', 4352: '0201626705', 4353: '0449002640', 4354: '0425185710', 4355: '0751338834', 4356: '0553576801', 4357: '0553292439', 4358: '0871568063', 4359: '0142004235', 4360: '1558173331', 4361: '0312155433', 4362: '0671656155', 4363: '1558743316', 4364: '0552995371', 4365: '0312288115', 4366: '067188803X', 4367: '3499220946', 4368: '0671729411', 4369: '0671451820', 4370: '0380003821', 4371: '0141000198', 4372: '0006512801', 4373: '0631197346', 4374: '0590449648', 4375: '0843111976', 4376: '0874067952', 4377: '8471483769', 4378: '8804341971', 4379: '0553381520', 4380: '0373071299', 4381: '0373270704', 4382: '0590435698', 4383: '0439202701', 4384: '0385418213', 4385: '0449001946', 4386: '0440166497', 4387: '0312132204', 4388: '0553584049', 4389: '0440147956', 4390: '0812561589', 4391: '0875423108', 4392: '0316852570', 4393: '0137530382', 4394: '0751512990', 4395: '014011632X', 4396: '8871060008', 4397: '3442452643', 4398: '0671026259', 4399: '0312319142', 4400: '0345425537', 4401: '0375501851', 4402: '0452282764', 4403: '0812520920', 4404: '0785283013', 4405: '0767902076', 4406: '0525432922', 4407: '0688177859', 4408: '325723273X', 4409: '0380730790', 4410: '3548330223', 4411: '0821736612', 4412: '0330254103', 4413: '0316850497', 4414: '1558747109', 4415: '0425179451', 4416: '0816717176', 4417: '3896393723', 4418: '0874775191', 4419: '0770424961', 4420: '1567187285', 4421: '0380815931', 4422: '0553211412', 4423: '8806158341', 4424: '0684835959', 4425: '0375705856', 4426: '0679449310', 4427: '0515111317', 4428: '034528299X', 4429: '0826321933', 4430: '0446400513', 4431: '0312983212', 4432: '3445103820', 4433: '0380729342', 4434: '0446672289', 4435: '0449237826', 4436: '2221002822', 4437: '0688084923', 4438: '0440184053', 4439: '0385333463', 4440: '0064403688', 4441: '0449906787', 4442: '0006548180', 4443: '0373483945', 4444: '002860497', 4445: '1414033435', 4446: '0425137007', 4447: '1850573751', 4448: '0441783309', 4449: '0804830088', 4450: '0375763317', 4451: '0373250169', 4452: '0552140287', 4453: '0451455789', 4454: '0399143130', 4455: '014019536X', 4456: '0312289871', 4457: '038077352X', 4458: '2246548810', 4459: '0415130352', 4460: '039595617X', 4461: '0877222401', 4462: '006101351', 4463: '0440485525', 4464: '0374148600', 4465: '0312202911', 4466: '9060054156', 4467: '0373243642', 4468: '0451410807', 4469: '0349117004', 4470: '0316693200', 4471: '0140272658', 4472: '0380731851', 4473: '074342798X', 4474: '0345378881', 4475: '0816769370', 4476: '1575662280', 4477: '082172262X', 4478: '0679015396', 4479: '0152045643', 4480: '0140130209', 4481: '0307231240', 4482: '0155658115', 4483: '1585422118', 4484: '3518392867', 4485: '1575662191', 4486: '0345369351', 4487: '0553283936', 4488: '0714530808', 4489: '0767901762', 4490: '0312148259', 4491: '0060989238', 4492: '0805036504', 4493: '034544177X', 4494: '0373691254', 4495: '0316899984', 4496: '0449221490', 4497: '0345428285', 4498: '0515069469', 4499: '3451187930', 4500: '0156007754', 4501: '0670892300', 4502: '0066214122', 4503: '038097519X', 4504: '006109918X', 4505: '0446608076', 4506: '0451403355', 4507: '3499230305', 4508: '1858288967', 4509: '0679767185', 4510: '0140042326', 4511: '074347709X', 4512: '0870541617', 4513: '0375708316', 4514: '0590424777', 4515: '0449217183', 4516: '0441008216', 4517: '0805029281', 4518: '0460882171', 4519: '0553527371', 4520: '0590444301', 4521: '3453173287', 4522: '0340377720', 4523: '0786002735', 4524: '0440223237', 4525: '0486268667', 4526: '0060930179', 4527: '0758203004', 4528: '0853810158', 4529: '0515132187', 4530: '0192822292', 4531: '1551050722', 4532: '0553569902', 4533: '1551664828', 4534: '3518372742', 4535: '3471772510', 4536: '1551660512', 4537: '0919345174', 4538: '0670856495', 4539: '0441011101', 4540: '078688567X', 4541: '0373451776', 4542: '0785315497', 4543: '0786817089', 4544: '0671709828', 4545: '0449134482', 4546: '0671646958', 4547: '0425191192', 4548: '0449147657', 4549: '0842329269', 4550: '1851588418', 4551: '0671534718', 4552: '0373224400', 4553: '0380777169', 4554: '0679746757', 4555: '0671892347', 4556: '055357275X', 4557: '0843111658', 4558: '055356451X', 4559: '8574024856', 4560: '0312252951', 4561: '0393324761', 4562: '0385468709', 4563: '2266000489', 4564: '0140374248', 4565: '0373810202', 4566: '0843946644', 4567: '0786010924', 4568: '907433671X', 4569: '0671825291275', 4570: '0553568760', 4571: '0451182030', 4572: '0141303131', 4573: '0671870939', 4574: '0060984333', 4575: '342311536X', 4576: '0345391829', 4577: '0020427115', 4578: '0451192001', 4579: '0333386019', 4580: '0140171738', 4581: '052166618X', 4582: '0671450492', 4583: '2264025956', 4584: '9177093569', 4585: '1561480711', 4586: '0671067990', 4587: '0886775639', 4588: '1559723505', 4589: '0333750381', 4590: '0810322951', 4591: '0880297697', 4592: '0688139574', 4593: '0375412824', 4594: '0451169034', 4595: '038081093X', 4596: '0449212858', 4597: '9029001291', 4598: '0449225313', 4599: '0373289952', 4600: '0929605594', 4601: '0670876550', 4602: '0440224764', 4603: '0060191988', 4604: '0375700757', 4605: '0345361989', 4606: '3250600555', 4607: '0312964951', 4608: '0804830126', 4609: '8435034526', 4610: '0380815583', 4611: '0618045678', 4612: '1931850054', 4613: '0553109588', 4614: '0340770724', 4615: '0385730586', 4616: '0684848287', 4617: '0590412515', 4618: '0446302066', 4619: '0812551109', 4620: '3828400647', 4621: '1582430853', 4622: '0684835983', 4623: '052594527X', 4624: '0671797042', 4625: '8806157957', 4626: '0380814803', 4627: '8807809907', 4628: '9710805207', 4629: '185458281X', 4630: '0425169081', 4631: '0553572997', 4632: '0446673382', 4633: '0805063897', 4634: '0345335082', 4635: '0486408930', 4636: '156138450X', 4637: '0681100230', 4638: '0892839066'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Memetakan User-ID dan ISBN ke dataframe yang berkaitan."
      ],
      "metadata": {
        "id": "UtYssx35MTjm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mapping User-ID ke dataframe user\n",
        "df['user'] = df['User-ID'].map(user_to_user_encoded)\n",
        "\n",
        "# Mapping ISBN ke dataframe book\n",
        "df['book'] = df['ISBN'].map(book_to_book_encoded)"
      ],
      "metadata": {
        "id": "ZM5WZIz3MRA-"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mengeek beberapa hal dalam data seperti jumlah user, jumlah buku, dan mengubah nilai rating menjadi float.\n"
      ],
      "metadata": {
        "id": "aPUOi3-0Mn9V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mendapatkan jumlah user\n",
        "num_users = len(user_to_user_encoded)\n",
        "print(num_users)\n",
        "\n",
        "# Mendapatkan jumlah buku\n",
        "num_book = len(book_encoded_to_book)\n",
        "print(num_book)\n",
        "\n",
        "# Mengubah Book-Rating menjadi nilai float\n",
        "df['Book-Rating'] = df['Book-Rating'].values.astype(np.float32)\n",
        "\n",
        "# Nilai minimum Book-Rating\n",
        "min_rating = min(df['Book-Rating'])\n",
        "\n",
        "# Nilai maksimal Book-Rating\n",
        "max_rating = max(df['Book-Rating'])\n",
        "\n",
        "print('Number of User: {}, Number of Book: {}, Min Book-Rating: {}, Max Book-Rating: {}'.format(\n",
        "    num_users, num_book, min_rating, max_rating\n",
        "))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "51mIVuwUMlPD",
        "outputId": "ecf54848-1c4c-4ea8-963a-e41aa2235126"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3207\n",
            "4639\n",
            "Number of User: 3207, Number of Book: 4639, Min Book-Rating: 0.0, Max Book-Rating: 10.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Tahap persiapan telah selesai. Berikut adalah hal-hal yang telah kita lakukan pada tahap ini:\n",
        "\n",
        "  * Memahami data rating yang kita miliki.\n",
        "  * Menyandikan (encode) fitur ‘User-ID’ dan ‘ISBN’ ke dalam indeks integer.\n",
        "  * Memetakan ‘User-ID’ dan ‘ISBN’ ke dataframe yang berkaitan.\n",
        "  * Mengecek beberapa hal dalam data seperti jumlah user, jumlah buku, kemudian mengubah nilai rating menjadi float.\n"
      ],
      "metadata": {
        "id": "JItw7figNZCN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Membagi Data untuk Training dan Validasi\n"
      ],
      "metadata": {
        "id": "77x1bn3kNnc3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mengacak datanya agar distribusinya menjadi random\n"
      ],
      "metadata": {
        "id": "axVfx25INqlk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengacak dataset\n",
        "df = df.sample(frac=1, random_state=42)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "1cUpEDAxNM51",
        "outputId": "4fc86359-8008-4821-fab8-faaecd1a8210"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         User-ID         ISBN  Book-Rating  user  book\n",
              "498846    120515   8501012076          0.0  1207  1461\n",
              "514340    124818   1561450022          5.0  1889  2464\n",
              "451586    108243   0307070034          0.0  1934  2524\n",
              "521333    126487   0380792494          0.0   883  1031\n",
              "176376     38202   0394800893         10.0   620   694\n",
              "...          ...          ...          ...   ...   ...\n",
              "615481    148744   0786927089          0.0   621  4133\n",
              "537464    129358   0505523752         10.0   176   462\n",
              "509893    123981   0425113884          0.0  1065  2932\n",
              "1136652   273380  04403431904          0.0  2579  3546\n",
              "1002963   240700   0064472876          6.0   736   847\n",
              "\n",
              "[5000 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-607ef54d-d90b-4c7f-9133-5bb01f3a772a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User-ID</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>Book-Rating</th>\n",
              "      <th>user</th>\n",
              "      <th>book</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>498846</th>\n",
              "      <td>120515</td>\n",
              "      <td>8501012076</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1207</td>\n",
              "      <td>1461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>514340</th>\n",
              "      <td>124818</td>\n",
              "      <td>1561450022</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1889</td>\n",
              "      <td>2464</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>451586</th>\n",
              "      <td>108243</td>\n",
              "      <td>0307070034</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1934</td>\n",
              "      <td>2524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>521333</th>\n",
              "      <td>126487</td>\n",
              "      <td>0380792494</td>\n",
              "      <td>0.0</td>\n",
              "      <td>883</td>\n",
              "      <td>1031</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176376</th>\n",
              "      <td>38202</td>\n",
              "      <td>0394800893</td>\n",
              "      <td>10.0</td>\n",
              "      <td>620</td>\n",
              "      <td>694</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>615481</th>\n",
              "      <td>148744</td>\n",
              "      <td>0786927089</td>\n",
              "      <td>0.0</td>\n",
              "      <td>621</td>\n",
              "      <td>4133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537464</th>\n",
              "      <td>129358</td>\n",
              "      <td>0505523752</td>\n",
              "      <td>10.0</td>\n",
              "      <td>176</td>\n",
              "      <td>462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>509893</th>\n",
              "      <td>123981</td>\n",
              "      <td>0425113884</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1065</td>\n",
              "      <td>2932</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1136652</th>\n",
              "      <td>273380</td>\n",
              "      <td>04403431904</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2579</td>\n",
              "      <td>3546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1002963</th>\n",
              "      <td>240700</td>\n",
              "      <td>0064472876</td>\n",
              "      <td>6.0</td>\n",
              "      <td>736</td>\n",
              "      <td>847</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5000 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-607ef54d-d90b-4c7f-9133-5bb01f3a772a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-89bbd436-df72-45e8-a3b6-6b364e41033c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-89bbd436-df72-45e8-a3b6-6b364e41033c')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-89bbd436-df72-45e8-a3b6-6b364e41033c button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-607ef54d-d90b-4c7f-9133-5bb01f3a772a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-607ef54d-d90b-4c7f-9133-5bb01f3a772a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Membuat variabel x untuk mencocokkan data user dan buku menjadi satu value"
      ],
      "metadata": {
        "id": "4nr4042NOAgu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = df[['user', 'book']].values"
      ],
      "metadata": {
        "id": "FZyDvADNNuzS"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "\n",
        "*   Membuat variabel y untuk membuat rating dari hasil\n"
      ],
      "metadata": {
        "id": "CLIBuzYpOHnG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y = df['Book-Rating'].apply(lambda x: (x - min_rating) / (max_rating - min_rating)).values"
      ],
      "metadata": {
        "id": "VwbyDChnOFpk"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Membagi menjadi 80% data train dan 20% data validasi"
      ],
      "metadata": {
        "id": "NtGq_cDAOQqf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_indices = int(0.8 * df.shape[0])\n",
        "x_train, x_val, y_train, y_val = (\n",
        "    x[:train_indices],\n",
        "    x[train_indices:],\n",
        "    y[:train_indices],\n",
        "    y[train_indices:]\n",
        ")\n",
        "\n",
        "print(x, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ztv2Qv7mONwC",
        "outputId": "c572f99a-5050-45d3-a260-6baa352b070b"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1207 1461]\n",
            " [1889 2464]\n",
            " [1934 2524]\n",
            " ...\n",
            " [1065 2932]\n",
            " [2579 3546]\n",
            " [ 736  847]] [0.  0.5 0.  ... 0.  0.  0.6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Proses Training"
      ],
      "metadata": {
        "id": "M4VA9qt5OXDN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Membuat class RecommenderNet dengan keras Model class."
      ],
      "metadata": {
        "id": "Wg6xndU7ObND"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class RecommenderNet(tf.keras.Model):\n",
        "\n",
        "  # Insialisasi fungsi\n",
        "  def __init__(self, num_users, num_book, embedding_size, **kwargs):\n",
        "    super(RecommenderNet, self).__init__(**kwargs)\n",
        "    self.num_users = num_users\n",
        "    self.num_book = num_book\n",
        "    self.embedding_size = embedding_size\n",
        "    self.user_embedding = layers.Embedding( # layer embedding user\n",
        "        num_users,\n",
        "        embedding_size,\n",
        "        embeddings_initializer = 'he_normal',\n",
        "        embeddings_regularizer = keras.regularizers.l2(1e-6)\n",
        "    )\n",
        "    self.user_bias = layers.Embedding(num_users, 1) # layer embedding user bias\n",
        "    self.book_embedding = layers.Embedding( # layer embeddings book\n",
        "        num_book,\n",
        "        embedding_size,\n",
        "        embeddings_initializer = 'he_normal',\n",
        "        embeddings_regularizer = keras.regularizers.l2(1e-6)\n",
        "    )\n",
        "    self.resto_bias = layers.Embedding(num_book, 1) # layer embedding book bias\n",
        "\n",
        "  def call(self, inputs):\n",
        "    user_vector = self.user_embedding(inputs[:,0]) # memanggil layer embedding 1\n",
        "    user_bias = self.user_bias(inputs[:, 0]) # memanggil layer embedding 2\n",
        "    book_vector = self.book_embedding(inputs[:, 1]) # memanggil layer embedding 3\n",
        "    book_bias = self.resto_bias(inputs[:, 1]) # memanggil layer embedding 4\n",
        "\n",
        "    dot_user_book = tf.tensordot(user_vector, book_vector, 2)\n",
        "\n",
        "    x = dot_user_book + user_bias + book_bias\n",
        "\n",
        "    return tf.nn.sigmoid(x) # activation sigmoid"
      ],
      "metadata": {
        "id": "WuDIwZ-DOTLF"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Melakukan proses compile terhadap model\n"
      ],
      "metadata": {
        "id": "_cMBoN-XO1DG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = RecommenderNet(num_users, num_book, 50) # inisialisasi model\n",
        "\n",
        "# model compile\n",
        "model.compile(\n",
        "    loss = tf.keras.losses.BinaryCrossentropy(),\n",
        "    optimizer = keras.optimizers.Adam(learning_rate=0.001),\n",
        "    metrics=[tf.keras.metrics.RootMeanSquaredError()]\n",
        ")"
      ],
      "metadata": {
        "id": "CCMjEC38Ox98"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Memulai training\n"
      ],
      "metadata": {
        "id": "tZ1BoMc9O_Q5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(\n",
        "    x = x_train,\n",
        "    y = y_train,\n",
        "    batch_size = 8,\n",
        "    epochs = 100,\n",
        "    validation_data = (x_val, y_val)\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x3LdE8w0O7wq",
        "outputId": "306a0a63-ae90-42a3-a8fa-775ead2edb1b"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "500/500 [==============================] - 5s 7ms/step - loss: 0.6918 - root_mean_squared_error: 0.4397 - val_loss: 0.6884 - val_root_mean_squared_error: 0.4434\n",
            "Epoch 2/100\n",
            "500/500 [==============================] - 5s 10ms/step - loss: 0.6563 - root_mean_squared_error: 0.4191 - val_loss: 0.6840 - val_root_mean_squared_error: 0.4409\n",
            "Epoch 3/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.5881 - root_mean_squared_error: 0.3782 - val_loss: 0.6809 - val_root_mean_squared_error: 0.4389\n",
            "Epoch 4/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.5550 - root_mean_squared_error: 0.3604 - val_loss: 0.6786 - val_root_mean_squared_error: 0.4376\n",
            "Epoch 5/100\n",
            "500/500 [==============================] - 3s 7ms/step - loss: 0.5401 - root_mean_squared_error: 0.3522 - val_loss: 0.6758 - val_root_mean_squared_error: 0.4360\n",
            "Epoch 6/100\n",
            "500/500 [==============================] - 3s 7ms/step - loss: 0.5261 - root_mean_squared_error: 0.3442 - val_loss: 0.6730 - val_root_mean_squared_error: 0.4344\n",
            "Epoch 7/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.5123 - root_mean_squared_error: 0.3360 - val_loss: 0.6703 - val_root_mean_squared_error: 0.4328\n",
            "Epoch 8/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.5022 - root_mean_squared_error: 0.3298 - val_loss: 0.6673 - val_root_mean_squared_error: 0.4311\n",
            "Epoch 9/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.4907 - root_mean_squared_error: 0.3226 - val_loss: 0.6648 - val_root_mean_squared_error: 0.4297\n",
            "Epoch 10/100\n",
            "500/500 [==============================] - 4s 8ms/step - loss: 0.4775 - root_mean_squared_error: 0.3146 - val_loss: 0.6625 - val_root_mean_squared_error: 0.4284\n",
            "Epoch 11/100\n",
            "500/500 [==============================] - 6s 12ms/step - loss: 0.4675 - root_mean_squared_error: 0.3082 - val_loss: 0.6601 - val_root_mean_squared_error: 0.4271\n",
            "Epoch 12/100\n",
            "500/500 [==============================] - 5s 11ms/step - loss: 0.4565 - root_mean_squared_error: 0.3005 - val_loss: 0.6578 - val_root_mean_squared_error: 0.4258\n",
            "Epoch 13/100\n",
            "500/500 [==============================] - 4s 9ms/step - loss: 0.4501 - root_mean_squared_error: 0.2970 - val_loss: 0.6560 - val_root_mean_squared_error: 0.4248\n",
            "Epoch 14/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.4430 - root_mean_squared_error: 0.2926 - val_loss: 0.6537 - val_root_mean_squared_error: 0.4237\n",
            "Epoch 15/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.4331 - root_mean_squared_error: 0.2857 - val_loss: 0.6517 - val_root_mean_squared_error: 0.4226\n",
            "Epoch 16/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.4264 - root_mean_squared_error: 0.2810 - val_loss: 0.6501 - val_root_mean_squared_error: 0.4217\n",
            "Epoch 17/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.4154 - root_mean_squared_error: 0.2732 - val_loss: 0.6486 - val_root_mean_squared_error: 0.4210\n",
            "Epoch 18/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.4097 - root_mean_squared_error: 0.2687 - val_loss: 0.6469 - val_root_mean_squared_error: 0.4201\n",
            "Epoch 19/100\n",
            "500/500 [==============================] - 4s 8ms/step - loss: 0.4000 - root_mean_squared_error: 0.2624 - val_loss: 0.6455 - val_root_mean_squared_error: 0.4195\n",
            "Epoch 20/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3939 - root_mean_squared_error: 0.2567 - val_loss: 0.6438 - val_root_mean_squared_error: 0.4186\n",
            "Epoch 21/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3858 - root_mean_squared_error: 0.2521 - val_loss: 0.6424 - val_root_mean_squared_error: 0.4179\n",
            "Epoch 22/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3824 - root_mean_squared_error: 0.2479 - val_loss: 0.6410 - val_root_mean_squared_error: 0.4172\n",
            "Epoch 23/100\n",
            "500/500 [==============================] - 4s 8ms/step - loss: 0.3733 - root_mean_squared_error: 0.2418 - val_loss: 0.6397 - val_root_mean_squared_error: 0.4166\n",
            "Epoch 24/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3667 - root_mean_squared_error: 0.2361 - val_loss: 0.6385 - val_root_mean_squared_error: 0.4161\n",
            "Epoch 25/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3601 - root_mean_squared_error: 0.2321 - val_loss: 0.6372 - val_root_mean_squared_error: 0.4154\n",
            "Epoch 26/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3580 - root_mean_squared_error: 0.2290 - val_loss: 0.6362 - val_root_mean_squared_error: 0.4150\n",
            "Epoch 27/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.3482 - root_mean_squared_error: 0.2204 - val_loss: 0.6353 - val_root_mean_squared_error: 0.4145\n",
            "Epoch 28/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.3454 - root_mean_squared_error: 0.2189 - val_loss: 0.6343 - val_root_mean_squared_error: 0.4141\n",
            "Epoch 29/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3386 - root_mean_squared_error: 0.2132 - val_loss: 0.6333 - val_root_mean_squared_error: 0.4137\n",
            "Epoch 30/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3360 - root_mean_squared_error: 0.2107 - val_loss: 0.6324 - val_root_mean_squared_error: 0.4133\n",
            "Epoch 31/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.3294 - root_mean_squared_error: 0.2049 - val_loss: 0.6316 - val_root_mean_squared_error: 0.4129\n",
            "Epoch 32/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3252 - root_mean_squared_error: 0.2015 - val_loss: 0.6308 - val_root_mean_squared_error: 0.4126\n",
            "Epoch 33/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.3181 - root_mean_squared_error: 0.1957 - val_loss: 0.6304 - val_root_mean_squared_error: 0.4125\n",
            "Epoch 34/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3145 - root_mean_squared_error: 0.1925 - val_loss: 0.6297 - val_root_mean_squared_error: 0.4122\n",
            "Epoch 35/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3118 - root_mean_squared_error: 0.1897 - val_loss: 0.6294 - val_root_mean_squared_error: 0.4121\n",
            "Epoch 36/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3066 - root_mean_squared_error: 0.1845 - val_loss: 0.6289 - val_root_mean_squared_error: 0.4120\n",
            "Epoch 37/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.3037 - root_mean_squared_error: 0.1834 - val_loss: 0.6284 - val_root_mean_squared_error: 0.4118\n",
            "Epoch 38/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2993 - root_mean_squared_error: 0.1775 - val_loss: 0.6280 - val_root_mean_squared_error: 0.4116\n",
            "Epoch 39/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2938 - root_mean_squared_error: 0.1737 - val_loss: 0.6276 - val_root_mean_squared_error: 0.4114\n",
            "Epoch 40/100\n",
            "500/500 [==============================] - 4s 8ms/step - loss: 0.2908 - root_mean_squared_error: 0.1698 - val_loss: 0.6273 - val_root_mean_squared_error: 0.4113\n",
            "Epoch 41/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2882 - root_mean_squared_error: 0.1676 - val_loss: 0.6270 - val_root_mean_squared_error: 0.4112\n",
            "Epoch 42/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.2849 - root_mean_squared_error: 0.1642 - val_loss: 0.6269 - val_root_mean_squared_error: 0.4112\n",
            "Epoch 43/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2810 - root_mean_squared_error: 0.1604 - val_loss: 0.6265 - val_root_mean_squared_error: 0.4111\n",
            "Epoch 44/100\n",
            "500/500 [==============================] - 3s 7ms/step - loss: 0.2777 - root_mean_squared_error: 0.1578 - val_loss: 0.6265 - val_root_mean_squared_error: 0.4111\n",
            "Epoch 45/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2737 - root_mean_squared_error: 0.1526 - val_loss: 0.6262 - val_root_mean_squared_error: 0.4110\n",
            "Epoch 46/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2721 - root_mean_squared_error: 0.1518 - val_loss: 0.6261 - val_root_mean_squared_error: 0.4110\n",
            "Epoch 47/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.2690 - root_mean_squared_error: 0.1479 - val_loss: 0.6263 - val_root_mean_squared_error: 0.4111\n",
            "Epoch 48/100\n",
            "500/500 [==============================] - 4s 8ms/step - loss: 0.2654 - root_mean_squared_error: 0.1457 - val_loss: 0.6261 - val_root_mean_squared_error: 0.4110\n",
            "Epoch 49/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2626 - root_mean_squared_error: 0.1418 - val_loss: 0.6261 - val_root_mean_squared_error: 0.4110\n",
            "Epoch 50/100\n",
            "500/500 [==============================] - 3s 7ms/step - loss: 0.2614 - root_mean_squared_error: 0.1415 - val_loss: 0.6260 - val_root_mean_squared_error: 0.4110\n",
            "Epoch 51/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2581 - root_mean_squared_error: 0.1378 - val_loss: 0.6261 - val_root_mean_squared_error: 0.4111\n",
            "Epoch 52/100\n",
            "500/500 [==============================] - 4s 8ms/step - loss: 0.2547 - root_mean_squared_error: 0.1340 - val_loss: 0.6262 - val_root_mean_squared_error: 0.4111\n",
            "Epoch 53/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2535 - root_mean_squared_error: 0.1341 - val_loss: 0.6263 - val_root_mean_squared_error: 0.4112\n",
            "Epoch 54/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2505 - root_mean_squared_error: 0.1294 - val_loss: 0.6264 - val_root_mean_squared_error: 0.4112\n",
            "Epoch 55/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2486 - root_mean_squared_error: 0.1284 - val_loss: 0.6267 - val_root_mean_squared_error: 0.4113\n",
            "Epoch 56/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.2466 - root_mean_squared_error: 0.1252 - val_loss: 0.6269 - val_root_mean_squared_error: 0.4115\n",
            "Epoch 57/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2437 - root_mean_squared_error: 0.1207 - val_loss: 0.6272 - val_root_mean_squared_error: 0.4116\n",
            "Epoch 58/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2419 - root_mean_squared_error: 0.1203 - val_loss: 0.6274 - val_root_mean_squared_error: 0.4117\n",
            "Epoch 59/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2399 - root_mean_squared_error: 0.1174 - val_loss: 0.6277 - val_root_mean_squared_error: 0.4117\n",
            "Epoch 60/100\n",
            "500/500 [==============================] - 3s 7ms/step - loss: 0.2377 - root_mean_squared_error: 0.1161 - val_loss: 0.6281 - val_root_mean_squared_error: 0.4119\n",
            "Epoch 61/100\n",
            "500/500 [==============================] - 3s 7ms/step - loss: 0.2373 - root_mean_squared_error: 0.1159 - val_loss: 0.6283 - val_root_mean_squared_error: 0.4120\n",
            "Epoch 62/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2359 - root_mean_squared_error: 0.1150 - val_loss: 0.6286 - val_root_mean_squared_error: 0.4121\n",
            "Epoch 63/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2316 - root_mean_squared_error: 0.1087 - val_loss: 0.6290 - val_root_mean_squared_error: 0.4122\n",
            "Epoch 64/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2306 - root_mean_squared_error: 0.1082 - val_loss: 0.6296 - val_root_mean_squared_error: 0.4125\n",
            "Epoch 65/100\n",
            "500/500 [==============================] - 3s 7ms/step - loss: 0.2286 - root_mean_squared_error: 0.1041 - val_loss: 0.6299 - val_root_mean_squared_error: 0.4126\n",
            "Epoch 66/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2284 - root_mean_squared_error: 0.1061 - val_loss: 0.6304 - val_root_mean_squared_error: 0.4127\n",
            "Epoch 67/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2258 - root_mean_squared_error: 0.1017 - val_loss: 0.6307 - val_root_mean_squared_error: 0.4128\n",
            "Epoch 68/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2251 - root_mean_squared_error: 0.1021 - val_loss: 0.6310 - val_root_mean_squared_error: 0.4129\n",
            "Epoch 69/100\n",
            "500/500 [==============================] - 5s 11ms/step - loss: 0.2233 - root_mean_squared_error: 0.0993 - val_loss: 0.6316 - val_root_mean_squared_error: 0.4131\n",
            "Epoch 70/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2220 - root_mean_squared_error: 0.0986 - val_loss: 0.6319 - val_root_mean_squared_error: 0.4132\n",
            "Epoch 71/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2214 - root_mean_squared_error: 0.0974 - val_loss: 0.6325 - val_root_mean_squared_error: 0.4134\n",
            "Epoch 72/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2197 - root_mean_squared_error: 0.0955 - val_loss: 0.6329 - val_root_mean_squared_error: 0.4135\n",
            "Epoch 73/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.2191 - root_mean_squared_error: 0.0940 - val_loss: 0.6336 - val_root_mean_squared_error: 0.4137\n",
            "Epoch 74/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2168 - root_mean_squared_error: 0.0915 - val_loss: 0.6342 - val_root_mean_squared_error: 0.4139\n",
            "Epoch 75/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2157 - root_mean_squared_error: 0.0906 - val_loss: 0.6348 - val_root_mean_squared_error: 0.4141\n",
            "Epoch 76/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2149 - root_mean_squared_error: 0.0900 - val_loss: 0.6354 - val_root_mean_squared_error: 0.4142\n",
            "Epoch 77/100\n",
            "500/500 [==============================] - 5s 9ms/step - loss: 0.2134 - root_mean_squared_error: 0.0877 - val_loss: 0.6360 - val_root_mean_squared_error: 0.4144\n",
            "Epoch 78/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2120 - root_mean_squared_error: 0.0849 - val_loss: 0.6365 - val_root_mean_squared_error: 0.4145\n",
            "Epoch 79/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2111 - root_mean_squared_error: 0.0852 - val_loss: 0.6372 - val_root_mean_squared_error: 0.4147\n",
            "Epoch 80/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2096 - root_mean_squared_error: 0.0818 - val_loss: 0.6377 - val_root_mean_squared_error: 0.4148\n",
            "Epoch 81/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2097 - root_mean_squared_error: 0.0825 - val_loss: 0.6383 - val_root_mean_squared_error: 0.4149\n",
            "Epoch 82/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2078 - root_mean_squared_error: 0.0808 - val_loss: 0.6389 - val_root_mean_squared_error: 0.4150\n",
            "Epoch 83/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2066 - root_mean_squared_error: 0.0785 - val_loss: 0.6397 - val_root_mean_squared_error: 0.4152\n",
            "Epoch 84/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2063 - root_mean_squared_error: 0.0800 - val_loss: 0.6404 - val_root_mean_squared_error: 0.4154\n",
            "Epoch 85/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2055 - root_mean_squared_error: 0.0766 - val_loss: 0.6413 - val_root_mean_squared_error: 0.4157\n",
            "Epoch 86/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.2052 - root_mean_squared_error: 0.0785 - val_loss: 0.6417 - val_root_mean_squared_error: 0.4158\n",
            "Epoch 87/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2038 - root_mean_squared_error: 0.0750 - val_loss: 0.6424 - val_root_mean_squared_error: 0.4159\n",
            "Epoch 88/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2033 - root_mean_squared_error: 0.0753 - val_loss: 0.6430 - val_root_mean_squared_error: 0.4161\n",
            "Epoch 89/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2020 - root_mean_squared_error: 0.0735 - val_loss: 0.6437 - val_root_mean_squared_error: 0.4162\n",
            "Epoch 90/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.2013 - root_mean_squared_error: 0.0721 - val_loss: 0.6442 - val_root_mean_squared_error: 0.4163\n",
            "Epoch 91/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.2001 - root_mean_squared_error: 0.0704 - val_loss: 0.6449 - val_root_mean_squared_error: 0.4164\n",
            "Epoch 92/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.2003 - root_mean_squared_error: 0.0713 - val_loss: 0.6458 - val_root_mean_squared_error: 0.4167\n",
            "Epoch 93/100\n",
            "500/500 [==============================] - 3s 5ms/step - loss: 0.1986 - root_mean_squared_error: 0.0672 - val_loss: 0.6464 - val_root_mean_squared_error: 0.4168\n",
            "Epoch 94/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.1985 - root_mean_squared_error: 0.0694 - val_loss: 0.6470 - val_root_mean_squared_error: 0.4168\n",
            "Epoch 95/100\n",
            "500/500 [==============================] - 3s 7ms/step - loss: 0.1978 - root_mean_squared_error: 0.0678 - val_loss: 0.6479 - val_root_mean_squared_error: 0.4170\n",
            "Epoch 96/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.1973 - root_mean_squared_error: 0.0681 - val_loss: 0.6487 - val_root_mean_squared_error: 0.4171\n",
            "Epoch 97/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.1961 - root_mean_squared_error: 0.0660 - val_loss: 0.6495 - val_root_mean_squared_error: 0.4173\n",
            "Epoch 98/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.1961 - root_mean_squared_error: 0.0655 - val_loss: 0.6501 - val_root_mean_squared_error: 0.4174\n",
            "Epoch 99/100\n",
            "500/500 [==============================] - 4s 7ms/step - loss: 0.1947 - root_mean_squared_error: 0.0622 - val_loss: 0.6507 - val_root_mean_squared_error: 0.4175\n",
            "Epoch 100/100\n",
            "500/500 [==============================] - 3s 6ms/step - loss: 0.1948 - root_mean_squared_error: 0.0639 - val_loss: 0.6513 - val_root_mean_squared_error: 0.4175\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualisasi Metrik"
      ],
      "metadata": {
        "id": "9vU1F6YKPHhn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Plot metrik evaluasi dengan matplotlib.\n"
      ],
      "metadata": {
        "id": "9ImGR31APLDt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(history.history['root_mean_squared_error'])\n",
        "plt.plot(history.history['val_root_mean_squared_error'])\n",
        "plt.title('model_metrics')\n",
        "plt.ylabel('root_mean_squared_error')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "vWcB4UGhPCx4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "e590309e-d1bf-4475-b9d9-abadadabb321"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Mendapatkan Rekomendasi Resto"
      ],
      "metadata": {
        "id": "jQXxhtaVPPSW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Mmebuat variabel book_not_read dengan menggunakan operator bitwise (~) pada variabel book_read_by_user."
      ],
      "metadata": {
        "id": "U8qSvMeIPXeW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "book_df = book_new\n",
        "df = pd.read_csv('/content/book-recommendation-dataset/Ratings.csv')\n",
        "\n",
        "# Mengambil sample user\n",
        "user_id = df['User-ID'].sample(1).iloc[0]\n",
        "book_read_by_user = df[df['User-ID'] == user_id]\n",
        "\n",
        "# Operator bitwise (~), bisa diketahui di sini https://docs.python.org/3/reference/expressions.html\n",
        "book_not_read = book_df[~book_df['id'].isin(book_read_by_user.ISBN.values)]['id']\n",
        "book_not_read = list(\n",
        "    set(book_not_read)\n",
        "    .intersection(set(book_to_book_encoded.keys()))\n",
        ")\n",
        "\n",
        "book_not_read = [[book_to_book_encoded.get(x)] for x in book_not_read]\n",
        "user_encoder = user_to_user_encoded.get(user_id)\n",
        "user_book_array = np.hstack(\n",
        "    ([[user_encoder]] * len(book_not_read), book_not_read)\n",
        ")"
      ],
      "metadata": {
        "id": "x1pYWVbZPSDG"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   Memperoleh rekomendasi buku menggunakan fungsi model.predict() dari library Keras"
      ],
      "metadata": {
        "id": "DV5BUnTLQ6-l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ratings = model.predict(user_book_array).flatten()\n",
        "\n",
        "top_ratings_indices = ratings.argsort()[-10:][::-1]\n",
        "recommended_book_ids = [\n",
        "    book_encoded_to_book.get(book_not_read[x][0]) for x in top_ratings_indices\n",
        "]\n",
        "\n",
        "print('Showing recommendations for users: {}'.format(user_id))\n",
        "print('===' * 9)\n",
        "print('Book with high ratings from user')\n",
        "print('----' * 8)\n",
        "\n",
        "top_book_user = (\n",
        "    book_read_by_user.sort_values(\n",
        "        by = 'Book-Rating',\n",
        "        ascending=False\n",
        "    )\n",
        "    .head(5)\n",
        "    .ISBN.values\n",
        ")\n",
        "\n",
        "book_df_rows = book_df[book_df['id'].isin(top_book_user)]\n",
        "for row in book_df_rows.itertuples():\n",
        "    print(row.book_title, ':', row.book_author)\n",
        "\n",
        "print('----' * 8)\n",
        "print('Top 10 book recommendation')\n",
        "print('----' * 8)\n",
        "\n",
        "recommended_book = book_df[book_df['id'].isin(recommended_book_ids)]\n",
        "for row in recommended_book.itertuples():\n",
        "    print(row.book_title, ':', row.book_author)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vDKHi_Z6Qo8U",
        "outputId": "08d498c4-1d0e-4e40-d5de-10d259f67702"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "98/98 [==============================] - 0s 2ms/step\n",
            "Showing recommendations for users: 11676\n",
            "===========================\n",
            "Book with high ratings from user\n",
            "--------------------------------\n",
            "Dark Cities Underground : Lisa Goldstein\n",
            "The Berets (Brotherhood of War Book V) : W. E. B. Griffin\n",
            "AS YOU LIKE IT : William Shakespeare\n",
            "The New Dog Handbook : H. J. Ullman\n",
            "Luck of the Draw : Chris Gudgeon\n",
            "--------------------------------\n",
            "Top 10 book recommendation\n",
            "--------------------------------\n",
            "Danny the Champion of the World (Puffin Novels) : Roald Dahl\n",
            "Making Mr Right / I Waxed My Legs for This? (Duets, 43) : Holly Jacobs\n",
            "Foreign Affairs : Alison Lurie\n",
            "Micro Fiction: An Anthology of Really Short Stories : Jerome Stern\n",
            "Dearly Beloved : Mary Jo Putney\n",
            "Understanding Pregnancy (R) : Sheldon H. Cherry\n",
            "Boone: A Novel Based on the Life and Times of Daniel Boone : Cameron Judd\n",
            "A Cry In The Night : Mary Higgins Clark\n",
            "Faith the Cow : Susan Bame Hoover\n",
            "The scrabble book : Derryn Hinch\n"
          ]
        }
      ]
    }
  ]
}
